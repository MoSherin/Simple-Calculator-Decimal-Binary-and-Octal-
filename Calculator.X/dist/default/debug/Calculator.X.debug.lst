

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Fri Jan 05 00:30:30 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=3
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=3
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    58                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    59                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    60                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    61   000000                     
    62                           ; Generated 23/03/2023 GMT
    63                           ; 
    64                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    65                           ; All rights reserved.
    66                           ; 
    67                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    68                           ; 
    69                           ; Redistribution and use in source and binary forms, with or without modification, are
    70                           ; permitted provided that the following conditions are met:
    71                           ; 
    72                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    73                           ;        conditions and the following disclaimer.
    74                           ; 
    75                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    76                           ;        of conditions and the following disclaimer in the documentation and/or other
    77                           ;        materials provided with the distribution. Publication is not required when
    78                           ;        this file is used in an embedded application.
    79                           ; 
    80                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    81                           ;        software without specific prior written permission.
    82                           ; 
    83                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    84                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    85                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    86                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    87                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    88                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    89                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    90                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    91                           ; 
    92                           ; 
    93                           ; Code-generator required, PIC18F4620 Definitions
    94                           ; 
    95                           ; SFR Addresses
    96   000000                     
    97                           	psect	idataBANK0
    98   003DF0                     __pidataBANK0:
    99                           	callstack 0
   100                           
   101                           ;initializer for _mode
   102   003DF0  31                 	db	49
   103                           
   104                           ;initializer for _led1
   105   003DF1  71                 	db	113
   106                           
   107                           ;initializer for _led
   108   003DF2  22                 	db	34
   109                           
   110                           ;initializer for _lcd
   111   003DF3  02                 	db	2
   112   003DF4  0A                 	db	10
   113   003DF5  12                 	db	18
   114   003DF6  1A                 	db	26
   115   003DF7  22                 	db	34
   116   003DF8  2A                 	db	42
   117                           
   118                           	psect	idataBANK1
   119   003CF2                     __pidataBANK1:
   120                           	callstack 0
   121                           
   122                           ;initializer for _keypad_content
   123   003CF2  37                 	db	55
   124   003CF3  38                 	db	56
   125   003CF4  39                 	db	57
   126   003CF5  2F                 	db	47
   127   003CF6  34                 	db	52
   128   003CF7  35                 	db	53
   129   003CF8  36                 	db	54
   130   003CF9  2A                 	db	42
   131   003CFA  31                 	db	49
   132   003CFB  32                 	db	50
   133   003CFC  33                 	db	51
   134   003CFD  2D                 	db	45
   135   003CFE  41                 	db	65
   136   003CFF  30                 	db	48
   137   003D00  3D                 	db	61
   138   003D01  2B                 	db	43
   139                           
   140                           ;initializer for _port_register
   141   003D02  80                 	db	128
   142   003D03  0F                 	db	15
   143   003D04  81                 	db	129
   144   003D05  0F                 	db	15
   145   003D06  82                 	db	130
   146   003D07  0F                 	db	15
   147   003D08  83                 	db	131
   148   003D09  0F                 	db	15
   149   003D0A  84                 	db	132
   150   003D0B  0F                 	db	15
   151                           
   152                           ;initializer for _lat_register
   153   003D0C  89                 	db	137
   154   003D0D  0F                 	db	15
   155   003D0E  8A                 	db	138
   156   003D0F  0F                 	db	15
   157   003D10  8B                 	db	139
   158   003D11  0F                 	db	15
   159   003D12  8C                 	db	140
   160   003D13  0F                 	db	15
   161   003D14  8D                 	db	141
   162   003D15  0F                 	db	15
   163                           
   164                           ;initializer for _tris_register
   165   003D16  92                 	db	146
   166   003D17  0F                 	db	15
   167   003D18  93                 	db	147
   168   003D19  0F                 	db	15
   169   003D1A  94                 	db	148
   170   003D1B  0F                 	db	15
   171   003D1C  95                 	db	149
   172   003D1D  0F                 	db	15
   173   003D1E  96                 	db	150
   174   003D1F  0F                 	db	15
   175                           
   176                           ;initializer for _keypad
   177   003D20  63                 	db	99
   178   003D21  6B                 	db	107
   179   003D22  73                 	db	115
   180   003D23  7B                 	db	123
   181   003D24  03                 	db	3
   182   003D25  0B                 	db	11
   183   003D26  13                 	db	19
   184   003D27  1B                 	db	27
   185                           
   186                           ;initializer for _button
   187   003D28  41                 	db	65
   188   003D29  00                 	db	0
   189   003D2A  00                 	db	0
   190   000000                     _TMR0L	set	4054
   191   000000                     _TMR0H	set	4055
   192                           
   193                           	psect	nvBANK1
   194   00015F                     __pnvBANK1:
   195                           	callstack 0
   196   00015F                     _ret:
   197                           	callstack 0
   198   00015F                     	ds	1
   199   000000                     _INT2	set	31754
   200   000000                     _INT1	set	31753
   201   000000                     _INT0	set	31752
   202   000000                     _PORTE	set	3972
   203   000000                     _PORTD	set	3971
   204   000000                     _PORTC	set	3970
   205   000000                     _PORTB	set	3969
   206   000000                     _PORTA	set	3968
   207   000000                     _LATA	set	3977
   208   000000                     _TRISA	set	3986
   209   000000                     _T0CONbits	set	4053
   210   000000                     _INTCON3bits	set	4080
   211   000000                     _INTCON2bits	set	4081
   212   000000                     _INTCONbits	set	4082
   213   000000                     _TRISE	set	3990
   214   000000                     _TRISD	set	3989
   215   000000                     _TRISC	set	3988
   216   000000                     _TRISB	set	3987
   217   000000                     _LATE	set	3981
   218   000000                     _LATD	set	3980
   219   000000                     _LATC	set	3979
   220   000000                     _LATB	set	3978
   221                           
   222                           	psect	smallconst
   223   001000                     __psmallconst:
   224                           	callstack 0
   225   001000  00                 	db	0
   226   001001                     STR_6:
   227   001001  20                 	db	32
   228   001002  20                 	db	32
   229   001003  20                 	db	32
   230   001004  4F                 	db	79	;'O'
   231   001005  63                 	db	99	;'c'
   232   001006  74                 	db	116	;'t'
   233   001007  61                 	db	97	;'a'
   234   001008  6C                 	db	108	;'l'
   235   001009  20                 	db	32
   236   00100A  4D                 	db	77	;'M'
   237   00100B  6F                 	db	111	;'o'
   238   00100C  64                 	db	100	;'d'
   239   00100D  65                 	db	101	;'e'
   240   00100E  20                 	db	32
   241   00100F  20                 	db	32
   242   001010  20                 	db	32
   243   001011  00                 	db	0
   244   001012                     STR_2:
   245   001012  20                 	db	32
   246   001013  20                 	db	32
   247   001014  44                 	db	68	;'D'
   248   001015  65                 	db	101	;'e'
   249   001016  63                 	db	99	;'c'
   250   001017  69                 	db	105	;'i'
   251   001018  6D                 	db	109	;'m'
   252   001019  61                 	db	97	;'a'
   253   00101A  6C                 	db	108	;'l'
   254   00101B  20                 	db	32
   255   00101C  4D                 	db	77	;'M'
   256   00101D  6F                 	db	111	;'o'
   257   00101E  64                 	db	100	;'d'
   258   00101F  65                 	db	101	;'e'
   259   001020  20                 	db	32
   260   001021  20                 	db	32
   261   001022  00                 	db	0
   262   001023                     STR_7:
   263   001023  20                 	db	32
   264   001024  20                 	db	32
   265   001025  42                 	db	66	;'B'
   266   001026  69                 	db	105	;'i'
   267   001027  6E                 	db	110	;'n'
   268   001028  61                 	db	97	;'a'
   269   001029  72                 	db	114	;'r'
   270   00102A  79                 	db	121	;'y'
   271   00102B  20                 	db	32
   272   00102C  4D                 	db	77	;'M'
   273   00102D  6F                 	db	111	;'o'
   274   00102E  64                 	db	100	;'d'
   275   00102F  65                 	db	101	;'e'
   276   001030  20                 	db	32
   277   001031  20                 	db	32
   278   001032  00                 	db	0
   279   001033                     STR_3:
   280   001033  31                 	db	49	;'1'
   281   001034  2D                 	db	45
   282   001035  20                 	db	32
   283   001036  44                 	db	68	;'D'
   284   001037  65                 	db	101	;'e'
   285   001038  63                 	db	99	;'c'
   286   001039  20                 	db	32
   287   00103A  20                 	db	32
   288   00103B  20                 	db	32
   289   00103C  32                 	db	50	;'2'
   290   00103D  2D                 	db	45
   291   00103E  20                 	db	32
   292   00103F  4F                 	db	79	;'O'
   293   001040  63                 	db	99	;'c'
   294   001041  74                 	db	116	;'t'
   295   001042  00                 	db	0
   296   001043                     STR_4:
   297   001043  20                 	db	32
   298   001044  20                 	db	32
   299   001045  20                 	db	32
   300   001046  20                 	db	32
   301   001047  20                 	db	32
   302   001048  33                 	db	51	;'3'
   303   001049  2D                 	db	45
   304   00104A  20                 	db	32
   305   00104B  42                 	db	66	;'B'
   306   00104C  69                 	db	105	;'i'
   307   00104D  6E                 	db	110	;'n'
   308   00104E  00                 	db	0
   309   00104F                     STR_1:
   310   00104F  25                 	db	37
   311   001050  6C                 	db	108	;'l'
   312   001051  6C                 	db	108	;'l'
   313   001052  75                 	db	117	;'u'
   314   001053  00                 	db	0
   315   001054  00                 	db	0	; dummy byte at the end
   316   000000                     
   317                           ; #config settings
   318                           
   319                           	psect	cinit
   320   003A34                     __pcinit:
   321                           	callstack 0
   322   003A34                     start_initialization:
   323                           	callstack 0
   324   003A34                     __initialization:
   325                           	callstack 0
   326                           
   327                           ; Initialize objects allocated to BANK1 (57 bytes)
   328                           ; load TBLPTR registers with __pidataBANK1
   329   003A34  0EF2               	movlw	low __pidataBANK1
   330   003A36  6EF6               	movwf	tblptrl,c
   331   003A38  0E3C               	movlw	high __pidataBANK1
   332   003A3A  6EF7               	movwf	tblptrh,c
   333   003A3C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   334   003A3E  6EF8               	movwf	tblptru,c
   335   003A40  EE01  F000         	lfsr	0,__pdataBANK1
   336   003A44  EE10 F039          	lfsr	1,57
   337   003A48                     copy_data0:
   338   003A48  0009               	tblrd		*+
   339   003A4A  CFF5 FFEE          	movff	tablat,postinc0
   340   003A4E  50E5               	movf	postdec1,w,c
   341   003A50  50E1               	movf	fsr1l,w,c
   342   003A52  E1FA               	bnz	copy_data0
   343                           
   344                           ; Initialize objects allocated to BANK0 (9 bytes)
   345                           ; load TBLPTR registers with __pidataBANK0
   346   003A54  0EF0               	movlw	low __pidataBANK0
   347   003A56  6EF6               	movwf	tblptrl,c
   348   003A58  0E3D               	movlw	high __pidataBANK0
   349   003A5A  6EF7               	movwf	tblptrh,c
   350   003A5C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   351   003A5E  6EF8               	movwf	tblptru,c
   352   003A60  EE00  F0F7         	lfsr	0,__pdataBANK0
   353   003A64  EE10 F009          	lfsr	1,9
   354   003A68                     copy_data1:
   355   003A68  0009               	tblrd		*+
   356   003A6A  CFF5 FFEE          	movff	tablat,postinc0
   357   003A6E  50E5               	movf	postdec1,w,c
   358   003A70  50E1               	movf	fsr1l,w,c
   359   003A72  E1FA               	bnz	copy_data1
   360                           
   361                           ; Clear objects allocated to BANK1 (38 bytes)
   362   003A74  EE01  F039         	lfsr	0,__pbssBANK1
   363   003A78  0E26               	movlw	38
   364   003A7A                     clear_0:
   365   003A7A  6AEE               	clrf	postinc0,c
   366   003A7C  06E8               	decf	wreg,f,c
   367   003A7E  E1FD               	bnz	clear_0
   368                           
   369                           ; Clear objects allocated to BANK0 (36 bytes)
   370   003A80  EE00  F0D3         	lfsr	0,__pbssBANK0
   371   003A84  0E24               	movlw	36
   372   003A86                     clear_1:
   373   003A86  6AEE               	clrf	postinc0,c
   374   003A88  06E8               	decf	wreg,f,c
   375   003A8A  E1FD               	bnz	clear_1
   376                           
   377                           ; Clear objects allocated to COMRAM (4 bytes)
   378   003A8C  6A7E               	clrf	(__pbssCOMRAM+3)& (0+255),c
   379   003A8E  6A7D               	clrf	(__pbssCOMRAM+2)& (0+255),c
   380   003A90  6A7C               	clrf	(__pbssCOMRAM+1)& (0+255),c
   381   003A92  6A7B               	clrf	__pbssCOMRAM& (0+255),c
   382   003A94                     end_of_initialization:
   383                           	callstack 0
   384   003A94                     __end_of__initialization:
   385                           	callstack 0
   386   003A94  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   387   003A96  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   388   003A98  0100               	movlb	0
   389   003A9A  EFCD  F016         	goto	_main	;jump to C main() function
   390                           
   391                           	psect	bssCOMRAM
   392   00007B                     __pbssCOMRAM:
   393                           	callstack 0
   394   00007B                     led_toggle@F3074:
   395                           	callstack 0
   396   00007B                     	ds	1
   397   00007C                     led_turn_off@F3069:
   398                           	callstack 0
   399   00007C                     	ds	1
   400   00007D                     led_turn_on@F3064:
   401                           	callstack 0
   402   00007D                     	ds	1
   403   00007E                     led_inti@F3059:
   404                           	callstack 0
   405   00007E                     	ds	1
   406                           
   407                           	psect	bssBANK0
   408   0000D3                     __pbssBANK0:
   409                           	callstack 0
   410   0000D3                     _Num:
   411                           	callstack 0
   412   0000D3                     	ds	8
   413   0000DB                     _preload:
   414                           	callstack 0
   415   0000DB                     	ds	2
   416   0000DD                     _IN2_Interupt_Handler:
   417                           	callstack 0
   418   0000DD                     	ds	2
   419   0000DF                     _IN1_Interupt_Handler:
   420                           	callstack 0
   421   0000DF                     	ds	2
   422   0000E1                     _IN0_Interupt_Handler:
   423                           	callstack 0
   424   0000E1                     	ds	2
   425   0000E3                     _flags:
   426                           	callstack 0
   427   0000E3                     	ds	1
   428   0000E4                     _Operator:
   429                           	callstack 0
   430   0000E4                     	ds	1
   431   0000E5                     _Num2:
   432                           	callstack 0
   433   0000E5                     	ds	8
   434   0000ED                     _Num1:
   435                           	callstack 0
   436   0000ED                     	ds	8
   437   0000F5                     _key:
   438                           	callstack 0
   439   0000F5                     	ds	1
   440   0000F6                     _button_state:
   441                           	callstack 0
   442   0000F6                     	ds	1
   443                           
   444                           	psect	dataBANK0
   445   0000F7                     __pdataBANK0:
   446                           	callstack 0
   447   0000F7                     _mode:
   448                           	callstack 0
   449   0000F7                     	ds	1
   450   0000F8                     _led1:
   451                           	callstack 0
   452   0000F8                     	ds	1
   453   0000F9                     _led:
   454                           	callstack 0
   455   0000F9                     	ds	1
   456   0000FA                     _lcd:
   457                           	callstack 0
   458   0000FA                     	ds	6
   459                           
   460                           	psect	bssBANK1
   461   000139                     __pbssBANK1:
   462                           	callstack 0
   463   000139                     _dbuf:
   464                           	callstack 0
   465   000139                     	ds	32
   466   000159                     _width:
   467                           	callstack 0
   468   000159                     	ds	2
   469   00015B                     _prec:
   470                           	callstack 0
   471   00015B                     	ds	2
   472   00015D                     _TMR0_Interupt_Handler:
   473                           	callstack 0
   474   00015D                     	ds	2
   475                           
   476                           	psect	dataBANK1
   477   000100                     __pdataBANK1:
   478                           	callstack 0
   479   000100                     _keypad_content:
   480                           	callstack 0
   481   000100                     	ds	16
   482   000110                     _port_register:
   483                           	callstack 0
   484   000110                     	ds	10
   485   00011A                     _lat_register:
   486                           	callstack 0
   487   00011A                     	ds	10
   488   000124                     _tris_register:
   489                           	callstack 0
   490   000124                     	ds	10
   491   00012E                     _keypad:
   492                           	callstack 0
   493   00012E                     	ds	8
   494   000136                     _button:
   495                           	callstack 0
   496   000136                     	ds	3
   497                           
   498                           	psect	cstackBANK0
   499   000080                     __pcstackBANK0:
   500                           	callstack 0
   501   000080                     calculate_results_binary_octal@conversion_arr:
   502                           	callstack 0
   503                           
   504                           ; 65 bytes @ 0x0
   505   000080                     	ds	65
   506   0000C1                     _calculate_results_binary_octal$1936:
   507                           	callstack 0
   508                           
   509                           ; 2 bytes @ 0x41
   510   0000C1                     	ds	2
   511   0000C3                     calculate_results_binary_octal@remainder:
   512                           	callstack 0
   513                           
   514                           ; 1 bytes @ 0x43
   515   0000C3                     	ds	1
   516   0000C4                     calculate_results_binary_octal@Dec2:
   517                           	callstack 0
   518                           
   519                           ; 2 bytes @ 0x44
   520   0000C4                     	ds	2
   521   0000C6                     calculate_results_binary_octal@Dec1:
   522                           	callstack 0
   523                           
   524                           ; 2 bytes @ 0x46
   525   0000C6                     	ds	2
   526   0000C8                     calculate_results_binary_octal@j:
   527                           	callstack 0
   528                           
   529                           ; 2 bytes @ 0x48
   530   0000C8                     	ds	2
   531   0000CA                     calculate_results_binary_octal@i:
   532                           	callstack 0
   533                           
   534                           ; 1 bytes @ 0x4A
   535   0000CA                     	ds	1
   536   0000CB                     calculate_results_binary_octal@temp:
   537                           	callstack 0
   538                           
   539                           ; 8 bytes @ 0x4B
   540   0000CB                     	ds	8
   541                           
   542                           	psect	cstackCOMRAM
   543   000001                     __pcstackCOMRAM:
   544                           	callstack 0
   545   000001                     ?___wmul:
   546                           	callstack 0
   547   000001                     ?___lwdiv:
   548                           	callstack 0
   549   000001                     ?___omul:
   550                           	callstack 0
   551   000001                     ?___lodiv:
   552                           	callstack 0
   553   000001                     ?___lomod:
   554                           	callstack 0
   555   000001                     memset@dest:
   556                           	callstack 0
   557   000001                     gpio_pin_direction_inti@pin_config:
   558                           	callstack 0
   559   000001                     gpio_pin_write_logic@pin_config:
   560                           	callstack 0
   561   000001                     gpio_pin_read_logic@pin_config:
   562                           	callstack 0
   563   000001                     ___wmul@multiplier:
   564                           	callstack 0
   565   000001                     ___lwdiv@dividend:
   566                           	callstack 0
   567   000001                     fputc@c:
   568                           	callstack 0
   569   000001                     ___omul@multiplier:
   570                           	callstack 0
   571   000001                     ___lodiv@dividend:
   572                           	callstack 0
   573   000001                     ___lomod@dividend:
   574                           	callstack 0
   575                           
   576                           ; 8 bytes @ 0x0
   577   000001                     	ds	1
   578   000002                     memset@c:
   579                           	callstack 0
   580                           
   581                           ; 2 bytes @ 0x1
   582   000002                     	ds	1
   583   000003                     ??_gpio_pin_direction_inti:
   584   000003                     ??_gpio_pin_read_logic:
   585   000003                     gpio_pin_write_logic@logic:
   586                           	callstack 0
   587   000003                     fputc@fp:
   588                           	callstack 0
   589   000003                     ___wmul@multiplicand:
   590                           	callstack 0
   591   000003                     ___lwdiv@divisor:
   592                           	callstack 0
   593                           
   594                           ; 2 bytes @ 0x2
   595   000003                     	ds	1
   596   000004                     ??_gpio_pin_write_logic:
   597   000004                     ??_fputc:
   598   000004                     memset@n:
   599                           	callstack 0
   600                           
   601                           ; 2 bytes @ 0x3
   602   000004                     	ds	1
   603   000005                     ___wmul@product:
   604                           	callstack 0
   605   000005                     ___lwdiv@quotient:
   606                           	callstack 0
   607                           
   608                           ; 2 bytes @ 0x4
   609   000005                     	ds	1
   610   000006                     memset@p:
   611                           	callstack 0
   612                           
   613                           ; 1 bytes @ 0x5
   614   000006                     	ds	1
   615   000007                     ?_a_power_b:
   616                           	callstack 0
   617   000007                     a_power_b@b:
   618                           	callstack 0
   619   000007                     ___lwdiv@counter:
   620                           	callstack 0
   621                           
   622                           ; 1 bytes @ 0x6
   623   000007                     	ds	1
   624   000008                     button_read_state@btn:
   625                           	callstack 0
   626                           
   627                           ; 2 bytes @ 0x7
   628   000008                     	ds	1
   629   000009                     ??_a_power_b:
   630   000009                     gpio_pin_direction_inti@ret:
   631                           	callstack 0
   632   000009                     ___omul@multiplicand:
   633                           	callstack 0
   634   000009                     ___lodiv@divisor:
   635                           	callstack 0
   636   000009                     ___lomod@divisor:
   637                           	callstack 0
   638                           
   639                           ; 8 bytes @ 0x8
   640   000009                     	ds	1
   641   00000A                     button_read_state@btn_state:
   642                           	callstack 0
   643   00000A                     gpio_pin_write_logic@ret:
   644                           	callstack 0
   645   00000A                     button_initialize@btn:
   646                           	callstack 0
   647                           
   648                           ; 2 bytes @ 0x9
   649   00000A                     	ds	1
   650   00000B                     LCD_SEND_4BITS@LCD:
   651                           	callstack 0
   652   00000B                     LCD_4BIT_SEND_ENABLE@LCD:
   653                           	callstack 0
   654   00000B                     keypad_get_value@keypad:
   655                           	callstack 0
   656   00000B                     gpio_pin_inti@pin_config:
   657                           	callstack 0
   658                           
   659                           ; 2 bytes @ 0xA
   660   00000B                     	ds	1
   661   00000C                     ??_LCD_4BIT_SEND_ENABLE:
   662   00000C                     button_initialize@ret:
   663                           	callstack 0
   664   00000C                     button_read_state@ret:
   665                           	callstack 0
   666   00000C                     LCD_SEND_4BITS@command:
   667                           	callstack 0
   668   00000C                     a_power_b@a:
   669                           	callstack 0
   670                           
   671                           ; 1 bytes @ 0xB
   672   00000C                     	ds	1
   673   00000D                     ??_gpio_pin_inti:
   674   00000D                     ??_LCD_SEND_4BITS:
   675   00000D                     button_read_state@Pin_Logic_Status:
   676                           	callstack 0
   677   00000D                     keypad_get_value@value:
   678                           	callstack 0
   679   00000D                     a_power_b@i:
   680                           	callstack 0
   681                           
   682                           ; 2 bytes @ 0xC
   683   00000D                     	ds	1
   684   00000E                     ??_keypad_get_value:
   685   00000E                     gpio_pin_inti@ret:
   686                           	callstack 0
   687                           
   688                           ; 1 bytes @ 0xD
   689   00000E                     	ds	1
   690   00000F                     keypad_initi@keypad:
   691                           	callstack 0
   692   00000F                     a_power_b@ans:
   693                           	callstack 0
   694                           
   695                           ; 2 bytes @ 0xE
   696   00000F                     	ds	1
   697   000010                     LCD_SEND_4BITS@i:
   698                           	callstack 0
   699                           
   700                           ; 2 bytes @ 0xF
   701   000010                     	ds	1
   702   000011                     ??_keypad_initi:
   703   000011                     ___lomod@counter:
   704                           	callstack 0
   705   000011                     ___omul@product:
   706                           	callstack 0
   707   000011                     ___lodiv@quotient:
   708                           	callstack 0
   709                           
   710                           ; 8 bytes @ 0x10
   711   000011                     	ds	1
   712   000012                     keypad_get_value@logic_state:
   713                           	callstack 0
   714   000012                     lcd_4bit_send_command@LCD:
   715                           	callstack 0
   716   000012                     lcd_4bit_print_char@LCD:
   717                           	callstack 0
   718                           
   719                           ; 1 bytes @ 0x11
   720   000012                     	ds	1
   721   000013                     keypad_initi@ret:
   722                           	callstack 0
   723   000013                     keypad_get_value@ret:
   724                           	callstack 0
   725   000013                     lcd_4bit_send_command@command:
   726                           	callstack 0
   727   000013                     lcd_4bit_print_char@data:
   728                           	callstack 0
   729                           
   730                           ; 1 bytes @ 0x12
   731   000013                     	ds	1
   732   000014                     ??_lcd_4bit_send_command:
   733   000014                     ??_lcd_4bit_print_char:
   734   000014                     keypad_initi@i:
   735                           	callstack 0
   736   000014                     keypad_get_value@i:
   737                           	callstack 0
   738                           
   739                           ; 2 bytes @ 0x13
   740   000014                     	ds	1
   741   000015                     lcd_4bit_send_command@ret:
   742                           	callstack 0
   743   000015                     lcd_4bit_print_char@ret:
   744                           	callstack 0
   745                           
   746                           ; 1 bytes @ 0x14
   747   000015                     	ds	1
   748   000016                     lcd_4bit_initi@LCD:
   749                           	callstack 0
   750   000016                     lcd_4bit_set_cursor@LCD:
   751                           	callstack 0
   752   000016                     lcd_4bit_print_string@LCD:
   753                           	callstack 0
   754   000016                     keypad_initi@i_113:
   755                           	callstack 0
   756   000016                     keypad_get_value@rows:
   757                           	callstack 0
   758                           
   759                           ; 2 bytes @ 0x15
   760   000016                     	ds	1
   761   000017                     ??_lcd_4bit_initi:
   762   000017                     lcd_4bit_set_cursor@Cols:
   763                           	callstack 0
   764   000017                     lcd_4bit_print_string@Str:
   765                           	callstack 0
   766                           
   767                           ; 2 bytes @ 0x16
   768   000017                     	ds	1
   769   000018                     lcd_4bit_set_cursor@Rows:
   770                           	callstack 0
   771   000018                     keypad_get_value@cols:
   772                           	callstack 0
   773   000018                     lcd_4bit_initi@i:
   774                           	callstack 0
   775                           
   776                           ; 2 bytes @ 0x17
   777   000018                     	ds	1
   778   000019                     ??_lcd_4bit_set_cursor:
   779   000019                     lcd_4bit_print_string@ret:
   780                           	callstack 0
   781   000019                     ___lodiv@counter:
   782                           	callstack 0
   783                           
   784                           ; 1 bytes @ 0x18
   785   000019                     	ds	1
   786   00001A                     lcd_4bit_initi@ret:
   787                           	callstack 0
   788   00001A                     vfpfcnvrt@fp:
   789                           	callstack 0
   790                           
   791                           ; 1 bytes @ 0x19
   792   00001A                     	ds	1
   793   00001B                     lcd_4bit_set_cursor@ret:
   794                           	callstack 0
   795   00001B                     vfpfcnvrt@fmt:
   796                           	callstack 0
   797                           
   798                           ; 1 bytes @ 0x1A
   799   00001B                     	ds	1
   800   00001C                     ??_mode_select_menu:
   801   00001C                     vfpfcnvrt@ap:
   802                           	callstack 0
   803                           
   804                           ; 1 bytes @ 0x1B
   805   00001C                     	ds	1
   806   00001D                     ??_vfpfcnvrt:
   807                           
   808                           ; 1 bytes @ 0x1C
   809   00001D                     	ds	8
   810   000025                     vfpfcnvrt@convarg:
   811                           	callstack 0
   812                           
   813                           ; 8 bytes @ 0x24
   814   000025                     	ds	8
   815   00002D                     vfpfcnvrt@cp:
   816                           	callstack 0
   817                           
   818                           ; 1 bytes @ 0x2C
   819   00002D                     	ds	1
   820   00002E                     vfpfcnvrt@c:
   821                           	callstack 0
   822                           
   823                           ; 1 bytes @ 0x2D
   824   00002E                     	ds	1
   825   00002F                     ?_vfprintf:
   826                           	callstack 0
   827   00002F                     vfprintf@fp:
   828                           	callstack 0
   829                           
   830                           ; 1 bytes @ 0x2E
   831   00002F                     	ds	1
   832   000030                     vfprintf@fmt:
   833                           	callstack 0
   834                           
   835                           ; 1 bytes @ 0x2F
   836   000030                     	ds	1
   837   000031                     vfprintf@ap:
   838                           	callstack 0
   839                           
   840                           ; 1 bytes @ 0x30
   841   000031                     	ds	1
   842   000032                     vfprintf@cfmt:
   843                           	callstack 0
   844                           
   845                           ; 1 bytes @ 0x31
   846   000032                     	ds	1
   847   000033                     ?_sprintf:
   848                           	callstack 0
   849   000033                     sprintf@s:
   850                           	callstack 0
   851                           
   852                           ; 1 bytes @ 0x32
   853   000033                     	ds	1
   854   000034                     sprintf@fmt:
   855                           	callstack 0
   856                           
   857                           ; 1 bytes @ 0x33
   858   000034                     	ds	9
   859   00003D                     sprintf@ap:
   860                           	callstack 0
   861                           
   862                           ; 1 bytes @ 0x3C
   863   00003D                     	ds	1
   864   00003E                     sprintf@f:
   865                           	callstack 0
   866                           
   867                           ; 12 bytes @ 0x3D
   868   00003E                     	ds	12
   869   00004A                     convert_int_to_string@value:
   870                           	callstack 0
   871                           
   872                           ; 8 bytes @ 0x49
   873   00004A                     	ds	8
   874   000052                     convert_int_to_string@str:
   875                           	callstack 0
   876                           
   877                           ; 1 bytes @ 0x51
   878   000052                     	ds	1
   879   000053                     lcd_4bit_print_int@LCD:
   880                           	callstack 0
   881                           
   882                           ; 1 bytes @ 0x52
   883   000053                     	ds	1
   884   000054                     lcd_4bit_print_int@value:
   885                           	callstack 0
   886                           
   887                           ; 8 bytes @ 0x53
   888   000054                     	ds	8
   889   00005C                     lcd_4bit_print_int@str:
   890                           	callstack 0
   891                           
   892                           ; 11 bytes @ 0x5B
   893   00005C                     	ds	11
   894   000067                     lcd_4bit_print_int@ret:
   895                           	callstack 0
   896                           
   897                           ; 1 bytes @ 0x66
   898   000067                     	ds	1
   899   000068                     ??_calculate_results_decimal:
   900   000068                     ??_calculate_results_binary_octal:
   901                           
   902                           ; 1 bytes @ 0x67
   903   000068                     	ds	9
   904   000071                     ??_print_numbers:
   905                           
   906                           ; 1 bytes @ 0x70
   907   000071                     	ds	8
   908   000079                     ??_main:
   909                           
   910                           ; 1 bytes @ 0x78
   911   000079                     	ds	2
   912                           
   913 ;;
   914 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   915 ;;
   916 ;; *************** function _main *****************
   917 ;; Defined at:
   918 ;;		line 13 in file "app.c"
   919 ;; Parameters:    Size  Location     Type
   920 ;;		None
   921 ;; Auto vars:     Size  Location     Type
   922 ;;		None
   923 ;; Return value:  Size  Location     Type
   924 ;;                  2  525[None  ] int 
   925 ;; Registers used:
   926 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   927 ;; Tracked objects:
   928 ;;		On entry : 0/0
   929 ;;		On exit  : 0/0
   930 ;;		Unchanged: 0/0
   931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   934 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   935 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   936 ;;Total ram usage:        2 bytes
   937 ;; Hardware stack levels required when called: 11
   938 ;; This function calls:
   939 ;;		_button_initialize
   940 ;;		_button_read_state
   941 ;;		_keypad_get_value
   942 ;;		_keypad_initi
   943 ;;		_lcd_4bit_initi
   944 ;;		_lcd_4bit_print_string
   945 ;;		_lcd_4bit_send_command
   946 ;;		_mode_select_menu
   947 ;;		_print_numbers
   948 ;; This function is called by:
   949 ;;		Startup code after reset
   950 ;; This function uses a non-reentrant model
   951 ;;
   952                           
   953                           	psect	text0
   954   002D9A                     __ptext0:
   955                           	callstack 0
   956   002D9A                     _main:
   957                           	callstack 20
   958   002D9A                     
   959                           ;app.c: 14:     ret = lcd_4bit_initi(&lcd);
   960   002D9A  0EFA               	movlw	low _lcd
   961   002D9C  6E16               	movwf	lcd_4bit_initi@LCD^0,c
   962   002D9E  EC72  F017         	call	_lcd_4bit_initi	;wreg free
   963   002DA2  0101               	movlb	1	; () banked
   964   002DA4  6F5F               	movwf	_ret& (0+255),b
   965                           
   966                           ;app.c: 15:     ret = keypad_initi(&keypad);
   967   002DA6  0E2E               	movlw	low _keypad
   968   002DA8  6E0F               	movwf	keypad_initi@keypad^0,c
   969   002DAA  0E01               	movlw	high _keypad
   970   002DAC  6E10               	movwf	(keypad_initi@keypad+1)^0,c
   971   002DAE  ECD1  F01A         	call	_keypad_initi	;wreg free
   972   002DB2  0101               	movlb	1	; () banked
   973   002DB4  6F5F               	movwf	_ret& (0+255),b
   974                           
   975                           ;app.c: 16:     ret = button_initialize(&button);
   976   002DB6  0E36               	movlw	low _button
   977   002DB8  6E0A               	movwf	button_initialize@btn^0,c
   978   002DBA  0E01               	movlw	high _button
   979   002DBC  6E0B               	movwf	(button_initialize@btn+1)^0,c
   980   002DBE  ECC8  F01E         	call	_button_initialize	;wreg free
   981   002DC2  0101               	movlb	1	; () banked
   982   002DC4  6F5F               	movwf	_ret& (0+255),b
   983   002DC6                     
   984                           ; BSR set to: 1
   985                           ;app.c: 17:     ret = lcd_4bit_print_string(&lcd, "  Decimal Mode  ");
   986   002DC6  0EFA               	movlw	low _lcd
   987   002DC8  6E16               	movwf	lcd_4bit_print_string@LCD^0,c
   988   002DCA  0E12               	movlw	low STR_2
   989   002DCC  6E17               	movwf	lcd_4bit_print_string@Str^0,c
   990   002DCE  5017               	movf	lcd_4bit_print_string@Str^0,w,c
   991   002DD0  A4D8               	btfss	status,2,c
   992   002DD2  0E10               	movlw	high __smallconst
   993   002DD4  6E18               	movwf	(lcd_4bit_print_string@Str+1)^0,c
   994   002DD6  ECF8  F01B         	call	_lcd_4bit_print_string	;wreg free
   995   002DDA  0101               	movlb	1	; () banked
   996   002DDC  6F5F               	movwf	_ret& (0+255),b
   997   002DDE                     
   998                           ; BSR set to: 1
   999                           ;app.c: 18:     _delay((unsigned long)((1000)*(4000000UL/4000.0)));
  1000   002DDE  0E06               	movlw	6
  1001   002DE0  6E7A               	movwf	(??_main+1)^0,c
  1002   002DE2  0E13               	movlw	19
  1003   002DE4  6E79               	movwf	??_main^0,c
  1004   002DE6  0EAE               	movlw	174
  1005   002DE8                     u4777:
  1006   002DE8  2EE8               	decfsz	wreg,f,c
  1007   002DEA  D7FE               	bra	u4777
  1008   002DEC  2E79               	decfsz	??_main^0,f,c
  1009   002DEE  D7FC               	bra	u4777
  1010   002DF0  2E7A               	decfsz	(??_main+1)^0,f,c
  1011   002DF2  D7FA               	bra	u4777
  1012   002DF4                     
  1013                           ;app.c: 19:     ret = lcd_4bit_send_command(&lcd, 0x01);
  1014   002DF4  0EFA               	movlw	low _lcd
  1015   002DF6  6E12               	movwf	lcd_4bit_send_command@LCD^0,c
  1016   002DF8  0E01               	movlw	1
  1017   002DFA  6E13               	movwf	lcd_4bit_send_command@command^0,c
  1018   002DFC  ECAF  F01D         	call	_lcd_4bit_send_command	;wreg free
  1019   002E00  0101               	movlb	1	; () banked
  1020   002E02  6F5F               	movwf	_ret& (0+255),b
  1021   002E04                     l5718:
  1022                           
  1023                           ;app.c: 21:     {;app.c: 22:         ret = button_read_state(&button, &button_state);
  1024   002E04  0E36               	movlw	low _button
  1025   002E06  6E08               	movwf	button_read_state@btn^0,c
  1026   002E08  0E01               	movlw	high _button
  1027   002E0A  6E09               	movwf	(button_read_state@btn+1)^0,c
  1028   002E0C  0EF6               	movlw	low _button_state
  1029   002E0E  6E0A               	movwf	button_read_state@btn_state^0,c
  1030   002E10  EC1F  F01B         	call	_button_read_state	;wreg free
  1031   002E14  0101               	movlb	1	; () banked
  1032   002E16  6F5F               	movwf	_ret& (0+255),b
  1033   002E18                     
  1034                           ; BSR set to: 1
  1035                           ;app.c: 23:         ret = keypad_get_value(&keypad, &key);
  1036   002E18  0E2E               	movlw	low _keypad
  1037   002E1A  6E0B               	movwf	keypad_get_value@keypad^0,c
  1038   002E1C  0E01               	movlw	high _keypad
  1039   002E1E  6E0C               	movwf	(keypad_get_value@keypad+1)^0,c
  1040   002E20  0EF5               	movlw	low _key
  1041   002E22  6E0D               	movwf	keypad_get_value@value^0,c
  1042   002E24  EC24  F016         	call	_keypad_get_value	;wreg free
  1043   002E28  0101               	movlb	1	; () banked
  1044   002E2A  6F5F               	movwf	_ret& (0+255),b
  1045   002E2C                     
  1046                           ; BSR set to: 1
  1047                           ;app.c: 24:         if(BUTTON_PRESSED == button_state)
  1048   002E2C  0100               	movlb	0	; () banked
  1049   002E2E  05F6               	decf	_button_state& (0+255),w,b
  1050   002E30  A4D8               	btfss	status,2,c
  1051   002E32  EF1D  F017         	goto	u4711
  1052   002E36  EF1F  F017         	goto	u4710
  1053   002E3A                     u4711:
  1054   002E3A  EF2C  F017         	goto	l5728
  1055   002E3E                     u4710:
  1056   002E3E                     
  1057                           ; BSR set to: 0
  1058                           ;app.c: 25:         {;app.c: 26:             mode_select_menu();
  1059   002E3E  EC44  F014         	call	_mode_select_menu	;wreg free
  1060   002E42                     
  1061                           ;app.c: 27:             _delay((unsigned long)((500)*(4000000UL/4000.0)));
  1062   002E42  0E03               	movlw	3
  1063   002E44  6E7A               	movwf	(??_main+1)^0,c
  1064   002E46  0E8A               	movlw	138
  1065   002E48  6E79               	movwf	??_main^0,c
  1066   002E4A  0E56               	movlw	86
  1067   002E4C                     u4787:
  1068   002E4C  2EE8               	decfsz	wreg,f,c
  1069   002E4E  D7FE               	bra	u4787
  1070   002E50  2E79               	decfsz	??_main^0,f,c
  1071   002E52  D7FC               	bra	u4787
  1072   002E54  2E7A               	decfsz	(??_main+1)^0,f,c
  1073   002E56  D7FA               	bra	u4787
  1074   002E58                     l5728:
  1075                           
  1076                           ;app.c: 31:         if(key)
  1077   002E58  0100               	movlb	0	; () banked
  1078   002E5A  51F5               	movf	_key& (0+255),w,b
  1079   002E5C  B4D8               	btfsc	status,2,c
  1080   002E5E  EF33  F017         	goto	u4721
  1081   002E62  EF35  F017         	goto	u4720
  1082   002E66                     u4721:
  1083   002E66  EF02  F017         	goto	l5718
  1084   002E6A                     u4720:
  1085   002E6A                     
  1086                           ; BSR set to: 0
  1087                           ;app.c: 32:         {;app.c: 33:             if('=' == Operator)
  1088   002E6A  0E3D               	movlw	61
  1089   002E6C  19E4               	xorwf	_Operator& (0+255),w,b
  1090   002E6E  A4D8               	btfss	status,2,c
  1091   002E70  EF3C  F017         	goto	u4731
  1092   002E74  EF3E  F017         	goto	u4730
  1093   002E78                     u4731:
  1094   002E78  EF61  F017         	goto	l5744
  1095   002E7C                     u4730:
  1096   002E7C                     
  1097                           ; BSR set to: 0
  1098                           ;app.c: 34:             {;app.c: 35:                 Operator = 0; Num1 = 0; Num2 = 0; N
      +                          um = 0;
  1099   002E7C  0E00               	movlw	0
  1100   002E7E  6FE4               	movwf	_Operator& (0+255),b
  1101   002E80                     
  1102                           ; BSR set to: 0
  1103   002E80  EE20  F0ED         	lfsr	2,_Num1
  1104   002E84  0E07               	movlw	7
  1105   002E86                     u4741:
  1106   002E86  6ADE               	clrf	postinc2,c
  1107   002E88  06E8               	decf	wreg,f,c
  1108   002E8A  E2FD               	bc	u4741
  1109   002E8C                     
  1110                           ; BSR set to: 0
  1111   002E8C  EE20  F0E5         	lfsr	2,_Num2
  1112   002E90  0E07               	movlw	7
  1113   002E92                     u4751:
  1114   002E92  6ADE               	clrf	postinc2,c
  1115   002E94  06E8               	decf	wreg,f,c
  1116   002E96  E2FD               	bc	u4751
  1117   002E98                     
  1118                           ; BSR set to: 0
  1119   002E98  EE20  F0D3         	lfsr	2,_Num
  1120   002E9C  0E07               	movlw	7
  1121   002E9E                     u4761:
  1122   002E9E  6ADE               	clrf	postinc2,c
  1123   002EA0  06E8               	decf	wreg,f,c
  1124   002EA2  E2FD               	bc	u4761
  1125   002EA4                     
  1126                           ; BSR set to: 0
  1127                           ;app.c: 36:                 ret = lcd_4bit_send_command(&lcd, 0x01);
  1128   002EA4  0EFA               	movlw	low _lcd
  1129   002EA6  6E12               	movwf	lcd_4bit_send_command@LCD^0,c
  1130   002EA8  0E01               	movlw	1
  1131   002EAA  6E13               	movwf	lcd_4bit_send_command@command^0,c
  1132   002EAC  ECAF  F01D         	call	_lcd_4bit_send_command	;wreg free
  1133   002EB0  0101               	movlb	1	; () banked
  1134   002EB2  6F5F               	movwf	_ret& (0+255),b
  1135   002EB4                     
  1136                           ; BSR set to: 1
  1137                           ;app.c: 37:                 _delay((unsigned long)((10)*(4000000UL/4000.0)));
  1138   002EB4  0E0D               	movlw	13
  1139   002EB6  6E79               	movwf	??_main^0,c
  1140   002EB8  0EFC               	movlw	252
  1141   002EBA                     u4797:
  1142   002EBA  2EE8               	decfsz	wreg,f,c
  1143   002EBC  D7FE               	bra	u4797
  1144   002EBE  2E79               	decfsz	??_main^0,f,c
  1145   002EC0  D7FC               	bra	u4797
  1146   002EC2                     l5744:
  1147                           
  1148                           ;app.c: 40:             print_numbers();
  1149   002EC2  EC2B  F008         	call	_print_numbers	;wreg free
  1150   002EC6                     
  1151                           ;app.c: 41:             _delay((unsigned long)((500)*(4000000UL/4000.0)));
  1152   002EC6  0E03               	movlw	3
  1153   002EC8  6E7A               	movwf	(??_main+1)^0,c
  1154   002ECA  0E8A               	movlw	138
  1155   002ECC  6E79               	movwf	??_main^0,c
  1156   002ECE  0E56               	movlw	86
  1157   002ED0                     u4807:
  1158   002ED0  2EE8               	decfsz	wreg,f,c
  1159   002ED2  D7FE               	bra	u4807
  1160   002ED4  2E79               	decfsz	??_main^0,f,c
  1161   002ED6  D7FC               	bra	u4807
  1162   002ED8  2E7A               	decfsz	(??_main+1)^0,f,c
  1163   002EDA  D7FA               	bra	u4807
  1164                           
  1165                           ;app.c: 42:         }
  1166   002EDC  EF02  F017         	goto	l5718
  1167   002EE0  EF07  F000         	goto	start
  1168   002EE4                     __end_of_main:
  1169                           	callstack 0
  1170                           
  1171 ;; *************** function _print_numbers *****************
  1172 ;; Defined at:
  1173 ;;		line 51 in file "app.c"
  1174 ;; Parameters:    Size  Location     Type
  1175 ;;		None
  1176 ;; Auto vars:     Size  Location     Type
  1177 ;;		None
  1178 ;; Return value:  Size  Location     Type
  1179 ;;                  1    wreg      void 
  1180 ;; Registers used:
  1181 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1182 ;; Tracked objects:
  1183 ;;		On entry : 0/0
  1184 ;;		On exit  : 0/0
  1185 ;;		Unchanged: 0/0
  1186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1189 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1190 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1191 ;;Total ram usage:        8 bytes
  1192 ;; Hardware stack levels used: 1
  1193 ;; Hardware stack levels required when called: 10
  1194 ;; This function calls:
  1195 ;;		___omul
  1196 ;;		_calculate_results_binary_octal
  1197 ;;		_calculate_results_decimal
  1198 ;;		_lcd_4bit_print_char
  1199 ;;		_lcd_4bit_send_command
  1200 ;; This function is called by:
  1201 ;;		_main
  1202 ;; This function uses a non-reentrant model
  1203 ;;
  1204                           
  1205                           	psect	text1
  1206   001056                     __ptext1:
  1207                           	callstack 0
  1208   001056                     _print_numbers:
  1209                           	callstack 20
  1210   001056                     
  1211                           ;app.c: 52:     switch(key){
  1212   001056  EF3B  F00F         	goto	l5484
  1213   00105A                     l5312:
  1214                           
  1215                           ; BSR set to: 0
  1216                           ;app.c: 54:             if(!Operator)
  1217   00105A  51E4               	movf	_Operator& (0+255),w,b
  1218   00105C  A4D8               	btfss	status,2,c
  1219   00105E  EF33  F008         	goto	u4181
  1220   001062  EF35  F008         	goto	u4180
  1221   001066                     u4181:
  1222   001066  EF8A  F008         	goto	l5318
  1223   00106A                     u4180:
  1224   00106A                     
  1225                           ; BSR set to: 0
  1226                           ;app.c: 55:             {;app.c: 56:                 Num1 = 1 + (10*Num1);
  1227   00106A  C0ED  F001         	movff	_Num1,___omul@multiplier
  1228   00106E  C0EE  F002         	movff	_Num1+1,___omul@multiplier+1
  1229   001072  C0EF  F003         	movff	_Num1+2,___omul@multiplier+2
  1230   001076  C0F0  F004         	movff	_Num1+3,___omul@multiplier+3
  1231   00107A  C0F1  F005         	movff	_Num1+4,___omul@multiplier+4
  1232   00107E  C0F2  F006         	movff	_Num1+5,___omul@multiplier+5
  1233   001082  C0F3  F007         	movff	_Num1+6,___omul@multiplier+6
  1234   001086  C0F4  F008         	movff	_Num1+7,___omul@multiplier+7
  1235   00108A  0E0A               	movlw	10
  1236   00108C  6E09               	movwf	___omul@multiplicand^0,c
  1237   00108E  0E00               	movlw	0
  1238   001090  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  1239   001092  0E00               	movlw	0
  1240   001094  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  1241   001096  0E00               	movlw	0
  1242   001098  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  1243   00109A  0E00               	movlw	0
  1244   00109C  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  1245   00109E  0E00               	movlw	0
  1246   0010A0  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  1247   0010A2  0E00               	movlw	0
  1248   0010A4  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  1249   0010A6  0E00               	movlw	0
  1250   0010A8  6E10               	movwf	(___omul@multiplicand+7)^0,c
  1251   0010AA  EC82  F01A         	call	___omul	;wreg free
  1252   0010AE  C001  F071         	movff	?___omul,??_print_numbers
  1253   0010B2  C002  F072         	movff	?___omul+1,??_print_numbers+1
  1254   0010B6  C003  F073         	movff	?___omul+2,??_print_numbers+2
  1255   0010BA  C004  F074         	movff	?___omul+3,??_print_numbers+3
  1256   0010BE  C005  F075         	movff	?___omul+4,??_print_numbers+4
  1257   0010C2  C006  F076         	movff	?___omul+5,??_print_numbers+5
  1258   0010C6  C007  F077         	movff	?___omul+6,??_print_numbers+6
  1259   0010CA  C008  F078         	movff	?___omul+7,??_print_numbers+7
  1260   0010CE  0E01               	movlw	1
  1261   0010D0  2471               	addwf	??_print_numbers^0,w,c
  1262   0010D2  0100               	movlb	0	; () banked
  1263   0010D4  6FED               	movwf	_Num1& (0+255),b
  1264   0010D6  0E00               	movlw	0
  1265   0010D8  2072               	addwfc	(??_print_numbers+1)^0,w,c
  1266   0010DA  6FEE               	movwf	(_Num1+1)& (0+255),b
  1267   0010DC  0E00               	movlw	0
  1268   0010DE  2073               	addwfc	(??_print_numbers+2)^0,w,c
  1269   0010E0  6FEF               	movwf	(_Num1+2)& (0+255),b
  1270   0010E2  0E00               	movlw	0
  1271   0010E4  2074               	addwfc	(??_print_numbers+3)^0,w,c
  1272   0010E6  6FF0               	movwf	(_Num1+3)& (0+255),b
  1273   0010E8  0E00               	movlw	0
  1274   0010EA  2075               	addwfc	(??_print_numbers+4)^0,w,c
  1275   0010EC  6FF1               	movwf	(_Num1+4)& (0+255),b
  1276   0010EE  0E00               	movlw	0
  1277   0010F0  2076               	addwfc	(??_print_numbers+5)^0,w,c
  1278   0010F2  6FF2               	movwf	(_Num1+5)& (0+255),b
  1279   0010F4  0E00               	movlw	0
  1280   0010F6  2077               	addwfc	(??_print_numbers+6)^0,w,c
  1281   0010F8  6FF3               	movwf	(_Num1+6)& (0+255),b
  1282   0010FA  0E00               	movlw	0
  1283   0010FC  2078               	addwfc	(??_print_numbers+7)^0,w,c
  1284   0010FE  6FF4               	movwf	(_Num1+7)& (0+255),b
  1285   001100                     l5316:
  1286                           
  1287                           ;app.c: 57:                 ret = lcd_4bit_print_char(&lcd, key);
  1288   001100  0EFA               	movlw	low _lcd
  1289   001102  6E12               	movwf	lcd_4bit_print_char@LCD^0,c
  1290   001104  C0F5  F013         	movff	_key,lcd_4bit_print_char@data
  1291   001108  EC80  F01D         	call	_lcd_4bit_print_char	;wreg free
  1292   00110C  0101               	movlb	1	; () banked
  1293   00110E  6F5F               	movwf	_ret& (0+255),b
  1294                           
  1295                           ;app.c: 58:             }
  1296   001110  EF89  F00F         	goto	l5486
  1297   001114                     l5318:
  1298                           
  1299                           ; BSR set to: 0
  1300                           ;app.c: 60:             {;app.c: 61:                 Num2 = 1 + (10*Num2);
  1301   001114  C0E5  F001         	movff	_Num2,___omul@multiplier
  1302   001118  C0E6  F002         	movff	_Num2+1,___omul@multiplier+1
  1303   00111C  C0E7  F003         	movff	_Num2+2,___omul@multiplier+2
  1304   001120  C0E8  F004         	movff	_Num2+3,___omul@multiplier+3
  1305   001124  C0E9  F005         	movff	_Num2+4,___omul@multiplier+4
  1306   001128  C0EA  F006         	movff	_Num2+5,___omul@multiplier+5
  1307   00112C  C0EB  F007         	movff	_Num2+6,___omul@multiplier+6
  1308   001130  C0EC  F008         	movff	_Num2+7,___omul@multiplier+7
  1309   001134  0E0A               	movlw	10
  1310   001136  6E09               	movwf	___omul@multiplicand^0,c
  1311   001138  0E00               	movlw	0
  1312   00113A  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  1313   00113C  0E00               	movlw	0
  1314   00113E  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  1315   001140  0E00               	movlw	0
  1316   001142  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  1317   001144  0E00               	movlw	0
  1318   001146  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  1319   001148  0E00               	movlw	0
  1320   00114A  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  1321   00114C  0E00               	movlw	0
  1322   00114E  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  1323   001150  0E00               	movlw	0
  1324   001152  6E10               	movwf	(___omul@multiplicand+7)^0,c
  1325   001154  EC82  F01A         	call	___omul	;wreg free
  1326   001158  C001  F071         	movff	?___omul,??_print_numbers
  1327   00115C  C002  F072         	movff	?___omul+1,??_print_numbers+1
  1328   001160  C003  F073         	movff	?___omul+2,??_print_numbers+2
  1329   001164  C004  F074         	movff	?___omul+3,??_print_numbers+3
  1330   001168  C005  F075         	movff	?___omul+4,??_print_numbers+4
  1331   00116C  C006  F076         	movff	?___omul+5,??_print_numbers+5
  1332   001170  C007  F077         	movff	?___omul+6,??_print_numbers+6
  1333   001174  C008  F078         	movff	?___omul+7,??_print_numbers+7
  1334   001178  0E01               	movlw	1
  1335   00117A  2471               	addwf	??_print_numbers^0,w,c
  1336   00117C  0100               	movlb	0	; () banked
  1337   00117E  6FE5               	movwf	_Num2& (0+255),b
  1338   001180  0E00               	movlw	0
  1339   001182  2072               	addwfc	(??_print_numbers+1)^0,w,c
  1340   001184  6FE6               	movwf	(_Num2+1)& (0+255),b
  1341   001186  0E00               	movlw	0
  1342   001188  2073               	addwfc	(??_print_numbers+2)^0,w,c
  1343   00118A  6FE7               	movwf	(_Num2+2)& (0+255),b
  1344   00118C  0E00               	movlw	0
  1345   00118E  2074               	addwfc	(??_print_numbers+3)^0,w,c
  1346   001190  6FE8               	movwf	(_Num2+3)& (0+255),b
  1347   001192  0E00               	movlw	0
  1348   001194  2075               	addwfc	(??_print_numbers+4)^0,w,c
  1349   001196  6FE9               	movwf	(_Num2+4)& (0+255),b
  1350   001198  0E00               	movlw	0
  1351   00119A  2076               	addwfc	(??_print_numbers+5)^0,w,c
  1352   00119C  6FEA               	movwf	(_Num2+5)& (0+255),b
  1353   00119E  0E00               	movlw	0
  1354   0011A0  2077               	addwfc	(??_print_numbers+6)^0,w,c
  1355   0011A2  6FEB               	movwf	(_Num2+6)& (0+255),b
  1356   0011A4  0E00               	movlw	0
  1357   0011A6  2078               	addwfc	(??_print_numbers+7)^0,w,c
  1358   0011A8  6FEC               	movwf	(_Num2+7)& (0+255),b
  1359   0011AA  EF80  F008         	goto	l5316
  1360   0011AE                     l5322:
  1361                           
  1362                           ; BSR set to: 0
  1363                           ;app.c: 66:             if('1' == mode || '2' == mode)
  1364   0011AE  0E31               	movlw	49
  1365   0011B0  19F7               	xorwf	_mode& (0+255),w,b
  1366   0011B2  B4D8               	btfsc	status,2,c
  1367   0011B4  EFDE  F008         	goto	u4191
  1368   0011B8  EFE0  F008         	goto	u4190
  1369   0011BC                     u4191:
  1370   0011BC  EFE9  F008         	goto	l5326
  1371   0011C0                     u4190:
  1372   0011C0                     
  1373                           ; BSR set to: 0
  1374   0011C0  0E32               	movlw	50
  1375   0011C2  19F7               	xorwf	_mode& (0+255),w,b
  1376   0011C4  A4D8               	btfss	status,2,c
  1377   0011C6  EFE7  F008         	goto	u4201
  1378   0011CA  EFE9  F008         	goto	u4200
  1379   0011CE                     u4201:
  1380   0011CE  EF89  F00F         	goto	l5486
  1381   0011D2                     u4200:
  1382   0011D2                     l5326:
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;app.c: 67:             {;app.c: 68:                 if(!Operator)
  1386   0011D2  51E4               	movf	_Operator& (0+255),w,b
  1387   0011D4  A4D8               	btfss	status,2,c
  1388   0011D6  EFEF  F008         	goto	u4211
  1389   0011DA  EFF1  F008         	goto	u4210
  1390   0011DE                     u4211:
  1391   0011DE  EF3E  F009         	goto	l5332
  1392   0011E2                     u4210:
  1393   0011E2                     
  1394                           ; BSR set to: 0
  1395                           ;app.c: 69:                 {;app.c: 70:                     Num1 = 2 + (10*Num1);
  1396   0011E2  C0ED  F001         	movff	_Num1,___omul@multiplier
  1397   0011E6  C0EE  F002         	movff	_Num1+1,___omul@multiplier+1
  1398   0011EA  C0EF  F003         	movff	_Num1+2,___omul@multiplier+2
  1399   0011EE  C0F0  F004         	movff	_Num1+3,___omul@multiplier+3
  1400   0011F2  C0F1  F005         	movff	_Num1+4,___omul@multiplier+4
  1401   0011F6  C0F2  F006         	movff	_Num1+5,___omul@multiplier+5
  1402   0011FA  C0F3  F007         	movff	_Num1+6,___omul@multiplier+6
  1403   0011FE  C0F4  F008         	movff	_Num1+7,___omul@multiplier+7
  1404   001202  0E0A               	movlw	10
  1405   001204  6E09               	movwf	___omul@multiplicand^0,c
  1406   001206  0E00               	movlw	0
  1407   001208  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  1408   00120A  0E00               	movlw	0
  1409   00120C  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  1410   00120E  0E00               	movlw	0
  1411   001210  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  1412   001212  0E00               	movlw	0
  1413   001214  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  1414   001216  0E00               	movlw	0
  1415   001218  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  1416   00121A  0E00               	movlw	0
  1417   00121C  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  1418   00121E  0E00               	movlw	0
  1419   001220  6E10               	movwf	(___omul@multiplicand+7)^0,c
  1420   001222  EC82  F01A         	call	___omul	;wreg free
  1421   001226  C001  F071         	movff	?___omul,??_print_numbers
  1422   00122A  C002  F072         	movff	?___omul+1,??_print_numbers+1
  1423   00122E  C003  F073         	movff	?___omul+2,??_print_numbers+2
  1424   001232  C004  F074         	movff	?___omul+3,??_print_numbers+3
  1425   001236  C005  F075         	movff	?___omul+4,??_print_numbers+4
  1426   00123A  C006  F076         	movff	?___omul+5,??_print_numbers+5
  1427   00123E  C007  F077         	movff	?___omul+6,??_print_numbers+6
  1428   001242  C008  F078         	movff	?___omul+7,??_print_numbers+7
  1429   001246  0E02               	movlw	2
  1430   001248  2471               	addwf	??_print_numbers^0,w,c
  1431   00124A  0100               	movlb	0	; () banked
  1432   00124C  6FED               	movwf	_Num1& (0+255),b
  1433   00124E  0E00               	movlw	0
  1434   001250  2072               	addwfc	(??_print_numbers+1)^0,w,c
  1435   001252  6FEE               	movwf	(_Num1+1)& (0+255),b
  1436   001254  0E00               	movlw	0
  1437   001256  2073               	addwfc	(??_print_numbers+2)^0,w,c
  1438   001258  6FEF               	movwf	(_Num1+2)& (0+255),b
  1439   00125A  0E00               	movlw	0
  1440   00125C  2074               	addwfc	(??_print_numbers+3)^0,w,c
  1441   00125E  6FF0               	movwf	(_Num1+3)& (0+255),b
  1442   001260  0E00               	movlw	0
  1443   001262  2075               	addwfc	(??_print_numbers+4)^0,w,c
  1444   001264  6FF1               	movwf	(_Num1+4)& (0+255),b
  1445   001266  0E00               	movlw	0
  1446   001268  2076               	addwfc	(??_print_numbers+5)^0,w,c
  1447   00126A  6FF2               	movwf	(_Num1+5)& (0+255),b
  1448   00126C  0E00               	movlw	0
  1449   00126E  2077               	addwfc	(??_print_numbers+6)^0,w,c
  1450   001270  6FF3               	movwf	(_Num1+6)& (0+255),b
  1451   001272  0E00               	movlw	0
  1452   001274  2078               	addwfc	(??_print_numbers+7)^0,w,c
  1453   001276  6FF4               	movwf	(_Num1+7)& (0+255),b
  1454   001278  EF80  F008         	goto	l5316
  1455   00127C                     l5332:
  1456                           
  1457                           ; BSR set to: 0
  1458                           ;app.c: 74:                 {;app.c: 75:                     Num2 = 2 + (10*Num2);
  1459   00127C  C0E5  F001         	movff	_Num2,___omul@multiplier
  1460   001280  C0E6  F002         	movff	_Num2+1,___omul@multiplier+1
  1461   001284  C0E7  F003         	movff	_Num2+2,___omul@multiplier+2
  1462   001288  C0E8  F004         	movff	_Num2+3,___omul@multiplier+3
  1463   00128C  C0E9  F005         	movff	_Num2+4,___omul@multiplier+4
  1464   001290  C0EA  F006         	movff	_Num2+5,___omul@multiplier+5
  1465   001294  C0EB  F007         	movff	_Num2+6,___omul@multiplier+6
  1466   001298  C0EC  F008         	movff	_Num2+7,___omul@multiplier+7
  1467   00129C  0E0A               	movlw	10
  1468   00129E  6E09               	movwf	___omul@multiplicand^0,c
  1469   0012A0  0E00               	movlw	0
  1470   0012A2  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  1471   0012A4  0E00               	movlw	0
  1472   0012A6  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  1473   0012A8  0E00               	movlw	0
  1474   0012AA  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  1475   0012AC  0E00               	movlw	0
  1476   0012AE  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  1477   0012B0  0E00               	movlw	0
  1478   0012B2  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  1479   0012B4  0E00               	movlw	0
  1480   0012B6  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  1481   0012B8  0E00               	movlw	0
  1482   0012BA  6E10               	movwf	(___omul@multiplicand+7)^0,c
  1483   0012BC  EC82  F01A         	call	___omul	;wreg free
  1484   0012C0  C001  F071         	movff	?___omul,??_print_numbers
  1485   0012C4  C002  F072         	movff	?___omul+1,??_print_numbers+1
  1486   0012C8  C003  F073         	movff	?___omul+2,??_print_numbers+2
  1487   0012CC  C004  F074         	movff	?___omul+3,??_print_numbers+3
  1488   0012D0  C005  F075         	movff	?___omul+4,??_print_numbers+4
  1489   0012D4  C006  F076         	movff	?___omul+5,??_print_numbers+5
  1490   0012D8  C007  F077         	movff	?___omul+6,??_print_numbers+6
  1491   0012DC  C008  F078         	movff	?___omul+7,??_print_numbers+7
  1492   0012E0  0E02               	movlw	2
  1493   0012E2  2471               	addwf	??_print_numbers^0,w,c
  1494   0012E4  0100               	movlb	0	; () banked
  1495   0012E6  6FE5               	movwf	_Num2& (0+255),b
  1496   0012E8  0E00               	movlw	0
  1497   0012EA  2072               	addwfc	(??_print_numbers+1)^0,w,c
  1498   0012EC  6FE6               	movwf	(_Num2+1)& (0+255),b
  1499   0012EE  0E00               	movlw	0
  1500   0012F0  2073               	addwfc	(??_print_numbers+2)^0,w,c
  1501   0012F2  6FE7               	movwf	(_Num2+2)& (0+255),b
  1502   0012F4  0E00               	movlw	0
  1503   0012F6  2074               	addwfc	(??_print_numbers+3)^0,w,c
  1504   0012F8  6FE8               	movwf	(_Num2+3)& (0+255),b
  1505   0012FA  0E00               	movlw	0
  1506   0012FC  2075               	addwfc	(??_print_numbers+4)^0,w,c
  1507   0012FE  6FE9               	movwf	(_Num2+4)& (0+255),b
  1508   001300  0E00               	movlw	0
  1509   001302  2076               	addwfc	(??_print_numbers+5)^0,w,c
  1510   001304  6FEA               	movwf	(_Num2+5)& (0+255),b
  1511   001306  0E00               	movlw	0
  1512   001308  2077               	addwfc	(??_print_numbers+6)^0,w,c
  1513   00130A  6FEB               	movwf	(_Num2+6)& (0+255),b
  1514   00130C  0E00               	movlw	0
  1515   00130E  2078               	addwfc	(??_print_numbers+7)^0,w,c
  1516   001310  6FEC               	movwf	(_Num2+7)& (0+255),b
  1517   001312  EF80  F008         	goto	l5316
  1518   001316                     l5336:
  1519                           
  1520                           ; BSR set to: 0
  1521                           ;app.c: 82:             if('1' == mode || '2' == mode)
  1522   001316  0E31               	movlw	49
  1523   001318  19F7               	xorwf	_mode& (0+255),w,b
  1524   00131A  B4D8               	btfsc	status,2,c
  1525   00131C  EF92  F009         	goto	u4221
  1526   001320  EF94  F009         	goto	u4220
  1527   001324                     u4221:
  1528   001324  EF9D  F009         	goto	l5340
  1529   001328                     u4220:
  1530   001328                     
  1531                           ; BSR set to: 0
  1532   001328  0E32               	movlw	50
  1533   00132A  19F7               	xorwf	_mode& (0+255),w,b
  1534   00132C  A4D8               	btfss	status,2,c
  1535   00132E  EF9B  F009         	goto	u4231
  1536   001332  EF9D  F009         	goto	u4230
  1537   001336                     u4231:
  1538   001336  EF89  F00F         	goto	l5486
  1539   00133A                     u4230:
  1540   00133A                     l5340:
  1541                           
  1542                           ; BSR set to: 0
  1543                           ;app.c: 83:             {;app.c: 84:                 if(!Operator)
  1544   00133A  51E4               	movf	_Operator& (0+255),w,b
  1545   00133C  A4D8               	btfss	status,2,c
  1546   00133E  EFA3  F009         	goto	u4241
  1547   001342  EFA5  F009         	goto	u4240
  1548   001346                     u4241:
  1549   001346  EFF2  F009         	goto	l5346
  1550   00134A                     u4240:
  1551   00134A                     
  1552                           ; BSR set to: 0
  1553                           ;app.c: 85:                 {;app.c: 86:                     Num1 = 3 + (10*Num1);
  1554   00134A  C0ED  F001         	movff	_Num1,___omul@multiplier
  1555   00134E  C0EE  F002         	movff	_Num1+1,___omul@multiplier+1
  1556   001352  C0EF  F003         	movff	_Num1+2,___omul@multiplier+2
  1557   001356  C0F0  F004         	movff	_Num1+3,___omul@multiplier+3
  1558   00135A  C0F1  F005         	movff	_Num1+4,___omul@multiplier+4
  1559   00135E  C0F2  F006         	movff	_Num1+5,___omul@multiplier+5
  1560   001362  C0F3  F007         	movff	_Num1+6,___omul@multiplier+6
  1561   001366  C0F4  F008         	movff	_Num1+7,___omul@multiplier+7
  1562   00136A  0E0A               	movlw	10
  1563   00136C  6E09               	movwf	___omul@multiplicand^0,c
  1564   00136E  0E00               	movlw	0
  1565   001370  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  1566   001372  0E00               	movlw	0
  1567   001374  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  1568   001376  0E00               	movlw	0
  1569   001378  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  1570   00137A  0E00               	movlw	0
  1571   00137C  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  1572   00137E  0E00               	movlw	0
  1573   001380  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  1574   001382  0E00               	movlw	0
  1575   001384  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  1576   001386  0E00               	movlw	0
  1577   001388  6E10               	movwf	(___omul@multiplicand+7)^0,c
  1578   00138A  EC82  F01A         	call	___omul	;wreg free
  1579   00138E  C001  F071         	movff	?___omul,??_print_numbers
  1580   001392  C002  F072         	movff	?___omul+1,??_print_numbers+1
  1581   001396  C003  F073         	movff	?___omul+2,??_print_numbers+2
  1582   00139A  C004  F074         	movff	?___omul+3,??_print_numbers+3
  1583   00139E  C005  F075         	movff	?___omul+4,??_print_numbers+4
  1584   0013A2  C006  F076         	movff	?___omul+5,??_print_numbers+5
  1585   0013A6  C007  F077         	movff	?___omul+6,??_print_numbers+6
  1586   0013AA  C008  F078         	movff	?___omul+7,??_print_numbers+7
  1587   0013AE  0E03               	movlw	3
  1588   0013B0  2471               	addwf	??_print_numbers^0,w,c
  1589   0013B2  0100               	movlb	0	; () banked
  1590   0013B4  6FED               	movwf	_Num1& (0+255),b
  1591   0013B6  0E00               	movlw	0
  1592   0013B8  2072               	addwfc	(??_print_numbers+1)^0,w,c
  1593   0013BA  6FEE               	movwf	(_Num1+1)& (0+255),b
  1594   0013BC  0E00               	movlw	0
  1595   0013BE  2073               	addwfc	(??_print_numbers+2)^0,w,c
  1596   0013C0  6FEF               	movwf	(_Num1+2)& (0+255),b
  1597   0013C2  0E00               	movlw	0
  1598   0013C4  2074               	addwfc	(??_print_numbers+3)^0,w,c
  1599   0013C6  6FF0               	movwf	(_Num1+3)& (0+255),b
  1600   0013C8  0E00               	movlw	0
  1601   0013CA  2075               	addwfc	(??_print_numbers+4)^0,w,c
  1602   0013CC  6FF1               	movwf	(_Num1+4)& (0+255),b
  1603   0013CE  0E00               	movlw	0
  1604   0013D0  2076               	addwfc	(??_print_numbers+5)^0,w,c
  1605   0013D2  6FF2               	movwf	(_Num1+5)& (0+255),b
  1606   0013D4  0E00               	movlw	0
  1607   0013D6  2077               	addwfc	(??_print_numbers+6)^0,w,c
  1608   0013D8  6FF3               	movwf	(_Num1+6)& (0+255),b
  1609   0013DA  0E00               	movlw	0
  1610   0013DC  2078               	addwfc	(??_print_numbers+7)^0,w,c
  1611   0013DE  6FF4               	movwf	(_Num1+7)& (0+255),b
  1612   0013E0  EF80  F008         	goto	l5316
  1613   0013E4                     l5346:
  1614                           
  1615                           ; BSR set to: 0
  1616                           ;app.c: 90:                 {;app.c: 91:                     Num2 = 3 + (10*Num2);
  1617   0013E4  C0E5  F001         	movff	_Num2,___omul@multiplier
  1618   0013E8  C0E6  F002         	movff	_Num2+1,___omul@multiplier+1
  1619   0013EC  C0E7  F003         	movff	_Num2+2,___omul@multiplier+2
  1620   0013F0  C0E8  F004         	movff	_Num2+3,___omul@multiplier+3
  1621   0013F4  C0E9  F005         	movff	_Num2+4,___omul@multiplier+4
  1622   0013F8  C0EA  F006         	movff	_Num2+5,___omul@multiplier+5
  1623   0013FC  C0EB  F007         	movff	_Num2+6,___omul@multiplier+6
  1624   001400  C0EC  F008         	movff	_Num2+7,___omul@multiplier+7
  1625   001404  0E0A               	movlw	10
  1626   001406  6E09               	movwf	___omul@multiplicand^0,c
  1627   001408  0E00               	movlw	0
  1628   00140A  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  1629   00140C  0E00               	movlw	0
  1630   00140E  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  1631   001410  0E00               	movlw	0
  1632   001412  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  1633   001414  0E00               	movlw	0
  1634   001416  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  1635   001418  0E00               	movlw	0
  1636   00141A  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  1637   00141C  0E00               	movlw	0
  1638   00141E  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  1639   001420  0E00               	movlw	0
  1640   001422  6E10               	movwf	(___omul@multiplicand+7)^0,c
  1641   001424  EC82  F01A         	call	___omul	;wreg free
  1642   001428  C001  F071         	movff	?___omul,??_print_numbers
  1643   00142C  C002  F072         	movff	?___omul+1,??_print_numbers+1
  1644   001430  C003  F073         	movff	?___omul+2,??_print_numbers+2
  1645   001434  C004  F074         	movff	?___omul+3,??_print_numbers+3
  1646   001438  C005  F075         	movff	?___omul+4,??_print_numbers+4
  1647   00143C  C006  F076         	movff	?___omul+5,??_print_numbers+5
  1648   001440  C007  F077         	movff	?___omul+6,??_print_numbers+6
  1649   001444  C008  F078         	movff	?___omul+7,??_print_numbers+7
  1650   001448  0E03               	movlw	3
  1651   00144A  2471               	addwf	??_print_numbers^0,w,c
  1652   00144C  0100               	movlb	0	; () banked
  1653   00144E  6FE5               	movwf	_Num2& (0+255),b
  1654   001450  0E00               	movlw	0
  1655   001452  2072               	addwfc	(??_print_numbers+1)^0,w,c
  1656   001454  6FE6               	movwf	(_Num2+1)& (0+255),b
  1657   001456  0E00               	movlw	0
  1658   001458  2073               	addwfc	(??_print_numbers+2)^0,w,c
  1659   00145A  6FE7               	movwf	(_Num2+2)& (0+255),b
  1660   00145C  0E00               	movlw	0
  1661   00145E  2074               	addwfc	(??_print_numbers+3)^0,w,c
  1662   001460  6FE8               	movwf	(_Num2+3)& (0+255),b
  1663   001462  0E00               	movlw	0
  1664   001464  2075               	addwfc	(??_print_numbers+4)^0,w,c
  1665   001466  6FE9               	movwf	(_Num2+4)& (0+255),b
  1666   001468  0E00               	movlw	0
  1667   00146A  2076               	addwfc	(??_print_numbers+5)^0,w,c
  1668   00146C  6FEA               	movwf	(_Num2+5)& (0+255),b
  1669   00146E  0E00               	movlw	0
  1670   001470  2077               	addwfc	(??_print_numbers+6)^0,w,c
  1671   001472  6FEB               	movwf	(_Num2+6)& (0+255),b
  1672   001474  0E00               	movlw	0
  1673   001476  2078               	addwfc	(??_print_numbers+7)^0,w,c
  1674   001478  6FEC               	movwf	(_Num2+7)& (0+255),b
  1675   00147A  EF80  F008         	goto	l5316
  1676   00147E                     l5350:
  1677                           
  1678                           ; BSR set to: 0
  1679                           ;app.c: 98:             if('1' == mode || '2' == mode)
  1680   00147E  0E31               	movlw	49
  1681   001480  19F7               	xorwf	_mode& (0+255),w,b
  1682   001482  B4D8               	btfsc	status,2,c
  1683   001484  EF46  F00A         	goto	u4251
  1684   001488  EF48  F00A         	goto	u4250
  1685   00148C                     u4251:
  1686   00148C  EF51  F00A         	goto	l5354
  1687   001490                     u4250:
  1688   001490                     
  1689                           ; BSR set to: 0
  1690   001490  0E32               	movlw	50
  1691   001492  19F7               	xorwf	_mode& (0+255),w,b
  1692   001494  A4D8               	btfss	status,2,c
  1693   001496  EF4F  F00A         	goto	u4261
  1694   00149A  EF51  F00A         	goto	u4260
  1695   00149E                     u4261:
  1696   00149E  EF89  F00F         	goto	l5486
  1697   0014A2                     u4260:
  1698   0014A2                     l5354:
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;app.c: 99:             {;app.c: 100:                 if(!Operator)
  1702   0014A2  51E4               	movf	_Operator& (0+255),w,b
  1703   0014A4  A4D8               	btfss	status,2,c
  1704   0014A6  EF57  F00A         	goto	u4271
  1705   0014AA  EF59  F00A         	goto	u4270
  1706   0014AE                     u4271:
  1707   0014AE  EFA6  F00A         	goto	l5360
  1708   0014B2                     u4270:
  1709   0014B2                     
  1710                           ; BSR set to: 0
  1711                           ;app.c: 101:                 {;app.c: 102:                     Num1 = 4 + (10*Num1);
  1712   0014B2  C0ED  F001         	movff	_Num1,___omul@multiplier
  1713   0014B6  C0EE  F002         	movff	_Num1+1,___omul@multiplier+1
  1714   0014BA  C0EF  F003         	movff	_Num1+2,___omul@multiplier+2
  1715   0014BE  C0F0  F004         	movff	_Num1+3,___omul@multiplier+3
  1716   0014C2  C0F1  F005         	movff	_Num1+4,___omul@multiplier+4
  1717   0014C6  C0F2  F006         	movff	_Num1+5,___omul@multiplier+5
  1718   0014CA  C0F3  F007         	movff	_Num1+6,___omul@multiplier+6
  1719   0014CE  C0F4  F008         	movff	_Num1+7,___omul@multiplier+7
  1720   0014D2  0E0A               	movlw	10
  1721   0014D4  6E09               	movwf	___omul@multiplicand^0,c
  1722   0014D6  0E00               	movlw	0
  1723   0014D8  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  1724   0014DA  0E00               	movlw	0
  1725   0014DC  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  1726   0014DE  0E00               	movlw	0
  1727   0014E0  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  1728   0014E2  0E00               	movlw	0
  1729   0014E4  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  1730   0014E6  0E00               	movlw	0
  1731   0014E8  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  1732   0014EA  0E00               	movlw	0
  1733   0014EC  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  1734   0014EE  0E00               	movlw	0
  1735   0014F0  6E10               	movwf	(___omul@multiplicand+7)^0,c
  1736   0014F2  EC82  F01A         	call	___omul	;wreg free
  1737   0014F6  C001  F071         	movff	?___omul,??_print_numbers
  1738   0014FA  C002  F072         	movff	?___omul+1,??_print_numbers+1
  1739   0014FE  C003  F073         	movff	?___omul+2,??_print_numbers+2
  1740   001502  C004  F074         	movff	?___omul+3,??_print_numbers+3
  1741   001506  C005  F075         	movff	?___omul+4,??_print_numbers+4
  1742   00150A  C006  F076         	movff	?___omul+5,??_print_numbers+5
  1743   00150E  C007  F077         	movff	?___omul+6,??_print_numbers+6
  1744   001512  C008  F078         	movff	?___omul+7,??_print_numbers+7
  1745   001516  0E04               	movlw	4
  1746   001518  2471               	addwf	??_print_numbers^0,w,c
  1747   00151A  0100               	movlb	0	; () banked
  1748   00151C  6FED               	movwf	_Num1& (0+255),b
  1749   00151E  0E00               	movlw	0
  1750   001520  2072               	addwfc	(??_print_numbers+1)^0,w,c
  1751   001522  6FEE               	movwf	(_Num1+1)& (0+255),b
  1752   001524  0E00               	movlw	0
  1753   001526  2073               	addwfc	(??_print_numbers+2)^0,w,c
  1754   001528  6FEF               	movwf	(_Num1+2)& (0+255),b
  1755   00152A  0E00               	movlw	0
  1756   00152C  2074               	addwfc	(??_print_numbers+3)^0,w,c
  1757   00152E  6FF0               	movwf	(_Num1+3)& (0+255),b
  1758   001530  0E00               	movlw	0
  1759   001532  2075               	addwfc	(??_print_numbers+4)^0,w,c
  1760   001534  6FF1               	movwf	(_Num1+4)& (0+255),b
  1761   001536  0E00               	movlw	0
  1762   001538  2076               	addwfc	(??_print_numbers+5)^0,w,c
  1763   00153A  6FF2               	movwf	(_Num1+5)& (0+255),b
  1764   00153C  0E00               	movlw	0
  1765   00153E  2077               	addwfc	(??_print_numbers+6)^0,w,c
  1766   001540  6FF3               	movwf	(_Num1+6)& (0+255),b
  1767   001542  0E00               	movlw	0
  1768   001544  2078               	addwfc	(??_print_numbers+7)^0,w,c
  1769   001546  6FF4               	movwf	(_Num1+7)& (0+255),b
  1770   001548  EF80  F008         	goto	l5316
  1771   00154C                     l5360:
  1772                           
  1773                           ; BSR set to: 0
  1774                           ;app.c: 106:                 {;app.c: 107:                     Num2 = 4 + (10*Num2);
  1775   00154C  C0E5  F001         	movff	_Num2,___omul@multiplier
  1776   001550  C0E6  F002         	movff	_Num2+1,___omul@multiplier+1
  1777   001554  C0E7  F003         	movff	_Num2+2,___omul@multiplier+2
  1778   001558  C0E8  F004         	movff	_Num2+3,___omul@multiplier+3
  1779   00155C  C0E9  F005         	movff	_Num2+4,___omul@multiplier+4
  1780   001560  C0EA  F006         	movff	_Num2+5,___omul@multiplier+5
  1781   001564  C0EB  F007         	movff	_Num2+6,___omul@multiplier+6
  1782   001568  C0EC  F008         	movff	_Num2+7,___omul@multiplier+7
  1783   00156C  0E0A               	movlw	10
  1784   00156E  6E09               	movwf	___omul@multiplicand^0,c
  1785   001570  0E00               	movlw	0
  1786   001572  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  1787   001574  0E00               	movlw	0
  1788   001576  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  1789   001578  0E00               	movlw	0
  1790   00157A  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  1791   00157C  0E00               	movlw	0
  1792   00157E  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  1793   001580  0E00               	movlw	0
  1794   001582  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  1795   001584  0E00               	movlw	0
  1796   001586  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  1797   001588  0E00               	movlw	0
  1798   00158A  6E10               	movwf	(___omul@multiplicand+7)^0,c
  1799   00158C  EC82  F01A         	call	___omul	;wreg free
  1800   001590  C001  F071         	movff	?___omul,??_print_numbers
  1801   001594  C002  F072         	movff	?___omul+1,??_print_numbers+1
  1802   001598  C003  F073         	movff	?___omul+2,??_print_numbers+2
  1803   00159C  C004  F074         	movff	?___omul+3,??_print_numbers+3
  1804   0015A0  C005  F075         	movff	?___omul+4,??_print_numbers+4
  1805   0015A4  C006  F076         	movff	?___omul+5,??_print_numbers+5
  1806   0015A8  C007  F077         	movff	?___omul+6,??_print_numbers+6
  1807   0015AC  C008  F078         	movff	?___omul+7,??_print_numbers+7
  1808   0015B0  0E04               	movlw	4
  1809   0015B2  2471               	addwf	??_print_numbers^0,w,c
  1810   0015B4  0100               	movlb	0	; () banked
  1811   0015B6  6FE5               	movwf	_Num2& (0+255),b
  1812   0015B8  0E00               	movlw	0
  1813   0015BA  2072               	addwfc	(??_print_numbers+1)^0,w,c
  1814   0015BC  6FE6               	movwf	(_Num2+1)& (0+255),b
  1815   0015BE  0E00               	movlw	0
  1816   0015C0  2073               	addwfc	(??_print_numbers+2)^0,w,c
  1817   0015C2  6FE7               	movwf	(_Num2+2)& (0+255),b
  1818   0015C4  0E00               	movlw	0
  1819   0015C6  2074               	addwfc	(??_print_numbers+3)^0,w,c
  1820   0015C8  6FE8               	movwf	(_Num2+3)& (0+255),b
  1821   0015CA  0E00               	movlw	0
  1822   0015CC  2075               	addwfc	(??_print_numbers+4)^0,w,c
  1823   0015CE  6FE9               	movwf	(_Num2+4)& (0+255),b
  1824   0015D0  0E00               	movlw	0
  1825   0015D2  2076               	addwfc	(??_print_numbers+5)^0,w,c
  1826   0015D4  6FEA               	movwf	(_Num2+5)& (0+255),b
  1827   0015D6  0E00               	movlw	0
  1828   0015D8  2077               	addwfc	(??_print_numbers+6)^0,w,c
  1829   0015DA  6FEB               	movwf	(_Num2+6)& (0+255),b
  1830   0015DC  0E00               	movlw	0
  1831   0015DE  2078               	addwfc	(??_print_numbers+7)^0,w,c
  1832   0015E0  6FEC               	movwf	(_Num2+7)& (0+255),b
  1833   0015E2  EF80  F008         	goto	l5316
  1834   0015E6                     l5364:
  1835                           
  1836                           ; BSR set to: 0
  1837                           ;app.c: 114:             if('1' == mode || '2' == mode)
  1838   0015E6  0E31               	movlw	49
  1839   0015E8  19F7               	xorwf	_mode& (0+255),w,b
  1840   0015EA  B4D8               	btfsc	status,2,c
  1841   0015EC  EFFA  F00A         	goto	u4281
  1842   0015F0  EFFC  F00A         	goto	u4280
  1843   0015F4                     u4281:
  1844   0015F4  EF05  F00B         	goto	l5368
  1845   0015F8                     u4280:
  1846   0015F8                     
  1847                           ; BSR set to: 0
  1848   0015F8  0E32               	movlw	50
  1849   0015FA  19F7               	xorwf	_mode& (0+255),w,b
  1850   0015FC  A4D8               	btfss	status,2,c
  1851   0015FE  EF03  F00B         	goto	u4291
  1852   001602  EF05  F00B         	goto	u4290
  1853   001606                     u4291:
  1854   001606  EF89  F00F         	goto	l5486
  1855   00160A                     u4290:
  1856   00160A                     l5368:
  1857                           
  1858                           ; BSR set to: 0
  1859                           ;app.c: 115:             {;app.c: 116:                 if(!Operator)
  1860   00160A  51E4               	movf	_Operator& (0+255),w,b
  1861   00160C  A4D8               	btfss	status,2,c
  1862   00160E  EF0B  F00B         	goto	u4301
  1863   001612  EF0D  F00B         	goto	u4300
  1864   001616                     u4301:
  1865   001616  EF5A  F00B         	goto	l5374
  1866   00161A                     u4300:
  1867   00161A                     
  1868                           ; BSR set to: 0
  1869                           ;app.c: 117:                 {;app.c: 118:                     Num1 = 5 + (10*Num1);
  1870   00161A  C0ED  F001         	movff	_Num1,___omul@multiplier
  1871   00161E  C0EE  F002         	movff	_Num1+1,___omul@multiplier+1
  1872   001622  C0EF  F003         	movff	_Num1+2,___omul@multiplier+2
  1873   001626  C0F0  F004         	movff	_Num1+3,___omul@multiplier+3
  1874   00162A  C0F1  F005         	movff	_Num1+4,___omul@multiplier+4
  1875   00162E  C0F2  F006         	movff	_Num1+5,___omul@multiplier+5
  1876   001632  C0F3  F007         	movff	_Num1+6,___omul@multiplier+6
  1877   001636  C0F4  F008         	movff	_Num1+7,___omul@multiplier+7
  1878   00163A  0E0A               	movlw	10
  1879   00163C  6E09               	movwf	___omul@multiplicand^0,c
  1880   00163E  0E00               	movlw	0
  1881   001640  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  1882   001642  0E00               	movlw	0
  1883   001644  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  1884   001646  0E00               	movlw	0
  1885   001648  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  1886   00164A  0E00               	movlw	0
  1887   00164C  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  1888   00164E  0E00               	movlw	0
  1889   001650  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  1890   001652  0E00               	movlw	0
  1891   001654  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  1892   001656  0E00               	movlw	0
  1893   001658  6E10               	movwf	(___omul@multiplicand+7)^0,c
  1894   00165A  EC82  F01A         	call	___omul	;wreg free
  1895   00165E  C001  F071         	movff	?___omul,??_print_numbers
  1896   001662  C002  F072         	movff	?___omul+1,??_print_numbers+1
  1897   001666  C003  F073         	movff	?___omul+2,??_print_numbers+2
  1898   00166A  C004  F074         	movff	?___omul+3,??_print_numbers+3
  1899   00166E  C005  F075         	movff	?___omul+4,??_print_numbers+4
  1900   001672  C006  F076         	movff	?___omul+5,??_print_numbers+5
  1901   001676  C007  F077         	movff	?___omul+6,??_print_numbers+6
  1902   00167A  C008  F078         	movff	?___omul+7,??_print_numbers+7
  1903   00167E  0E05               	movlw	5
  1904   001680  2471               	addwf	??_print_numbers^0,w,c
  1905   001682  0100               	movlb	0	; () banked
  1906   001684  6FED               	movwf	_Num1& (0+255),b
  1907   001686  0E00               	movlw	0
  1908   001688  2072               	addwfc	(??_print_numbers+1)^0,w,c
  1909   00168A  6FEE               	movwf	(_Num1+1)& (0+255),b
  1910   00168C  0E00               	movlw	0
  1911   00168E  2073               	addwfc	(??_print_numbers+2)^0,w,c
  1912   001690  6FEF               	movwf	(_Num1+2)& (0+255),b
  1913   001692  0E00               	movlw	0
  1914   001694  2074               	addwfc	(??_print_numbers+3)^0,w,c
  1915   001696  6FF0               	movwf	(_Num1+3)& (0+255),b
  1916   001698  0E00               	movlw	0
  1917   00169A  2075               	addwfc	(??_print_numbers+4)^0,w,c
  1918   00169C  6FF1               	movwf	(_Num1+4)& (0+255),b
  1919   00169E  0E00               	movlw	0
  1920   0016A0  2076               	addwfc	(??_print_numbers+5)^0,w,c
  1921   0016A2  6FF2               	movwf	(_Num1+5)& (0+255),b
  1922   0016A4  0E00               	movlw	0
  1923   0016A6  2077               	addwfc	(??_print_numbers+6)^0,w,c
  1924   0016A8  6FF3               	movwf	(_Num1+6)& (0+255),b
  1925   0016AA  0E00               	movlw	0
  1926   0016AC  2078               	addwfc	(??_print_numbers+7)^0,w,c
  1927   0016AE  6FF4               	movwf	(_Num1+7)& (0+255),b
  1928   0016B0  EF80  F008         	goto	l5316
  1929   0016B4                     l5374:
  1930                           
  1931                           ; BSR set to: 0
  1932                           ;app.c: 122:                 {;app.c: 123:                     Num2 = 5 + (10*Num2);
  1933   0016B4  C0E5  F001         	movff	_Num2,___omul@multiplier
  1934   0016B8  C0E6  F002         	movff	_Num2+1,___omul@multiplier+1
  1935   0016BC  C0E7  F003         	movff	_Num2+2,___omul@multiplier+2
  1936   0016C0  C0E8  F004         	movff	_Num2+3,___omul@multiplier+3
  1937   0016C4  C0E9  F005         	movff	_Num2+4,___omul@multiplier+4
  1938   0016C8  C0EA  F006         	movff	_Num2+5,___omul@multiplier+5
  1939   0016CC  C0EB  F007         	movff	_Num2+6,___omul@multiplier+6
  1940   0016D0  C0EC  F008         	movff	_Num2+7,___omul@multiplier+7
  1941   0016D4  0E0A               	movlw	10
  1942   0016D6  6E09               	movwf	___omul@multiplicand^0,c
  1943   0016D8  0E00               	movlw	0
  1944   0016DA  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  1945   0016DC  0E00               	movlw	0
  1946   0016DE  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  1947   0016E0  0E00               	movlw	0
  1948   0016E2  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  1949   0016E4  0E00               	movlw	0
  1950   0016E6  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  1951   0016E8  0E00               	movlw	0
  1952   0016EA  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  1953   0016EC  0E00               	movlw	0
  1954   0016EE  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  1955   0016F0  0E00               	movlw	0
  1956   0016F2  6E10               	movwf	(___omul@multiplicand+7)^0,c
  1957   0016F4  EC82  F01A         	call	___omul	;wreg free
  1958   0016F8  C001  F071         	movff	?___omul,??_print_numbers
  1959   0016FC  C002  F072         	movff	?___omul+1,??_print_numbers+1
  1960   001700  C003  F073         	movff	?___omul+2,??_print_numbers+2
  1961   001704  C004  F074         	movff	?___omul+3,??_print_numbers+3
  1962   001708  C005  F075         	movff	?___omul+4,??_print_numbers+4
  1963   00170C  C006  F076         	movff	?___omul+5,??_print_numbers+5
  1964   001710  C007  F077         	movff	?___omul+6,??_print_numbers+6
  1965   001714  C008  F078         	movff	?___omul+7,??_print_numbers+7
  1966   001718  0E05               	movlw	5
  1967   00171A  2471               	addwf	??_print_numbers^0,w,c
  1968   00171C  0100               	movlb	0	; () banked
  1969   00171E  6FE5               	movwf	_Num2& (0+255),b
  1970   001720  0E00               	movlw	0
  1971   001722  2072               	addwfc	(??_print_numbers+1)^0,w,c
  1972   001724  6FE6               	movwf	(_Num2+1)& (0+255),b
  1973   001726  0E00               	movlw	0
  1974   001728  2073               	addwfc	(??_print_numbers+2)^0,w,c
  1975   00172A  6FE7               	movwf	(_Num2+2)& (0+255),b
  1976   00172C  0E00               	movlw	0
  1977   00172E  2074               	addwfc	(??_print_numbers+3)^0,w,c
  1978   001730  6FE8               	movwf	(_Num2+3)& (0+255),b
  1979   001732  0E00               	movlw	0
  1980   001734  2075               	addwfc	(??_print_numbers+4)^0,w,c
  1981   001736  6FE9               	movwf	(_Num2+4)& (0+255),b
  1982   001738  0E00               	movlw	0
  1983   00173A  2076               	addwfc	(??_print_numbers+5)^0,w,c
  1984   00173C  6FEA               	movwf	(_Num2+5)& (0+255),b
  1985   00173E  0E00               	movlw	0
  1986   001740  2077               	addwfc	(??_print_numbers+6)^0,w,c
  1987   001742  6FEB               	movwf	(_Num2+6)& (0+255),b
  1988   001744  0E00               	movlw	0
  1989   001746  2078               	addwfc	(??_print_numbers+7)^0,w,c
  1990   001748  6FEC               	movwf	(_Num2+7)& (0+255),b
  1991   00174A  EF80  F008         	goto	l5316
  1992   00174E                     l5378:
  1993                           
  1994                           ; BSR set to: 0
  1995                           ;app.c: 130:             if('1' == mode || '2' == mode)
  1996   00174E  0E31               	movlw	49
  1997   001750  19F7               	xorwf	_mode& (0+255),w,b
  1998   001752  B4D8               	btfsc	status,2,c
  1999   001754  EFAE  F00B         	goto	u4311
  2000   001758  EFB0  F00B         	goto	u4310
  2001   00175C                     u4311:
  2002   00175C  EFB9  F00B         	goto	l5382
  2003   001760                     u4310:
  2004   001760                     
  2005                           ; BSR set to: 0
  2006   001760  0E32               	movlw	50
  2007   001762  19F7               	xorwf	_mode& (0+255),w,b
  2008   001764  A4D8               	btfss	status,2,c
  2009   001766  EFB7  F00B         	goto	u4321
  2010   00176A  EFB9  F00B         	goto	u4320
  2011   00176E                     u4321:
  2012   00176E  EF89  F00F         	goto	l5486
  2013   001772                     u4320:
  2014   001772                     l5382:
  2015                           
  2016                           ; BSR set to: 0
  2017                           ;app.c: 131:             {;app.c: 132:                 if(!Operator)
  2018   001772  51E4               	movf	_Operator& (0+255),w,b
  2019   001774  A4D8               	btfss	status,2,c
  2020   001776  EFBF  F00B         	goto	u4331
  2021   00177A  EFC1  F00B         	goto	u4330
  2022   00177E                     u4331:
  2023   00177E  EF0E  F00C         	goto	l5388
  2024   001782                     u4330:
  2025   001782                     
  2026                           ; BSR set to: 0
  2027                           ;app.c: 133:                 {;app.c: 134:                     Num1 = 6 + (10*Num1);
  2028   001782  C0ED  F001         	movff	_Num1,___omul@multiplier
  2029   001786  C0EE  F002         	movff	_Num1+1,___omul@multiplier+1
  2030   00178A  C0EF  F003         	movff	_Num1+2,___omul@multiplier+2
  2031   00178E  C0F0  F004         	movff	_Num1+3,___omul@multiplier+3
  2032   001792  C0F1  F005         	movff	_Num1+4,___omul@multiplier+4
  2033   001796  C0F2  F006         	movff	_Num1+5,___omul@multiplier+5
  2034   00179A  C0F3  F007         	movff	_Num1+6,___omul@multiplier+6
  2035   00179E  C0F4  F008         	movff	_Num1+7,___omul@multiplier+7
  2036   0017A2  0E0A               	movlw	10
  2037   0017A4  6E09               	movwf	___omul@multiplicand^0,c
  2038   0017A6  0E00               	movlw	0
  2039   0017A8  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  2040   0017AA  0E00               	movlw	0
  2041   0017AC  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  2042   0017AE  0E00               	movlw	0
  2043   0017B0  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  2044   0017B2  0E00               	movlw	0
  2045   0017B4  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  2046   0017B6  0E00               	movlw	0
  2047   0017B8  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  2048   0017BA  0E00               	movlw	0
  2049   0017BC  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  2050   0017BE  0E00               	movlw	0
  2051   0017C0  6E10               	movwf	(___omul@multiplicand+7)^0,c
  2052   0017C2  EC82  F01A         	call	___omul	;wreg free
  2053   0017C6  C001  F071         	movff	?___omul,??_print_numbers
  2054   0017CA  C002  F072         	movff	?___omul+1,??_print_numbers+1
  2055   0017CE  C003  F073         	movff	?___omul+2,??_print_numbers+2
  2056   0017D2  C004  F074         	movff	?___omul+3,??_print_numbers+3
  2057   0017D6  C005  F075         	movff	?___omul+4,??_print_numbers+4
  2058   0017DA  C006  F076         	movff	?___omul+5,??_print_numbers+5
  2059   0017DE  C007  F077         	movff	?___omul+6,??_print_numbers+6
  2060   0017E2  C008  F078         	movff	?___omul+7,??_print_numbers+7
  2061   0017E6  0E06               	movlw	6
  2062   0017E8  2471               	addwf	??_print_numbers^0,w,c
  2063   0017EA  0100               	movlb	0	; () banked
  2064   0017EC  6FED               	movwf	_Num1& (0+255),b
  2065   0017EE  0E00               	movlw	0
  2066   0017F0  2072               	addwfc	(??_print_numbers+1)^0,w,c
  2067   0017F2  6FEE               	movwf	(_Num1+1)& (0+255),b
  2068   0017F4  0E00               	movlw	0
  2069   0017F6  2073               	addwfc	(??_print_numbers+2)^0,w,c
  2070   0017F8  6FEF               	movwf	(_Num1+2)& (0+255),b
  2071   0017FA  0E00               	movlw	0
  2072   0017FC  2074               	addwfc	(??_print_numbers+3)^0,w,c
  2073   0017FE  6FF0               	movwf	(_Num1+3)& (0+255),b
  2074   001800  0E00               	movlw	0
  2075   001802  2075               	addwfc	(??_print_numbers+4)^0,w,c
  2076   001804  6FF1               	movwf	(_Num1+4)& (0+255),b
  2077   001806  0E00               	movlw	0
  2078   001808  2076               	addwfc	(??_print_numbers+5)^0,w,c
  2079   00180A  6FF2               	movwf	(_Num1+5)& (0+255),b
  2080   00180C  0E00               	movlw	0
  2081   00180E  2077               	addwfc	(??_print_numbers+6)^0,w,c
  2082   001810  6FF3               	movwf	(_Num1+6)& (0+255),b
  2083   001812  0E00               	movlw	0
  2084   001814  2078               	addwfc	(??_print_numbers+7)^0,w,c
  2085   001816  6FF4               	movwf	(_Num1+7)& (0+255),b
  2086   001818  EF80  F008         	goto	l5316
  2087   00181C                     l5388:
  2088                           
  2089                           ; BSR set to: 0
  2090                           ;app.c: 138:                 {;app.c: 139:                     Num2 = 6 + (10*Num2);
  2091   00181C  C0E5  F001         	movff	_Num2,___omul@multiplier
  2092   001820  C0E6  F002         	movff	_Num2+1,___omul@multiplier+1
  2093   001824  C0E7  F003         	movff	_Num2+2,___omul@multiplier+2
  2094   001828  C0E8  F004         	movff	_Num2+3,___omul@multiplier+3
  2095   00182C  C0E9  F005         	movff	_Num2+4,___omul@multiplier+4
  2096   001830  C0EA  F006         	movff	_Num2+5,___omul@multiplier+5
  2097   001834  C0EB  F007         	movff	_Num2+6,___omul@multiplier+6
  2098   001838  C0EC  F008         	movff	_Num2+7,___omul@multiplier+7
  2099   00183C  0E0A               	movlw	10
  2100   00183E  6E09               	movwf	___omul@multiplicand^0,c
  2101   001840  0E00               	movlw	0
  2102   001842  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  2103   001844  0E00               	movlw	0
  2104   001846  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  2105   001848  0E00               	movlw	0
  2106   00184A  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  2107   00184C  0E00               	movlw	0
  2108   00184E  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  2109   001850  0E00               	movlw	0
  2110   001852  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  2111   001854  0E00               	movlw	0
  2112   001856  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  2113   001858  0E00               	movlw	0
  2114   00185A  6E10               	movwf	(___omul@multiplicand+7)^0,c
  2115   00185C  EC82  F01A         	call	___omul	;wreg free
  2116   001860  C001  F071         	movff	?___omul,??_print_numbers
  2117   001864  C002  F072         	movff	?___omul+1,??_print_numbers+1
  2118   001868  C003  F073         	movff	?___omul+2,??_print_numbers+2
  2119   00186C  C004  F074         	movff	?___omul+3,??_print_numbers+3
  2120   001870  C005  F075         	movff	?___omul+4,??_print_numbers+4
  2121   001874  C006  F076         	movff	?___omul+5,??_print_numbers+5
  2122   001878  C007  F077         	movff	?___omul+6,??_print_numbers+6
  2123   00187C  C008  F078         	movff	?___omul+7,??_print_numbers+7
  2124   001880  0E06               	movlw	6
  2125   001882  2471               	addwf	??_print_numbers^0,w,c
  2126   001884  0100               	movlb	0	; () banked
  2127   001886  6FE5               	movwf	_Num2& (0+255),b
  2128   001888  0E00               	movlw	0
  2129   00188A  2072               	addwfc	(??_print_numbers+1)^0,w,c
  2130   00188C  6FE6               	movwf	(_Num2+1)& (0+255),b
  2131   00188E  0E00               	movlw	0
  2132   001890  2073               	addwfc	(??_print_numbers+2)^0,w,c
  2133   001892  6FE7               	movwf	(_Num2+2)& (0+255),b
  2134   001894  0E00               	movlw	0
  2135   001896  2074               	addwfc	(??_print_numbers+3)^0,w,c
  2136   001898  6FE8               	movwf	(_Num2+3)& (0+255),b
  2137   00189A  0E00               	movlw	0
  2138   00189C  2075               	addwfc	(??_print_numbers+4)^0,w,c
  2139   00189E  6FE9               	movwf	(_Num2+4)& (0+255),b
  2140   0018A0  0E00               	movlw	0
  2141   0018A2  2076               	addwfc	(??_print_numbers+5)^0,w,c
  2142   0018A4  6FEA               	movwf	(_Num2+5)& (0+255),b
  2143   0018A6  0E00               	movlw	0
  2144   0018A8  2077               	addwfc	(??_print_numbers+6)^0,w,c
  2145   0018AA  6FEB               	movwf	(_Num2+6)& (0+255),b
  2146   0018AC  0E00               	movlw	0
  2147   0018AE  2078               	addwfc	(??_print_numbers+7)^0,w,c
  2148   0018B0  6FEC               	movwf	(_Num2+7)& (0+255),b
  2149   0018B2  EF80  F008         	goto	l5316
  2150   0018B6                     l5392:
  2151                           
  2152                           ; BSR set to: 0
  2153                           ;app.c: 146:             if('1' == mode || '2' == mode)
  2154   0018B6  0E31               	movlw	49
  2155   0018B8  19F7               	xorwf	_mode& (0+255),w,b
  2156   0018BA  B4D8               	btfsc	status,2,c
  2157   0018BC  EF62  F00C         	goto	u4341
  2158   0018C0  EF64  F00C         	goto	u4340
  2159   0018C4                     u4341:
  2160   0018C4  EF6D  F00C         	goto	l5396
  2161   0018C8                     u4340:
  2162   0018C8                     
  2163                           ; BSR set to: 0
  2164   0018C8  0E32               	movlw	50
  2165   0018CA  19F7               	xorwf	_mode& (0+255),w,b
  2166   0018CC  A4D8               	btfss	status,2,c
  2167   0018CE  EF6B  F00C         	goto	u4351
  2168   0018D2  EF6D  F00C         	goto	u4350
  2169   0018D6                     u4351:
  2170   0018D6  EF89  F00F         	goto	l5486
  2171   0018DA                     u4350:
  2172   0018DA                     l5396:
  2173                           
  2174                           ; BSR set to: 0
  2175                           ;app.c: 147:             {;app.c: 148:                 if(!Operator)
  2176   0018DA  51E4               	movf	_Operator& (0+255),w,b
  2177   0018DC  A4D8               	btfss	status,2,c
  2178   0018DE  EF73  F00C         	goto	u4361
  2179   0018E2  EF75  F00C         	goto	u4360
  2180   0018E6                     u4361:
  2181   0018E6  EFC2  F00C         	goto	l5402
  2182   0018EA                     u4360:
  2183   0018EA                     
  2184                           ; BSR set to: 0
  2185                           ;app.c: 149:                 {;app.c: 150:                     Num1 = 7 + (10*Num1);
  2186   0018EA  C0ED  F001         	movff	_Num1,___omul@multiplier
  2187   0018EE  C0EE  F002         	movff	_Num1+1,___omul@multiplier+1
  2188   0018F2  C0EF  F003         	movff	_Num1+2,___omul@multiplier+2
  2189   0018F6  C0F0  F004         	movff	_Num1+3,___omul@multiplier+3
  2190   0018FA  C0F1  F005         	movff	_Num1+4,___omul@multiplier+4
  2191   0018FE  C0F2  F006         	movff	_Num1+5,___omul@multiplier+5
  2192   001902  C0F3  F007         	movff	_Num1+6,___omul@multiplier+6
  2193   001906  C0F4  F008         	movff	_Num1+7,___omul@multiplier+7
  2194   00190A  0E0A               	movlw	10
  2195   00190C  6E09               	movwf	___omul@multiplicand^0,c
  2196   00190E  0E00               	movlw	0
  2197   001910  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  2198   001912  0E00               	movlw	0
  2199   001914  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  2200   001916  0E00               	movlw	0
  2201   001918  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  2202   00191A  0E00               	movlw	0
  2203   00191C  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  2204   00191E  0E00               	movlw	0
  2205   001920  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  2206   001922  0E00               	movlw	0
  2207   001924  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  2208   001926  0E00               	movlw	0
  2209   001928  6E10               	movwf	(___omul@multiplicand+7)^0,c
  2210   00192A  EC82  F01A         	call	___omul	;wreg free
  2211   00192E  C001  F071         	movff	?___omul,??_print_numbers
  2212   001932  C002  F072         	movff	?___omul+1,??_print_numbers+1
  2213   001936  C003  F073         	movff	?___omul+2,??_print_numbers+2
  2214   00193A  C004  F074         	movff	?___omul+3,??_print_numbers+3
  2215   00193E  C005  F075         	movff	?___omul+4,??_print_numbers+4
  2216   001942  C006  F076         	movff	?___omul+5,??_print_numbers+5
  2217   001946  C007  F077         	movff	?___omul+6,??_print_numbers+6
  2218   00194A  C008  F078         	movff	?___omul+7,??_print_numbers+7
  2219   00194E  0E07               	movlw	7
  2220   001950  2471               	addwf	??_print_numbers^0,w,c
  2221   001952  0100               	movlb	0	; () banked
  2222   001954  6FED               	movwf	_Num1& (0+255),b
  2223   001956  0E00               	movlw	0
  2224   001958  2072               	addwfc	(??_print_numbers+1)^0,w,c
  2225   00195A  6FEE               	movwf	(_Num1+1)& (0+255),b
  2226   00195C  0E00               	movlw	0
  2227   00195E  2073               	addwfc	(??_print_numbers+2)^0,w,c
  2228   001960  6FEF               	movwf	(_Num1+2)& (0+255),b
  2229   001962  0E00               	movlw	0
  2230   001964  2074               	addwfc	(??_print_numbers+3)^0,w,c
  2231   001966  6FF0               	movwf	(_Num1+3)& (0+255),b
  2232   001968  0E00               	movlw	0
  2233   00196A  2075               	addwfc	(??_print_numbers+4)^0,w,c
  2234   00196C  6FF1               	movwf	(_Num1+4)& (0+255),b
  2235   00196E  0E00               	movlw	0
  2236   001970  2076               	addwfc	(??_print_numbers+5)^0,w,c
  2237   001972  6FF2               	movwf	(_Num1+5)& (0+255),b
  2238   001974  0E00               	movlw	0
  2239   001976  2077               	addwfc	(??_print_numbers+6)^0,w,c
  2240   001978  6FF3               	movwf	(_Num1+6)& (0+255),b
  2241   00197A  0E00               	movlw	0
  2242   00197C  2078               	addwfc	(??_print_numbers+7)^0,w,c
  2243   00197E  6FF4               	movwf	(_Num1+7)& (0+255),b
  2244   001980  EF80  F008         	goto	l5316
  2245   001984                     l5402:
  2246                           
  2247                           ; BSR set to: 0
  2248                           ;app.c: 154:                 {;app.c: 155:                     Num2 = 7 + (10*Num2);
  2249   001984  C0E5  F001         	movff	_Num2,___omul@multiplier
  2250   001988  C0E6  F002         	movff	_Num2+1,___omul@multiplier+1
  2251   00198C  C0E7  F003         	movff	_Num2+2,___omul@multiplier+2
  2252   001990  C0E8  F004         	movff	_Num2+3,___omul@multiplier+3
  2253   001994  C0E9  F005         	movff	_Num2+4,___omul@multiplier+4
  2254   001998  C0EA  F006         	movff	_Num2+5,___omul@multiplier+5
  2255   00199C  C0EB  F007         	movff	_Num2+6,___omul@multiplier+6
  2256   0019A0  C0EC  F008         	movff	_Num2+7,___omul@multiplier+7
  2257   0019A4  0E0A               	movlw	10
  2258   0019A6  6E09               	movwf	___omul@multiplicand^0,c
  2259   0019A8  0E00               	movlw	0
  2260   0019AA  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  2261   0019AC  0E00               	movlw	0
  2262   0019AE  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  2263   0019B0  0E00               	movlw	0
  2264   0019B2  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  2265   0019B4  0E00               	movlw	0
  2266   0019B6  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  2267   0019B8  0E00               	movlw	0
  2268   0019BA  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  2269   0019BC  0E00               	movlw	0
  2270   0019BE  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  2271   0019C0  0E00               	movlw	0
  2272   0019C2  6E10               	movwf	(___omul@multiplicand+7)^0,c
  2273   0019C4  EC82  F01A         	call	___omul	;wreg free
  2274   0019C8  C001  F071         	movff	?___omul,??_print_numbers
  2275   0019CC  C002  F072         	movff	?___omul+1,??_print_numbers+1
  2276   0019D0  C003  F073         	movff	?___omul+2,??_print_numbers+2
  2277   0019D4  C004  F074         	movff	?___omul+3,??_print_numbers+3
  2278   0019D8  C005  F075         	movff	?___omul+4,??_print_numbers+4
  2279   0019DC  C006  F076         	movff	?___omul+5,??_print_numbers+5
  2280   0019E0  C007  F077         	movff	?___omul+6,??_print_numbers+6
  2281   0019E4  C008  F078         	movff	?___omul+7,??_print_numbers+7
  2282   0019E8  0E07               	movlw	7
  2283   0019EA  2471               	addwf	??_print_numbers^0,w,c
  2284   0019EC  0100               	movlb	0	; () banked
  2285   0019EE  6FE5               	movwf	_Num2& (0+255),b
  2286   0019F0  0E00               	movlw	0
  2287   0019F2  2072               	addwfc	(??_print_numbers+1)^0,w,c
  2288   0019F4  6FE6               	movwf	(_Num2+1)& (0+255),b
  2289   0019F6  0E00               	movlw	0
  2290   0019F8  2073               	addwfc	(??_print_numbers+2)^0,w,c
  2291   0019FA  6FE7               	movwf	(_Num2+2)& (0+255),b
  2292   0019FC  0E00               	movlw	0
  2293   0019FE  2074               	addwfc	(??_print_numbers+3)^0,w,c
  2294   001A00  6FE8               	movwf	(_Num2+3)& (0+255),b
  2295   001A02  0E00               	movlw	0
  2296   001A04  2075               	addwfc	(??_print_numbers+4)^0,w,c
  2297   001A06  6FE9               	movwf	(_Num2+4)& (0+255),b
  2298   001A08  0E00               	movlw	0
  2299   001A0A  2076               	addwfc	(??_print_numbers+5)^0,w,c
  2300   001A0C  6FEA               	movwf	(_Num2+5)& (0+255),b
  2301   001A0E  0E00               	movlw	0
  2302   001A10  2077               	addwfc	(??_print_numbers+6)^0,w,c
  2303   001A12  6FEB               	movwf	(_Num2+6)& (0+255),b
  2304   001A14  0E00               	movlw	0
  2305   001A16  2078               	addwfc	(??_print_numbers+7)^0,w,c
  2306   001A18  6FEC               	movwf	(_Num2+7)& (0+255),b
  2307   001A1A  EF80  F008         	goto	l5316
  2308   001A1E                     l5406:
  2309                           
  2310                           ; BSR set to: 0
  2311                           ;app.c: 162:             if('1' == mode)
  2312   001A1E  0E31               	movlw	49
  2313   001A20  19F7               	xorwf	_mode& (0+255),w,b
  2314   001A22  A4D8               	btfss	status,2,c
  2315   001A24  EF16  F00D         	goto	u4371
  2316   001A28  EF18  F00D         	goto	u4370
  2317   001A2C                     u4371:
  2318   001A2C  EF89  F00F         	goto	l5486
  2319   001A30                     u4370:
  2320   001A30                     
  2321                           ; BSR set to: 0
  2322                           ;app.c: 163:             {;app.c: 164:                 if(!Operator)
  2323   001A30  51E4               	movf	_Operator& (0+255),w,b
  2324   001A32  A4D8               	btfss	status,2,c
  2325   001A34  EF1E  F00D         	goto	u4381
  2326   001A38  EF20  F00D         	goto	u4380
  2327   001A3C                     u4381:
  2328   001A3C  EF6D  F00D         	goto	l5414
  2329   001A40                     u4380:
  2330   001A40                     
  2331                           ; BSR set to: 0
  2332                           ;app.c: 165:                 {;app.c: 166:                     Num1 = 8 + (10*Num1);
  2333   001A40  C0ED  F001         	movff	_Num1,___omul@multiplier
  2334   001A44  C0EE  F002         	movff	_Num1+1,___omul@multiplier+1
  2335   001A48  C0EF  F003         	movff	_Num1+2,___omul@multiplier+2
  2336   001A4C  C0F0  F004         	movff	_Num1+3,___omul@multiplier+3
  2337   001A50  C0F1  F005         	movff	_Num1+4,___omul@multiplier+4
  2338   001A54  C0F2  F006         	movff	_Num1+5,___omul@multiplier+5
  2339   001A58  C0F3  F007         	movff	_Num1+6,___omul@multiplier+6
  2340   001A5C  C0F4  F008         	movff	_Num1+7,___omul@multiplier+7
  2341   001A60  0E0A               	movlw	10
  2342   001A62  6E09               	movwf	___omul@multiplicand^0,c
  2343   001A64  0E00               	movlw	0
  2344   001A66  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  2345   001A68  0E00               	movlw	0
  2346   001A6A  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  2347   001A6C  0E00               	movlw	0
  2348   001A6E  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  2349   001A70  0E00               	movlw	0
  2350   001A72  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  2351   001A74  0E00               	movlw	0
  2352   001A76  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  2353   001A78  0E00               	movlw	0
  2354   001A7A  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  2355   001A7C  0E00               	movlw	0
  2356   001A7E  6E10               	movwf	(___omul@multiplicand+7)^0,c
  2357   001A80  EC82  F01A         	call	___omul	;wreg free
  2358   001A84  C001  F071         	movff	?___omul,??_print_numbers
  2359   001A88  C002  F072         	movff	?___omul+1,??_print_numbers+1
  2360   001A8C  C003  F073         	movff	?___omul+2,??_print_numbers+2
  2361   001A90  C004  F074         	movff	?___omul+3,??_print_numbers+3
  2362   001A94  C005  F075         	movff	?___omul+4,??_print_numbers+4
  2363   001A98  C006  F076         	movff	?___omul+5,??_print_numbers+5
  2364   001A9C  C007  F077         	movff	?___omul+6,??_print_numbers+6
  2365   001AA0  C008  F078         	movff	?___omul+7,??_print_numbers+7
  2366   001AA4  0E08               	movlw	8
  2367   001AA6  2471               	addwf	??_print_numbers^0,w,c
  2368   001AA8  0100               	movlb	0	; () banked
  2369   001AAA  6FED               	movwf	_Num1& (0+255),b
  2370   001AAC  0E00               	movlw	0
  2371   001AAE  2072               	addwfc	(??_print_numbers+1)^0,w,c
  2372   001AB0  6FEE               	movwf	(_Num1+1)& (0+255),b
  2373   001AB2  0E00               	movlw	0
  2374   001AB4  2073               	addwfc	(??_print_numbers+2)^0,w,c
  2375   001AB6  6FEF               	movwf	(_Num1+2)& (0+255),b
  2376   001AB8  0E00               	movlw	0
  2377   001ABA  2074               	addwfc	(??_print_numbers+3)^0,w,c
  2378   001ABC  6FF0               	movwf	(_Num1+3)& (0+255),b
  2379   001ABE  0E00               	movlw	0
  2380   001AC0  2075               	addwfc	(??_print_numbers+4)^0,w,c
  2381   001AC2  6FF1               	movwf	(_Num1+4)& (0+255),b
  2382   001AC4  0E00               	movlw	0
  2383   001AC6  2076               	addwfc	(??_print_numbers+5)^0,w,c
  2384   001AC8  6FF2               	movwf	(_Num1+5)& (0+255),b
  2385   001ACA  0E00               	movlw	0
  2386   001ACC  2077               	addwfc	(??_print_numbers+6)^0,w,c
  2387   001ACE  6FF3               	movwf	(_Num1+6)& (0+255),b
  2388   001AD0  0E00               	movlw	0
  2389   001AD2  2078               	addwfc	(??_print_numbers+7)^0,w,c
  2390   001AD4  6FF4               	movwf	(_Num1+7)& (0+255),b
  2391   001AD6  EF80  F008         	goto	l5316
  2392   001ADA                     l5414:
  2393                           
  2394                           ; BSR set to: 0
  2395                           ;app.c: 170:                 {;app.c: 171:                     Num2 = 8 + (10*Num2);
  2396   001ADA  C0E5  F001         	movff	_Num2,___omul@multiplier
  2397   001ADE  C0E6  F002         	movff	_Num2+1,___omul@multiplier+1
  2398   001AE2  C0E7  F003         	movff	_Num2+2,___omul@multiplier+2
  2399   001AE6  C0E8  F004         	movff	_Num2+3,___omul@multiplier+3
  2400   001AEA  C0E9  F005         	movff	_Num2+4,___omul@multiplier+4
  2401   001AEE  C0EA  F006         	movff	_Num2+5,___omul@multiplier+5
  2402   001AF2  C0EB  F007         	movff	_Num2+6,___omul@multiplier+6
  2403   001AF6  C0EC  F008         	movff	_Num2+7,___omul@multiplier+7
  2404   001AFA  0E0A               	movlw	10
  2405   001AFC  6E09               	movwf	___omul@multiplicand^0,c
  2406   001AFE  0E00               	movlw	0
  2407   001B00  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  2408   001B02  0E00               	movlw	0
  2409   001B04  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  2410   001B06  0E00               	movlw	0
  2411   001B08  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  2412   001B0A  0E00               	movlw	0
  2413   001B0C  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  2414   001B0E  0E00               	movlw	0
  2415   001B10  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  2416   001B12  0E00               	movlw	0
  2417   001B14  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  2418   001B16  0E00               	movlw	0
  2419   001B18  6E10               	movwf	(___omul@multiplicand+7)^0,c
  2420   001B1A  EC82  F01A         	call	___omul	;wreg free
  2421   001B1E  C001  F071         	movff	?___omul,??_print_numbers
  2422   001B22  C002  F072         	movff	?___omul+1,??_print_numbers+1
  2423   001B26  C003  F073         	movff	?___omul+2,??_print_numbers+2
  2424   001B2A  C004  F074         	movff	?___omul+3,??_print_numbers+3
  2425   001B2E  C005  F075         	movff	?___omul+4,??_print_numbers+4
  2426   001B32  C006  F076         	movff	?___omul+5,??_print_numbers+5
  2427   001B36  C007  F077         	movff	?___omul+6,??_print_numbers+6
  2428   001B3A  C008  F078         	movff	?___omul+7,??_print_numbers+7
  2429   001B3E  0E08               	movlw	8
  2430   001B40  2471               	addwf	??_print_numbers^0,w,c
  2431   001B42  0100               	movlb	0	; () banked
  2432   001B44  6FE5               	movwf	_Num2& (0+255),b
  2433   001B46  0E00               	movlw	0
  2434   001B48  2072               	addwfc	(??_print_numbers+1)^0,w,c
  2435   001B4A  6FE6               	movwf	(_Num2+1)& (0+255),b
  2436   001B4C  0E00               	movlw	0
  2437   001B4E  2073               	addwfc	(??_print_numbers+2)^0,w,c
  2438   001B50  6FE7               	movwf	(_Num2+2)& (0+255),b
  2439   001B52  0E00               	movlw	0
  2440   001B54  2074               	addwfc	(??_print_numbers+3)^0,w,c
  2441   001B56  6FE8               	movwf	(_Num2+3)& (0+255),b
  2442   001B58  0E00               	movlw	0
  2443   001B5A  2075               	addwfc	(??_print_numbers+4)^0,w,c
  2444   001B5C  6FE9               	movwf	(_Num2+4)& (0+255),b
  2445   001B5E  0E00               	movlw	0
  2446   001B60  2076               	addwfc	(??_print_numbers+5)^0,w,c
  2447   001B62  6FEA               	movwf	(_Num2+5)& (0+255),b
  2448   001B64  0E00               	movlw	0
  2449   001B66  2077               	addwfc	(??_print_numbers+6)^0,w,c
  2450   001B68  6FEB               	movwf	(_Num2+6)& (0+255),b
  2451   001B6A  0E00               	movlw	0
  2452   001B6C  2078               	addwfc	(??_print_numbers+7)^0,w,c
  2453   001B6E  6FEC               	movwf	(_Num2+7)& (0+255),b
  2454   001B70  EF80  F008         	goto	l5316
  2455   001B74                     l5418:
  2456                           
  2457                           ; BSR set to: 0
  2458                           ;app.c: 178:             if('1' == mode)
  2459   001B74  0E31               	movlw	49
  2460   001B76  19F7               	xorwf	_mode& (0+255),w,b
  2461   001B78  A4D8               	btfss	status,2,c
  2462   001B7A  EFC1  F00D         	goto	u4391
  2463   001B7E  EFC3  F00D         	goto	u4390
  2464   001B82                     u4391:
  2465   001B82  EF89  F00F         	goto	l5486
  2466   001B86                     u4390:
  2467   001B86                     
  2468                           ; BSR set to: 0
  2469                           ;app.c: 179:             {;app.c: 180:                 if(!Operator)
  2470   001B86  51E4               	movf	_Operator& (0+255),w,b
  2471   001B88  A4D8               	btfss	status,2,c
  2472   001B8A  EFC9  F00D         	goto	u4401
  2473   001B8E  EFCB  F00D         	goto	u4400
  2474   001B92                     u4401:
  2475   001B92  EF18  F00E         	goto	l5426
  2476   001B96                     u4400:
  2477   001B96                     
  2478                           ; BSR set to: 0
  2479                           ;app.c: 181:                 {;app.c: 182:                     Num1 = 9 + (10*Num1);
  2480   001B96  C0ED  F001         	movff	_Num1,___omul@multiplier
  2481   001B9A  C0EE  F002         	movff	_Num1+1,___omul@multiplier+1
  2482   001B9E  C0EF  F003         	movff	_Num1+2,___omul@multiplier+2
  2483   001BA2  C0F0  F004         	movff	_Num1+3,___omul@multiplier+3
  2484   001BA6  C0F1  F005         	movff	_Num1+4,___omul@multiplier+4
  2485   001BAA  C0F2  F006         	movff	_Num1+5,___omul@multiplier+5
  2486   001BAE  C0F3  F007         	movff	_Num1+6,___omul@multiplier+6
  2487   001BB2  C0F4  F008         	movff	_Num1+7,___omul@multiplier+7
  2488   001BB6  0E0A               	movlw	10
  2489   001BB8  6E09               	movwf	___omul@multiplicand^0,c
  2490   001BBA  0E00               	movlw	0
  2491   001BBC  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  2492   001BBE  0E00               	movlw	0
  2493   001BC0  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  2494   001BC2  0E00               	movlw	0
  2495   001BC4  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  2496   001BC6  0E00               	movlw	0
  2497   001BC8  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  2498   001BCA  0E00               	movlw	0
  2499   001BCC  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  2500   001BCE  0E00               	movlw	0
  2501   001BD0  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  2502   001BD2  0E00               	movlw	0
  2503   001BD4  6E10               	movwf	(___omul@multiplicand+7)^0,c
  2504   001BD6  EC82  F01A         	call	___omul	;wreg free
  2505   001BDA  C001  F071         	movff	?___omul,??_print_numbers
  2506   001BDE  C002  F072         	movff	?___omul+1,??_print_numbers+1
  2507   001BE2  C003  F073         	movff	?___omul+2,??_print_numbers+2
  2508   001BE6  C004  F074         	movff	?___omul+3,??_print_numbers+3
  2509   001BEA  C005  F075         	movff	?___omul+4,??_print_numbers+4
  2510   001BEE  C006  F076         	movff	?___omul+5,??_print_numbers+5
  2511   001BF2  C007  F077         	movff	?___omul+6,??_print_numbers+6
  2512   001BF6  C008  F078         	movff	?___omul+7,??_print_numbers+7
  2513   001BFA  0E09               	movlw	9
  2514   001BFC  2471               	addwf	??_print_numbers^0,w,c
  2515   001BFE  0100               	movlb	0	; () banked
  2516   001C00  6FED               	movwf	_Num1& (0+255),b
  2517   001C02  0E00               	movlw	0
  2518   001C04  2072               	addwfc	(??_print_numbers+1)^0,w,c
  2519   001C06  6FEE               	movwf	(_Num1+1)& (0+255),b
  2520   001C08  0E00               	movlw	0
  2521   001C0A  2073               	addwfc	(??_print_numbers+2)^0,w,c
  2522   001C0C  6FEF               	movwf	(_Num1+2)& (0+255),b
  2523   001C0E  0E00               	movlw	0
  2524   001C10  2074               	addwfc	(??_print_numbers+3)^0,w,c
  2525   001C12  6FF0               	movwf	(_Num1+3)& (0+255),b
  2526   001C14  0E00               	movlw	0
  2527   001C16  2075               	addwfc	(??_print_numbers+4)^0,w,c
  2528   001C18  6FF1               	movwf	(_Num1+4)& (0+255),b
  2529   001C1A  0E00               	movlw	0
  2530   001C1C  2076               	addwfc	(??_print_numbers+5)^0,w,c
  2531   001C1E  6FF2               	movwf	(_Num1+5)& (0+255),b
  2532   001C20  0E00               	movlw	0
  2533   001C22  2077               	addwfc	(??_print_numbers+6)^0,w,c
  2534   001C24  6FF3               	movwf	(_Num1+6)& (0+255),b
  2535   001C26  0E00               	movlw	0
  2536   001C28  2078               	addwfc	(??_print_numbers+7)^0,w,c
  2537   001C2A  6FF4               	movwf	(_Num1+7)& (0+255),b
  2538   001C2C  EF80  F008         	goto	l5316
  2539   001C30                     l5426:
  2540                           
  2541                           ; BSR set to: 0
  2542                           ;app.c: 186:                 {;app.c: 187:                     Num2 = 9 + (10*Num2);
  2543   001C30  C0E5  F001         	movff	_Num2,___omul@multiplier
  2544   001C34  C0E6  F002         	movff	_Num2+1,___omul@multiplier+1
  2545   001C38  C0E7  F003         	movff	_Num2+2,___omul@multiplier+2
  2546   001C3C  C0E8  F004         	movff	_Num2+3,___omul@multiplier+3
  2547   001C40  C0E9  F005         	movff	_Num2+4,___omul@multiplier+4
  2548   001C44  C0EA  F006         	movff	_Num2+5,___omul@multiplier+5
  2549   001C48  C0EB  F007         	movff	_Num2+6,___omul@multiplier+6
  2550   001C4C  C0EC  F008         	movff	_Num2+7,___omul@multiplier+7
  2551   001C50  0E0A               	movlw	10
  2552   001C52  6E09               	movwf	___omul@multiplicand^0,c
  2553   001C54  0E00               	movlw	0
  2554   001C56  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  2555   001C58  0E00               	movlw	0
  2556   001C5A  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  2557   001C5C  0E00               	movlw	0
  2558   001C5E  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  2559   001C60  0E00               	movlw	0
  2560   001C62  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  2561   001C64  0E00               	movlw	0
  2562   001C66  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  2563   001C68  0E00               	movlw	0
  2564   001C6A  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  2565   001C6C  0E00               	movlw	0
  2566   001C6E  6E10               	movwf	(___omul@multiplicand+7)^0,c
  2567   001C70  EC82  F01A         	call	___omul	;wreg free
  2568   001C74  C001  F071         	movff	?___omul,??_print_numbers
  2569   001C78  C002  F072         	movff	?___omul+1,??_print_numbers+1
  2570   001C7C  C003  F073         	movff	?___omul+2,??_print_numbers+2
  2571   001C80  C004  F074         	movff	?___omul+3,??_print_numbers+3
  2572   001C84  C005  F075         	movff	?___omul+4,??_print_numbers+4
  2573   001C88  C006  F076         	movff	?___omul+5,??_print_numbers+5
  2574   001C8C  C007  F077         	movff	?___omul+6,??_print_numbers+6
  2575   001C90  C008  F078         	movff	?___omul+7,??_print_numbers+7
  2576   001C94  0E09               	movlw	9
  2577   001C96  2471               	addwf	??_print_numbers^0,w,c
  2578   001C98  0100               	movlb	0	; () banked
  2579   001C9A  6FE5               	movwf	_Num2& (0+255),b
  2580   001C9C  0E00               	movlw	0
  2581   001C9E  2072               	addwfc	(??_print_numbers+1)^0,w,c
  2582   001CA0  6FE6               	movwf	(_Num2+1)& (0+255),b
  2583   001CA2  0E00               	movlw	0
  2584   001CA4  2073               	addwfc	(??_print_numbers+2)^0,w,c
  2585   001CA6  6FE7               	movwf	(_Num2+2)& (0+255),b
  2586   001CA8  0E00               	movlw	0
  2587   001CAA  2074               	addwfc	(??_print_numbers+3)^0,w,c
  2588   001CAC  6FE8               	movwf	(_Num2+3)& (0+255),b
  2589   001CAE  0E00               	movlw	0
  2590   001CB0  2075               	addwfc	(??_print_numbers+4)^0,w,c
  2591   001CB2  6FE9               	movwf	(_Num2+4)& (0+255),b
  2592   001CB4  0E00               	movlw	0
  2593   001CB6  2076               	addwfc	(??_print_numbers+5)^0,w,c
  2594   001CB8  6FEA               	movwf	(_Num2+5)& (0+255),b
  2595   001CBA  0E00               	movlw	0
  2596   001CBC  2077               	addwfc	(??_print_numbers+6)^0,w,c
  2597   001CBE  6FEB               	movwf	(_Num2+6)& (0+255),b
  2598   001CC0  0E00               	movlw	0
  2599   001CC2  2078               	addwfc	(??_print_numbers+7)^0,w,c
  2600   001CC4  6FEC               	movwf	(_Num2+7)& (0+255),b
  2601   001CC6  EF80  F008         	goto	l5316
  2602   001CCA                     l5430:
  2603                           
  2604                           ; BSR set to: 0
  2605                           ;app.c: 194:             if(!Operator)
  2606   001CCA  51E4               	movf	_Operator& (0+255),w,b
  2607   001CCC  A4D8               	btfss	status,2,c
  2608   001CCE  EF6B  F00E         	goto	u4411
  2609   001CD2  EF6D  F00E         	goto	u4410
  2610   001CD6                     u4411:
  2611   001CD6  EFA1  F00E         	goto	l5436
  2612   001CDA                     u4410:
  2613   001CDA                     
  2614                           ; BSR set to: 0
  2615                           ;app.c: 195:             {;app.c: 196:                 Num1 = 10*Num1;
  2616   001CDA  C0ED  F001         	movff	_Num1,___omul@multiplier
  2617   001CDE  C0EE  F002         	movff	_Num1+1,___omul@multiplier+1
  2618   001CE2  C0EF  F003         	movff	_Num1+2,___omul@multiplier+2
  2619   001CE6  C0F0  F004         	movff	_Num1+3,___omul@multiplier+3
  2620   001CEA  C0F1  F005         	movff	_Num1+4,___omul@multiplier+4
  2621   001CEE  C0F2  F006         	movff	_Num1+5,___omul@multiplier+5
  2622   001CF2  C0F3  F007         	movff	_Num1+6,___omul@multiplier+6
  2623   001CF6  C0F4  F008         	movff	_Num1+7,___omul@multiplier+7
  2624   001CFA  0E0A               	movlw	10
  2625   001CFC  6E09               	movwf	___omul@multiplicand^0,c
  2626   001CFE  0E00               	movlw	0
  2627   001D00  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  2628   001D02  0E00               	movlw	0
  2629   001D04  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  2630   001D06  0E00               	movlw	0
  2631   001D08  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  2632   001D0A  0E00               	movlw	0
  2633   001D0C  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  2634   001D0E  0E00               	movlw	0
  2635   001D10  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  2636   001D12  0E00               	movlw	0
  2637   001D14  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  2638   001D16  0E00               	movlw	0
  2639   001D18  6E10               	movwf	(___omul@multiplicand+7)^0,c
  2640   001D1A  EC82  F01A         	call	___omul	;wreg free
  2641   001D1E  C001  F0ED         	movff	?___omul,_Num1
  2642   001D22  C002  F0EE         	movff	?___omul+1,_Num1+1
  2643   001D26  C003  F0EF         	movff	?___omul+2,_Num1+2
  2644   001D2A  C004  F0F0         	movff	?___omul+3,_Num1+3
  2645   001D2E  C005  F0F1         	movff	?___omul+4,_Num1+4
  2646   001D32  C006  F0F2         	movff	?___omul+5,_Num1+5
  2647   001D36  C007  F0F3         	movff	?___omul+6,_Num1+6
  2648   001D3A  C008  F0F4         	movff	?___omul+7,_Num1+7
  2649   001D3E  EF80  F008         	goto	l5316
  2650   001D42                     l5436:
  2651                           
  2652                           ; BSR set to: 0
  2653                           ;app.c: 200:             {;app.c: 201:                 Num2 = 10*Num2;
  2654   001D42  C0E5  F001         	movff	_Num2,___omul@multiplier
  2655   001D46  C0E6  F002         	movff	_Num2+1,___omul@multiplier+1
  2656   001D4A  C0E7  F003         	movff	_Num2+2,___omul@multiplier+2
  2657   001D4E  C0E8  F004         	movff	_Num2+3,___omul@multiplier+3
  2658   001D52  C0E9  F005         	movff	_Num2+4,___omul@multiplier+4
  2659   001D56  C0EA  F006         	movff	_Num2+5,___omul@multiplier+5
  2660   001D5A  C0EB  F007         	movff	_Num2+6,___omul@multiplier+6
  2661   001D5E  C0EC  F008         	movff	_Num2+7,___omul@multiplier+7
  2662   001D62  0E0A               	movlw	10
  2663   001D64  6E09               	movwf	___omul@multiplicand^0,c
  2664   001D66  0E00               	movlw	0
  2665   001D68  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  2666   001D6A  0E00               	movlw	0
  2667   001D6C  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  2668   001D6E  0E00               	movlw	0
  2669   001D70  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  2670   001D72  0E00               	movlw	0
  2671   001D74  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  2672   001D76  0E00               	movlw	0
  2673   001D78  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  2674   001D7A  0E00               	movlw	0
  2675   001D7C  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  2676   001D7E  0E00               	movlw	0
  2677   001D80  6E10               	movwf	(___omul@multiplicand+7)^0,c
  2678   001D82  EC82  F01A         	call	___omul	;wreg free
  2679   001D86  C001  F0E5         	movff	?___omul,_Num2
  2680   001D8A  C002  F0E6         	movff	?___omul+1,_Num2+1
  2681   001D8E  C003  F0E7         	movff	?___omul+2,_Num2+2
  2682   001D92  C004  F0E8         	movff	?___omul+3,_Num2+3
  2683   001D96  C005  F0E9         	movff	?___omul+4,_Num2+4
  2684   001D9A  C006  F0EA         	movff	?___omul+5,_Num2+5
  2685   001D9E  C007  F0EB         	movff	?___omul+6,_Num2+6
  2686   001DA2  C008  F0EC         	movff	?___omul+7,_Num2+7
  2687   001DA6  EF80  F008         	goto	l5316
  2688   001DAA                     l5440:
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;app.c: 206:             if(!Operator)
  2692   001DAA  51E4               	movf	_Operator& (0+255),w,b
  2693   001DAC  A4D8               	btfss	status,2,c
  2694   001DAE  EFDB  F00E         	goto	u4421
  2695   001DB2  EFDD  F00E         	goto	u4420
  2696   001DB6                     u4421:
  2697   001DB6  EF89  F00F         	goto	l5486
  2698   001DBA                     u4420:
  2699   001DBA                     
  2700                           ; BSR set to: 0
  2701                           ;app.c: 207:             {;app.c: 208:                 Operator = '/';
  2702   001DBA  0E2F               	movlw	47
  2703   001DBC  6FE4               	movwf	_Operator& (0+255),b
  2704   001DBE  EF80  F008         	goto	l5316
  2705   001DC2                     l5446:
  2706                           
  2707                           ; BSR set to: 0
  2708                           ;app.c: 217:             if(!Operator)
  2709   001DC2  51E4               	movf	_Operator& (0+255),w,b
  2710   001DC4  A4D8               	btfss	status,2,c
  2711   001DC6  EFE7  F00E         	goto	u4431
  2712   001DCA  EFE9  F00E         	goto	u4430
  2713   001DCE                     u4431:
  2714   001DCE  EF89  F00F         	goto	l5486
  2715   001DD2                     u4430:
  2716   001DD2                     
  2717                           ; BSR set to: 0
  2718                           ;app.c: 218:             {;app.c: 219:                 Operator = '*';
  2719   001DD2  0E2A               	movlw	42
  2720   001DD4  6FE4               	movwf	_Operator& (0+255),b
  2721   001DD6  EF80  F008         	goto	l5316
  2722   001DDA                     l5452:
  2723                           
  2724                           ; BSR set to: 0
  2725                           ;app.c: 228:             if(!Operator)
  2726   001DDA  51E4               	movf	_Operator& (0+255),w,b
  2727   001DDC  A4D8               	btfss	status,2,c
  2728   001DDE  EFF3  F00E         	goto	u4441
  2729   001DE2  EFF5  F00E         	goto	u4440
  2730   001DE6                     u4441:
  2731   001DE6  EF89  F00F         	goto	l5486
  2732   001DEA                     u4440:
  2733   001DEA                     
  2734                           ; BSR set to: 0
  2735                           ;app.c: 229:             {;app.c: 230:                 Operator = '-';
  2736   001DEA  0E2D               	movlw	45
  2737   001DEC  6FE4               	movwf	_Operator& (0+255),b
  2738   001DEE  EF80  F008         	goto	l5316
  2739   001DF2                     l5458:
  2740                           
  2741                           ; BSR set to: 0
  2742                           ;app.c: 239:             if(!Operator)
  2743   001DF2  51E4               	movf	_Operator& (0+255),w,b
  2744   001DF4  A4D8               	btfss	status,2,c
  2745   001DF6  EFFF  F00E         	goto	u4451
  2746   001DFA  EF01  F00F         	goto	u4450
  2747   001DFE                     u4451:
  2748   001DFE  EF89  F00F         	goto	l5486
  2749   001E02                     u4450:
  2750   001E02                     
  2751                           ; BSR set to: 0
  2752                           ;app.c: 240:             {;app.c: 241:                 Operator = '+';
  2753   001E02  0E2B               	movlw	43
  2754   001E04  6FE4               	movwf	_Operator& (0+255),b
  2755   001E06  EF80  F008         	goto	l5316
  2756   001E0A                     l5464:
  2757                           
  2758                           ; BSR set to: 0
  2759                           ;app.c: 250:             ret = lcd_4bit_send_command(&lcd, 0x01);
  2760   001E0A  0EFA               	movlw	low _lcd
  2761   001E0C  6E12               	movwf	lcd_4bit_send_command@LCD^0,c
  2762   001E0E  0E01               	movlw	1
  2763   001E10  6E13               	movwf	lcd_4bit_send_command@command^0,c
  2764   001E12  ECAF  F01D         	call	_lcd_4bit_send_command	;wreg free
  2765   001E16  0101               	movlb	1	; () banked
  2766   001E18  6F5F               	movwf	_ret& (0+255),b
  2767   001E1A                     
  2768                           ; BSR set to: 1
  2769                           ;app.c: 251:             Num1 = 0; Num2 = 0; Operator = 0;
  2770   001E1A  EE20  F0ED         	lfsr	2,_Num1
  2771   001E1E  0E07               	movlw	7
  2772   001E20                     u4461:
  2773   001E20  6ADE               	clrf	postinc2,c
  2774   001E22  06E8               	decf	wreg,f,c
  2775   001E24  E2FD               	bc	u4461
  2776   001E26                     
  2777                           ; BSR set to: 1
  2778   001E26  EE20  F0E5         	lfsr	2,_Num2
  2779   001E2A  0E07               	movlw	7
  2780   001E2C                     u4471:
  2781   001E2C  6ADE               	clrf	postinc2,c
  2782   001E2E  06E8               	decf	wreg,f,c
  2783   001E30  E2FD               	bc	u4471
  2784   001E32                     
  2785                           ; BSR set to: 1
  2786   001E32  0E00               	movlw	0
  2787   001E34  0100               	movlb	0	; () banked
  2788   001E36  6FE4               	movwf	_Operator& (0+255),b
  2789                           
  2790                           ;app.c: 252:             break;
  2791   001E38  EF89  F00F         	goto	l5486
  2792   001E3C                     l5472:
  2793                           
  2794                           ; BSR set to: 0
  2795                           ;app.c: 254:             ret = lcd_4bit_print_char(&lcd, key);
  2796   001E3C  0EFA               	movlw	low _lcd
  2797   001E3E  6E12               	movwf	lcd_4bit_print_char@LCD^0,c
  2798   001E40  C0F5  F013         	movff	_key,lcd_4bit_print_char@data
  2799   001E44  EC80  F01D         	call	_lcd_4bit_print_char	;wreg free
  2800   001E48  0101               	movlb	1	; () banked
  2801   001E4A  6F5F               	movwf	_ret& (0+255),b
  2802   001E4C                     
  2803                           ; BSR set to: 1
  2804                           ;app.c: 255:             if('1' == mode)
  2805   001E4C  0E31               	movlw	49
  2806   001E4E  0100               	movlb	0	; () banked
  2807   001E50  19F7               	xorwf	_mode& (0+255),w,b
  2808   001E52  A4D8               	btfss	status,2,c
  2809   001E54  EF2E  F00F         	goto	u4481
  2810   001E58  EF30  F00F         	goto	u4480
  2811   001E5C                     u4481:
  2812   001E5C  EF34  F00F         	goto	l5478
  2813   001E60                     u4480:
  2814   001E60                     
  2815                           ; BSR set to: 0
  2816                           ;app.c: 256:             {;app.c: 257:                 calculate_results_decimal();
  2817   001E60  EC47  F015         	call	_calculate_results_decimal	;wreg free
  2818                           
  2819                           ;app.c: 258:             }
  2820   001E64  EF36  F00F         	goto	l5480
  2821   001E68                     l5478:
  2822                           
  2823                           ; BSR set to: 0
  2824                           ;app.c: 260:             {;app.c: 261:                 calculate_results_binary_octal();
  2825   001E68  EC8D  F00F         	call	_calculate_results_binary_octal	;wreg free
  2826   001E6C                     l5480:
  2827                           
  2828                           ;app.c: 263:             Operator = '=';
  2829   001E6C  0E3D               	movlw	61
  2830   001E6E  0100               	movlb	0	; () banked
  2831   001E70  6FE4               	movwf	_Operator& (0+255),b
  2832                           
  2833                           ;app.c: 264:             break;
  2834   001E72  EF89  F00F         	goto	l5486
  2835   001E76                     l5484:
  2836   001E76  0100               	movlb	0	; () banked
  2837   001E78  51F5               	movf	_key& (0+255),w,b
  2838   001E7A  6E71               	movwf	??_print_numbers^0,c
  2839   001E7C  6A72               	clrf	(??_print_numbers+1)^0,c
  2840                           
  2841                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2842                           ; Switch size 1, requested type "simple"
  2843                           ; Number of cases is 1, Range of values is 0 to 0
  2844                           ; switch strategies available:
  2845                           ; Name         Instructions Cycles
  2846                           ; simple_byte            4     3 (average)
  2847                           ;	Chosen strategy is simple_byte
  2848   001E7E  5072               	movf	(??_print_numbers+1)^0,w,c
  2849   001E80  0A00               	xorlw	0	; case 0
  2850   001E82  B4D8               	btfsc	status,2,c
  2851   001E84  EF46  F00F         	goto	l6068
  2852   001E88  EF89  F00F         	goto	l5486
  2853   001E8C                     l6068:
  2854                           
  2855                           ; BSR set to: 0
  2856                           ; Switch size 1, requested type "simple"
  2857                           ; Number of cases is 16, Range of values is 42 to 65
  2858                           ; switch strategies available:
  2859                           ; Name         Instructions Cycles
  2860                           ; simple_byte           49    25 (average)
  2861                           ;	Chosen strategy is simple_byte
  2862   001E8C  5071               	movf	??_print_numbers^0,w,c
  2863   001E8E  0A2A               	xorlw	42	; case 42
  2864   001E90  B4D8               	btfsc	status,2,c
  2865   001E92  EFE1  F00E         	goto	l5446
  2866   001E96  0A01               	xorlw	1	; case 43
  2867   001E98  B4D8               	btfsc	status,2,c
  2868   001E9A  EFF9  F00E         	goto	l5458
  2869   001E9E  0A06               	xorlw	6	; case 45
  2870   001EA0  B4D8               	btfsc	status,2,c
  2871   001EA2  EFED  F00E         	goto	l5452
  2872   001EA6  0A02               	xorlw	2	; case 47
  2873   001EA8  B4D8               	btfsc	status,2,c
  2874   001EAA  EFD5  F00E         	goto	l5440
  2875   001EAE  0A1F               	xorlw	31	; case 48
  2876   001EB0  B4D8               	btfsc	status,2,c
  2877   001EB2  EF65  F00E         	goto	l5430
  2878   001EB6  0A01               	xorlw	1	; case 49
  2879   001EB8  B4D8               	btfsc	status,2,c
  2880   001EBA  EF2D  F008         	goto	l5312
  2881   001EBE  0A03               	xorlw	3	; case 50
  2882   001EC0  B4D8               	btfsc	status,2,c
  2883   001EC2  EFD7  F008         	goto	l5322
  2884   001EC6  0A01               	xorlw	1	; case 51
  2885   001EC8  B4D8               	btfsc	status,2,c
  2886   001ECA  EF8B  F009         	goto	l5336
  2887   001ECE  0A07               	xorlw	7	; case 52
  2888   001ED0  B4D8               	btfsc	status,2,c
  2889   001ED2  EF3F  F00A         	goto	l5350
  2890   001ED6  0A01               	xorlw	1	; case 53
  2891   001ED8  B4D8               	btfsc	status,2,c
  2892   001EDA  EFF3  F00A         	goto	l5364
  2893   001EDE  0A03               	xorlw	3	; case 54
  2894   001EE0  B4D8               	btfsc	status,2,c
  2895   001EE2  EFA7  F00B         	goto	l5378
  2896   001EE6  0A01               	xorlw	1	; case 55
  2897   001EE8  B4D8               	btfsc	status,2,c
  2898   001EEA  EF5B  F00C         	goto	l5392
  2899   001EEE  0A0F               	xorlw	15	; case 56
  2900   001EF0  B4D8               	btfsc	status,2,c
  2901   001EF2  EF0F  F00D         	goto	l5406
  2902   001EF6  0A01               	xorlw	1	; case 57
  2903   001EF8  B4D8               	btfsc	status,2,c
  2904   001EFA  EFBA  F00D         	goto	l5418
  2905   001EFE  0A04               	xorlw	4	; case 61
  2906   001F00  B4D8               	btfsc	status,2,c
  2907   001F02  EF1E  F00F         	goto	l5472
  2908   001F06  0A7C               	xorlw	124	; case 65
  2909   001F08  B4D8               	btfsc	status,2,c
  2910   001F0A  EF05  F00F         	goto	l5464
  2911   001F0E  EF89  F00F         	goto	l5486
  2912   001F12                     l5486:
  2913                           
  2914                           ;app.c: 266:     key = 0;
  2915   001F12  0E00               	movlw	0
  2916   001F14  0100               	movlb	0	; () banked
  2917   001F16  6FF5               	movwf	_key& (0+255),b
  2918   001F18                     
  2919                           ; BSR set to: 0
  2920   001F18  0012               	return		;funcret
  2921   001F1A                     __end_of_print_numbers:
  2922                           	callstack 0
  2923                           
  2924 ;; *************** function _calculate_results_decimal *****************
  2925 ;; Defined at:
  2926 ;;		line 270 in file "app.c"
  2927 ;; Parameters:    Size  Location     Type
  2928 ;;		None
  2929 ;; Auto vars:     Size  Location     Type
  2930 ;;		None
  2931 ;; Return value:  Size  Location     Type
  2932 ;;                  1    wreg      void 
  2933 ;; Registers used:
  2934 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2935 ;; Tracked objects:
  2936 ;;		On entry : 0/0
  2937 ;;		On exit  : 0/0
  2938 ;;		Unchanged: 0/0
  2939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2942 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2943 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2944 ;;Total ram usage:        2 bytes
  2945 ;; Hardware stack levels used: 1
  2946 ;; Hardware stack levels required when called: 9
  2947 ;; This function calls:
  2948 ;;		___lodiv
  2949 ;;		___omul
  2950 ;;		_lcd_4bit_print_int
  2951 ;;		_lcd_4bit_set_cursor
  2952 ;; This function is called by:
  2953 ;;		_print_numbers
  2954 ;; This function uses a non-reentrant model
  2955 ;;
  2956                           
  2957                           	psect	text2
  2958   002A8E                     __ptext2:
  2959                           	callstack 0
  2960   002A8E                     _calculate_results_decimal:
  2961                           	callstack 20
  2962   002A8E                     
  2963                           ;app.c: 271:     switch(Operator){
  2964   002A8E  EF05  F016         	goto	l5012
  2965   002A92                     l4986:
  2966                           
  2967                           ; BSR set to: 0
  2968                           ;app.c: 273:             Num = Num1 + Num2;
  2969   002A92  51E5               	movf	_Num2& (0+255),w,b
  2970   002A94  25ED               	addwf	_Num1& (0+255),w,b
  2971   002A96  6FD3               	movwf	_Num& (0+255),b
  2972   002A98  51E6               	movf	(_Num2+1)& (0+255),w,b
  2973   002A9A  21EE               	addwfc	(_Num1+1)& (0+255),w,b
  2974   002A9C  6FD4               	movwf	(_Num+1)& (0+255),b
  2975   002A9E  51E7               	movf	(_Num2+2)& (0+255),w,b
  2976   002AA0  21EF               	addwfc	(_Num1+2)& (0+255),w,b
  2977   002AA2  6FD5               	movwf	(_Num+2)& (0+255),b
  2978   002AA4  51E8               	movf	(_Num2+3)& (0+255),w,b
  2979   002AA6  21F0               	addwfc	(_Num1+3)& (0+255),w,b
  2980   002AA8  6FD6               	movwf	(_Num+3)& (0+255),b
  2981   002AAA  51E9               	movf	(_Num2+4)& (0+255),w,b
  2982   002AAC  21F1               	addwfc	(_Num1+4)& (0+255),w,b
  2983   002AAE  6FD7               	movwf	(_Num+4)& (0+255),b
  2984   002AB0  51EA               	movf	(_Num2+5)& (0+255),w,b
  2985   002AB2  21F2               	addwfc	(_Num1+5)& (0+255),w,b
  2986   002AB4  6FD8               	movwf	(_Num+5)& (0+255),b
  2987   002AB6  51EB               	movf	(_Num2+6)& (0+255),w,b
  2988   002AB8  21F3               	addwfc	(_Num1+6)& (0+255),w,b
  2989   002ABA  6FD9               	movwf	(_Num+6)& (0+255),b
  2990   002ABC  51EC               	movf	(_Num2+7)& (0+255),w,b
  2991   002ABE  21F4               	addwfc	(_Num1+7)& (0+255),w,b
  2992   002AC0  6FDA               	movwf	(_Num+7)& (0+255),b
  2993   002AC2                     l4988:
  2994                           
  2995                           ;app.c: 274:             ret = lcd_4bit_set_cursor(&lcd, 1, 2);
  2996   002AC2  0EFA               	movlw	low _lcd
  2997   002AC4  6E16               	movwf	lcd_4bit_set_cursor@LCD^0,c
  2998   002AC6  0E01               	movlw	1
  2999   002AC8  6E17               	movwf	lcd_4bit_set_cursor@Cols^0,c
  3000   002ACA  0E02               	movlw	2
  3001   002ACC  6E18               	movwf	lcd_4bit_set_cursor@Rows^0,c
  3002   002ACE  EC74  F01C         	call	_lcd_4bit_set_cursor	;wreg free
  3003   002AD2  0101               	movlb	1	; () banked
  3004   002AD4  6F5F               	movwf	_ret& (0+255),b
  3005   002AD6                     
  3006                           ; BSR set to: 1
  3007                           ;app.c: 275:             ret = lcd_4bit_print_int(&lcd, Num);
  3008   002AD6  0EFA               	movlw	low _lcd
  3009   002AD8  6E53               	movwf	lcd_4bit_print_int@LCD^0,c
  3010   002ADA  C0D3  F054         	movff	_Num,lcd_4bit_print_int@value
  3011   002ADE  C0D4  F055         	movff	_Num+1,lcd_4bit_print_int@value+1
  3012   002AE2  C0D5  F056         	movff	_Num+2,lcd_4bit_print_int@value+2
  3013   002AE6  C0D6  F057         	movff	_Num+3,lcd_4bit_print_int@value+3
  3014   002AEA  C0D7  F058         	movff	_Num+4,lcd_4bit_print_int@value+4
  3015   002AEE  C0D8  F059         	movff	_Num+5,lcd_4bit_print_int@value+5
  3016   002AF2  C0D9  F05A         	movff	_Num+6,lcd_4bit_print_int@value+6
  3017   002AF6  C0DA  F05B         	movff	_Num+7,lcd_4bit_print_int@value+7
  3018   002AFA  EC0B  F01E         	call	_lcd_4bit_print_int	;wreg free
  3019   002AFE  0101               	movlb	1	; () banked
  3020   002B00  6F5F               	movwf	_ret& (0+255),b
  3021                           
  3022                           ;app.c: 276:             break;
  3023   002B02  EF23  F016         	goto	l623
  3024   002B06                     l4992:
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;app.c: 278:             Num = Num1 - Num2;
  3028   002B06  51E5               	movf	_Num2& (0+255),w,b
  3029   002B08  5DED               	subwf	_Num1& (0+255),w,b
  3030   002B0A  6FD3               	movwf	_Num& (0+255),b
  3031   002B0C  51E6               	movf	(_Num2+1)& (0+255),w,b
  3032   002B0E  59EE               	subwfb	(_Num1+1)& (0+255),w,b
  3033   002B10  6FD4               	movwf	(_Num+1)& (0+255),b
  3034   002B12  51E7               	movf	(_Num2+2)& (0+255),w,b
  3035   002B14  59EF               	subwfb	(_Num1+2)& (0+255),w,b
  3036   002B16  6FD5               	movwf	(_Num+2)& (0+255),b
  3037   002B18  51E8               	movf	(_Num2+3)& (0+255),w,b
  3038   002B1A  59F0               	subwfb	(_Num1+3)& (0+255),w,b
  3039   002B1C  6FD6               	movwf	(_Num+3)& (0+255),b
  3040   002B1E  51E9               	movf	(_Num2+4)& (0+255),w,b
  3041   002B20  59F1               	subwfb	(_Num1+4)& (0+255),w,b
  3042   002B22  6FD7               	movwf	(_Num+4)& (0+255),b
  3043   002B24  51EA               	movf	(_Num2+5)& (0+255),w,b
  3044   002B26  59F2               	subwfb	(_Num1+5)& (0+255),w,b
  3045   002B28  6FD8               	movwf	(_Num+5)& (0+255),b
  3046   002B2A  51EB               	movf	(_Num2+6)& (0+255),w,b
  3047   002B2C  59F3               	subwfb	(_Num1+6)& (0+255),w,b
  3048   002B2E  6FD9               	movwf	(_Num+6)& (0+255),b
  3049   002B30  51EC               	movf	(_Num2+7)& (0+255),w,b
  3050   002B32  59F4               	subwfb	(_Num1+7)& (0+255),w,b
  3051   002B34  6FDA               	movwf	(_Num+7)& (0+255),b
  3052   002B36  EF61  F015         	goto	l4988
  3053   002B3A                     l4998:
  3054                           
  3055                           ; BSR set to: 0
  3056                           ;app.c: 283:             Num = Num1 * Num2;
  3057   002B3A  C0ED  F001         	movff	_Num1,___omul@multiplier
  3058   002B3E  C0EE  F002         	movff	_Num1+1,___omul@multiplier+1
  3059   002B42  C0EF  F003         	movff	_Num1+2,___omul@multiplier+2
  3060   002B46  C0F0  F004         	movff	_Num1+3,___omul@multiplier+3
  3061   002B4A  C0F1  F005         	movff	_Num1+4,___omul@multiplier+4
  3062   002B4E  C0F2  F006         	movff	_Num1+5,___omul@multiplier+5
  3063   002B52  C0F3  F007         	movff	_Num1+6,___omul@multiplier+6
  3064   002B56  C0F4  F008         	movff	_Num1+7,___omul@multiplier+7
  3065   002B5A  C0E5  F009         	movff	_Num2,___omul@multiplicand
  3066   002B5E  C0E6  F00A         	movff	_Num2+1,___omul@multiplicand+1
  3067   002B62  C0E7  F00B         	movff	_Num2+2,___omul@multiplicand+2
  3068   002B66  C0E8  F00C         	movff	_Num2+3,___omul@multiplicand+3
  3069   002B6A  C0E9  F00D         	movff	_Num2+4,___omul@multiplicand+4
  3070   002B6E  C0EA  F00E         	movff	_Num2+5,___omul@multiplicand+5
  3071   002B72  C0EB  F00F         	movff	_Num2+6,___omul@multiplicand+6
  3072   002B76  C0EC  F010         	movff	_Num2+7,___omul@multiplicand+7
  3073   002B7A  EC82  F01A         	call	___omul	;wreg free
  3074   002B7E  C001  F0D3         	movff	?___omul,_Num
  3075   002B82  C002  F0D4         	movff	?___omul+1,_Num+1
  3076   002B86  C003  F0D5         	movff	?___omul+2,_Num+2
  3077   002B8A  C004  F0D6         	movff	?___omul+3,_Num+3
  3078   002B8E  C005  F0D7         	movff	?___omul+4,_Num+4
  3079   002B92  C006  F0D8         	movff	?___omul+5,_Num+5
  3080   002B96  C007  F0D9         	movff	?___omul+6,_Num+6
  3081   002B9A  C008  F0DA         	movff	?___omul+7,_Num+7
  3082   002B9E  EF61  F015         	goto	l4988
  3083   002BA2                     l5004:
  3084                           
  3085                           ; BSR set to: 0
  3086                           ;app.c: 288:             Num = Num1 / Num2;
  3087   002BA2  C0ED  F001         	movff	_Num1,___lodiv@dividend
  3088   002BA6  C0EE  F002         	movff	_Num1+1,___lodiv@dividend+1
  3089   002BAA  C0EF  F003         	movff	_Num1+2,___lodiv@dividend+2
  3090   002BAE  C0F0  F004         	movff	_Num1+3,___lodiv@dividend+3
  3091   002BB2  C0F1  F005         	movff	_Num1+4,___lodiv@dividend+4
  3092   002BB6  C0F2  F006         	movff	_Num1+5,___lodiv@dividend+5
  3093   002BBA  C0F3  F007         	movff	_Num1+6,___lodiv@dividend+6
  3094   002BBE  C0F4  F008         	movff	_Num1+7,___lodiv@dividend+7
  3095   002BC2  C0E5  F009         	movff	_Num2,___lodiv@divisor
  3096   002BC6  C0E6  F00A         	movff	_Num2+1,___lodiv@divisor+1
  3097   002BCA  C0E7  F00B         	movff	_Num2+2,___lodiv@divisor+2
  3098   002BCE  C0E8  F00C         	movff	_Num2+3,___lodiv@divisor+3
  3099   002BD2  C0E9  F00D         	movff	_Num2+4,___lodiv@divisor+4
  3100   002BD6  C0EA  F00E         	movff	_Num2+5,___lodiv@divisor+5
  3101   002BDA  C0EB  F00F         	movff	_Num2+6,___lodiv@divisor+6
  3102   002BDE  C0EC  F010         	movff	_Num2+7,___lodiv@divisor+7
  3103   002BE2  EC4D  F019         	call	___lodiv	;wreg free
  3104   002BE6  C001  F0D3         	movff	?___lodiv,_Num
  3105   002BEA  C002  F0D4         	movff	?___lodiv+1,_Num+1
  3106   002BEE  C003  F0D5         	movff	?___lodiv+2,_Num+2
  3107   002BF2  C004  F0D6         	movff	?___lodiv+3,_Num+3
  3108   002BF6  C005  F0D7         	movff	?___lodiv+4,_Num+4
  3109   002BFA  C006  F0D8         	movff	?___lodiv+5,_Num+5
  3110   002BFE  C007  F0D9         	movff	?___lodiv+6,_Num+6
  3111   002C02  C008  F0DA         	movff	?___lodiv+7,_Num+7
  3112   002C06  EF61  F015         	goto	l4988
  3113   002C0A                     l5012:
  3114   002C0A  0100               	movlb	0	; () banked
  3115   002C0C  51E4               	movf	_Operator& (0+255),w,b
  3116   002C0E  6E68               	movwf	??_calculate_results_decimal^0,c
  3117   002C10  6A69               	clrf	(??_calculate_results_decimal+1)^0,c
  3118                           
  3119                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3120                           ; Switch size 1, requested type "simple"
  3121                           ; Number of cases is 1, Range of values is 0 to 0
  3122                           ; switch strategies available:
  3123                           ; Name         Instructions Cycles
  3124                           ; simple_byte            4     3 (average)
  3125                           ;	Chosen strategy is simple_byte
  3126   002C12  5069               	movf	(??_calculate_results_decimal+1)^0,w,c
  3127   002C14  0A00               	xorlw	0	; case 0
  3128   002C16  B4D8               	btfsc	status,2,c
  3129   002C18  EF10  F016         	goto	l6070
  3130   002C1C  EF23  F016         	goto	l623
  3131   002C20                     l6070:
  3132                           
  3133                           ; BSR set to: 0
  3134                           ; Switch size 1, requested type "simple"
  3135                           ; Number of cases is 4, Range of values is 42 to 47
  3136                           ; switch strategies available:
  3137                           ; Name         Instructions Cycles
  3138                           ; simple_byte           13     7 (average)
  3139                           ;	Chosen strategy is simple_byte
  3140   002C20  5068               	movf	??_calculate_results_decimal^0,w,c
  3141   002C22  0A2A               	xorlw	42	; case 42
  3142   002C24  B4D8               	btfsc	status,2,c
  3143   002C26  EF9D  F015         	goto	l4998
  3144   002C2A  0A01               	xorlw	1	; case 43
  3145   002C2C  B4D8               	btfsc	status,2,c
  3146   002C2E  EF49  F015         	goto	l4986
  3147   002C32  0A06               	xorlw	6	; case 45
  3148   002C34  B4D8               	btfsc	status,2,c
  3149   002C36  EF83  F015         	goto	l4992
  3150   002C3A  0A02               	xorlw	2	; case 47
  3151   002C3C  B4D8               	btfsc	status,2,c
  3152   002C3E  EFD1  F015         	goto	l5004
  3153   002C42  EF23  F016         	goto	l623
  3154   002C46                     l623:
  3155   002C46  0012               	return		;funcret
  3156   002C48                     __end_of_calculate_results_decimal:
  3157                           	callstack 0
  3158                           
  3159 ;; *************** function _calculate_results_binary_octal *****************
  3160 ;; Defined at:
  3161 ;;		line 332 in file "app.c"
  3162 ;; Parameters:    Size  Location     Type
  3163 ;;		None
  3164 ;; Auto vars:     Size  Location     Type
  3165 ;;  j               2   72[BANK0 ] int 
  3166 ;;  conversion_a   65    0[BANK0 ] unsigned char [65]
  3167 ;;  temp            8   75[BANK0 ] unsigned long long 
  3168 ;;  Dec1            2   70[BANK0 ] unsigned int 
  3169 ;;  Dec2            2   68[BANK0 ] unsigned int 
  3170 ;;  i               1   74[BANK0 ] unsigned char 
  3171 ;;  remainder       1   67[BANK0 ] unsigned char 
  3172 ;; Return value:  Size  Location     Type
  3173 ;;                  1    wreg      void 
  3174 ;; Registers used:
  3175 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3176 ;; Tracked objects:
  3177 ;;		On entry : 0/0
  3178 ;;		On exit  : 0/0
  3179 ;;		Unchanged: 0/0
  3180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3182 ;;      Locals:         0      83       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3183 ;;      Temps:          9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3184 ;;      Totals:         9      83       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3185 ;;Total ram usage:       92 bytes
  3186 ;; Hardware stack levels used: 1
  3187 ;; Hardware stack levels required when called: 9
  3188 ;; This function calls:
  3189 ;;		___lodiv
  3190 ;;		___lomod
  3191 ;;		___lwdiv
  3192 ;;		___omul
  3193 ;;		___wmul
  3194 ;;		_a_power_b
  3195 ;;		_lcd_4bit_print_int
  3196 ;;		_lcd_4bit_set_cursor
  3197 ;; This function is called by:
  3198 ;;		_print_numbers
  3199 ;; This function uses a non-reentrant model
  3200 ;;
  3201                           
  3202                           	psect	text3
  3203   001F1A                     __ptext3:
  3204                           	callstack 0
  3205   001F1A                     _calculate_results_binary_octal:
  3206                           	callstack 20
  3207   001F1A                     
  3208                           ;app.c: 334:     uint64 temp = Num1;
  3209   001F1A  C0ED  F0CB         	movff	_Num1,calculate_results_binary_octal@temp
  3210   001F1E  C0EE  F0CC         	movff	_Num1+1,calculate_results_binary_octal@temp+1
  3211   001F22  C0EF  F0CD         	movff	_Num1+2,calculate_results_binary_octal@temp+2
  3212   001F26  C0F0  F0CE         	movff	_Num1+3,calculate_results_binary_octal@temp+3
  3213   001F2A  C0F1  F0CF         	movff	_Num1+4,calculate_results_binary_octal@temp+4
  3214   001F2E  C0F2  F0D0         	movff	_Num1+5,calculate_results_binary_octal@temp+5
  3215   001F32  C0F3  F0D1         	movff	_Num1+6,calculate_results_binary_octal@temp+6
  3216   001F36  C0F4  F0D2         	movff	_Num1+7,calculate_results_binary_octal@temp+7
  3217   001F3A                     
  3218                           ;app.c: 335:     uint16 Dec1 = 0, Dec2 = 0;
  3219   001F3A  0E00               	movlw	0
  3220   001F3C  0100               	movlb	0	; () banked
  3221   001F3E  6FC7               	movwf	(calculate_results_binary_octal@Dec1+1)& (0+255),b
  3222   001F40  0E00               	movlw	0
  3223   001F42  6FC6               	movwf	calculate_results_binary_octal@Dec1& (0+255),b
  3224   001F44  0E00               	movlw	0
  3225   001F46  6FC5               	movwf	(calculate_results_binary_octal@Dec2+1)& (0+255),b
  3226   001F48  0E00               	movlw	0
  3227   001F4A  6FC4               	movwf	calculate_results_binary_octal@Dec2& (0+255),b
  3228   001F4C  0E00               	movlw	0
  3229   001F4E  6FCA               	movwf	calculate_results_binary_octal@i& (0+255),b
  3230                           
  3231                           ;app.c: 337:     while(temp)
  3232   001F50  EF4C  F010         	goto	l5034
  3233   001F54                     l5022:
  3234                           
  3235                           ; BSR set to: 0
  3236                           ;app.c: 338:     {;app.c: 339:       remainder = temp%10;
  3237   001F54  C0CB  F001         	movff	calculate_results_binary_octal@temp,___lomod@dividend
  3238   001F58  C0CC  F002         	movff	calculate_results_binary_octal@temp+1,___lomod@dividend+1
  3239   001F5C  C0CD  F003         	movff	calculate_results_binary_octal@temp+2,___lomod@dividend+2
  3240   001F60  C0CE  F004         	movff	calculate_results_binary_octal@temp+3,___lomod@dividend+3
  3241   001F64  C0CF  F005         	movff	calculate_results_binary_octal@temp+4,___lomod@dividend+4
  3242   001F68  C0D0  F006         	movff	calculate_results_binary_octal@temp+5,___lomod@dividend+5
  3243   001F6C  C0D1  F007         	movff	calculate_results_binary_octal@temp+6,___lomod@dividend+6
  3244   001F70  C0D2  F008         	movff	calculate_results_binary_octal@temp+7,___lomod@dividend+7
  3245   001F74  0E0A               	movlw	10
  3246   001F76  6E09               	movwf	___lomod@divisor^0,c
  3247   001F78  0E00               	movlw	0
  3248   001F7A  6E0A               	movwf	(___lomod@divisor+1)^0,c
  3249   001F7C  0E00               	movlw	0
  3250   001F7E  6E0B               	movwf	(___lomod@divisor+2)^0,c
  3251   001F80  0E00               	movlw	0
  3252   001F82  6E0C               	movwf	(___lomod@divisor+3)^0,c
  3253   001F84  0E00               	movlw	0
  3254   001F86  6E0D               	movwf	(___lomod@divisor+4)^0,c
  3255   001F88  0E00               	movlw	0
  3256   001F8A  6E0E               	movwf	(___lomod@divisor+5)^0,c
  3257   001F8C  0E00               	movlw	0
  3258   001F8E  6E0F               	movwf	(___lomod@divisor+6)^0,c
  3259   001F90  0E00               	movlw	0
  3260   001F92  6E10               	movwf	(___lomod@divisor+7)^0,c
  3261   001F94  ECC5  F019         	call	___lomod	;wreg free
  3262   001F98  C001  F068         	movff	?___lomod,??_calculate_results_binary_octal
  3263   001F9C  C002  F069         	movff	?___lomod+1,??_calculate_results_binary_octal+1
  3264   001FA0  C003  F06A         	movff	?___lomod+2,??_calculate_results_binary_octal+2
  3265   001FA4  C004  F06B         	movff	?___lomod+3,??_calculate_results_binary_octal+3
  3266   001FA8  C005  F06C         	movff	?___lomod+4,??_calculate_results_binary_octal+4
  3267   001FAC  C006  F06D         	movff	?___lomod+5,??_calculate_results_binary_octal+5
  3268   001FB0  C007  F06E         	movff	?___lomod+6,??_calculate_results_binary_octal+6
  3269   001FB4  C008  F06F         	movff	?___lomod+7,??_calculate_results_binary_octal+7
  3270   001FB8  5068               	movf	??_calculate_results_binary_octal^0,w,c
  3271   001FBA  0100               	movlb	0	; () banked
  3272   001FBC  6FC3               	movwf	calculate_results_binary_octal@remainder& (0+255),b
  3273   001FBE                     
  3274                           ; BSR set to: 0
  3275                           ;app.c: 340:       temp /= 10;
  3276   001FBE  C0CB  F001         	movff	calculate_results_binary_octal@temp,___lodiv@dividend
  3277   001FC2  C0CC  F002         	movff	calculate_results_binary_octal@temp+1,___lodiv@dividend+1
  3278   001FC6  C0CD  F003         	movff	calculate_results_binary_octal@temp+2,___lodiv@dividend+2
  3279   001FCA  C0CE  F004         	movff	calculate_results_binary_octal@temp+3,___lodiv@dividend+3
  3280   001FCE  C0CF  F005         	movff	calculate_results_binary_octal@temp+4,___lodiv@dividend+4
  3281   001FD2  C0D0  F006         	movff	calculate_results_binary_octal@temp+5,___lodiv@dividend+5
  3282   001FD6  C0D1  F007         	movff	calculate_results_binary_octal@temp+6,___lodiv@dividend+6
  3283   001FDA  C0D2  F008         	movff	calculate_results_binary_octal@temp+7,___lodiv@dividend+7
  3284   001FDE  0E0A               	movlw	10
  3285   001FE0  6E09               	movwf	___lodiv@divisor^0,c
  3286   001FE2  0E00               	movlw	0
  3287   001FE4  6E0A               	movwf	(___lodiv@divisor+1)^0,c
  3288   001FE6  0E00               	movlw	0
  3289   001FE8  6E0B               	movwf	(___lodiv@divisor+2)^0,c
  3290   001FEA  0E00               	movlw	0
  3291   001FEC  6E0C               	movwf	(___lodiv@divisor+3)^0,c
  3292   001FEE  0E00               	movlw	0
  3293   001FF0  6E0D               	movwf	(___lodiv@divisor+4)^0,c
  3294   001FF2  0E00               	movlw	0
  3295   001FF4  6E0E               	movwf	(___lodiv@divisor+5)^0,c
  3296   001FF6  0E00               	movlw	0
  3297   001FF8  6E0F               	movwf	(___lodiv@divisor+6)^0,c
  3298   001FFA  0E00               	movlw	0
  3299   001FFC  6E10               	movwf	(___lodiv@divisor+7)^0,c
  3300   001FFE  EC4D  F019         	call	___lodiv	;wreg free
  3301   002002  C001  F0CB         	movff	?___lodiv,calculate_results_binary_octal@temp
  3302   002006  C002  F0CC         	movff	?___lodiv+1,calculate_results_binary_octal@temp+1
  3303   00200A  C003  F0CD         	movff	?___lodiv+2,calculate_results_binary_octal@temp+2
  3304   00200E  C004  F0CE         	movff	?___lodiv+3,calculate_results_binary_octal@temp+3
  3305   002012  C005  F0CF         	movff	?___lodiv+4,calculate_results_binary_octal@temp+4
  3306   002016  C006  F0D0         	movff	?___lodiv+5,calculate_results_binary_octal@temp+5
  3307   00201A  C007  F0D1         	movff	?___lodiv+6,calculate_results_binary_octal@temp+6
  3308   00201E  C008  F0D2         	movff	?___lodiv+7,calculate_results_binary_octal@temp+7
  3309   002022                     
  3310                           ;app.c: 341:       if('3' == mode)
  3311   002022  0E33               	movlw	51
  3312   002024  0100               	movlb	0	; () banked
  3313   002026  19F7               	xorwf	_mode& (0+255),w,b
  3314   002028  A4D8               	btfss	status,2,c
  3315   00202A  EF19  F010         	goto	u3911
  3316   00202E  EF1B  F010         	goto	u3910
  3317   002032                     u3911:
  3318   002032  EF34  F010         	goto	l5030
  3319   002036                     u3910:
  3320   002036                     
  3321                           ; BSR set to: 0
  3322                           ;app.c: 342:         {;app.c: 343:             Dec1 += remainder * a_power_b(2, i);
  3323   002036  C0CA  F007         	movff	calculate_results_binary_octal@i,a_power_b@b
  3324   00203A  0E02               	movlw	2
  3325   00203C  EC4F  F01D         	call	_a_power_b
  3326   002040  C007  F0C1         	movff	?_a_power_b,_calculate_results_binary_octal$1936
  3327   002044  C008  F0C2         	movff	?_a_power_b+1,_calculate_results_binary_octal$1936+1
  3328                           
  3329                           ;app.c: 342:         {;app.c: 343:             Dec1 += remainder * a_power_b(2, i);
  3330   002048  C0C3  F001         	movff	calculate_results_binary_octal@remainder,___wmul@multiplier
  3331   00204C  6A02               	clrf	(___wmul@multiplier+1)^0,c
  3332   00204E  C0C1  F003         	movff	_calculate_results_binary_octal$1936,___wmul@multiplicand
  3333   002052  C0C2  F004         	movff	_calculate_results_binary_octal$1936+1,___wmul@multiplicand+1
  3334   002056  ECDE  F01E         	call	___wmul	;wreg free
  3335   00205A  5001               	movf	?___wmul^0,w,c
  3336   00205C  0100               	movlb	0	; () banked
  3337   00205E  27C6               	addwf	calculate_results_binary_octal@Dec1& (0+255),f,b
  3338   002060  5002               	movf	(?___wmul+1)^0,w,c
  3339   002062  23C7               	addwfc	(calculate_results_binary_octal@Dec1+1)& (0+255),f,b
  3340                           
  3341                           ;app.c: 344:         }
  3342   002064  EF4B  F010         	goto	l5032
  3343   002068                     l5030:
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;app.c: 346:         {;app.c: 347:             Dec1 += remainder * a_power_b(8, i);
  3347   002068  C0CA  F007         	movff	calculate_results_binary_octal@i,a_power_b@b
  3348   00206C  0E08               	movlw	8
  3349   00206E  EC4F  F01D         	call	_a_power_b
  3350   002072  C007  F0C1         	movff	?_a_power_b,_calculate_results_binary_octal$1936
  3351   002076  C008  F0C2         	movff	?_a_power_b+1,_calculate_results_binary_octal$1936+1
  3352                           
  3353                           ;app.c: 346:         {;app.c: 347:             Dec1 += remainder * a_power_b(8, i);
  3354   00207A  C0C3  F001         	movff	calculate_results_binary_octal@remainder,___wmul@multiplier
  3355   00207E  6A02               	clrf	(___wmul@multiplier+1)^0,c
  3356   002080  C0C1  F003         	movff	_calculate_results_binary_octal$1936,___wmul@multiplicand
  3357   002084  C0C2  F004         	movff	_calculate_results_binary_octal$1936+1,___wmul@multiplicand+1
  3358   002088  ECDE  F01E         	call	___wmul	;wreg free
  3359   00208C  5001               	movf	?___wmul^0,w,c
  3360   00208E  0100               	movlb	0	; () banked
  3361   002090  27C6               	addwf	calculate_results_binary_octal@Dec1& (0+255),f,b
  3362   002092  5002               	movf	(?___wmul+1)^0,w,c
  3363   002094  23C7               	addwfc	(calculate_results_binary_octal@Dec1+1)& (0+255),f,b
  3364   002096                     l5032:
  3365                           
  3366                           ; BSR set to: 0
  3367                           ;app.c: 349:       ++i;
  3368   002096  2BCA               	incf	calculate_results_binary_octal@i& (0+255),f,b
  3369   002098                     l5034:
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;app.c: 337:     while(temp)
  3373   002098  51CB               	movf	calculate_results_binary_octal@temp& (0+255),w,b
  3374   00209A  11CC               	iorwf	(calculate_results_binary_octal@temp+1)& (0+255),w,b
  3375   00209C  11CD               	iorwf	(calculate_results_binary_octal@temp+2)& (0+255),w,b
  3376   00209E  11CE               	iorwf	(calculate_results_binary_octal@temp+3)& (0+255),w,b
  3377   0020A0  11CF               	iorwf	(calculate_results_binary_octal@temp+4)& (0+255),w,b
  3378   0020A2  11D0               	iorwf	(calculate_results_binary_octal@temp+5)& (0+255),w,b
  3379   0020A4  11D1               	iorwf	(calculate_results_binary_octal@temp+6)& (0+255),w,b
  3380   0020A6  11D2               	iorwf	(calculate_results_binary_octal@temp+7)& (0+255),w,b
  3381   0020A8  A4D8               	btfss	status,2,c
  3382   0020AA  EF59  F010         	goto	u3921
  3383   0020AE  EF5B  F010         	goto	u3920
  3384   0020B2                     u3921:
  3385   0020B2  EFAA  F00F         	goto	l5022
  3386   0020B6                     u3920:
  3387   0020B6                     
  3388                           ; BSR set to: 0
  3389                           ;app.c: 351:     temp = Num2;
  3390   0020B6  C0E5  F0CB         	movff	_Num2,calculate_results_binary_octal@temp
  3391   0020BA  C0E6  F0CC         	movff	_Num2+1,calculate_results_binary_octal@temp+1
  3392   0020BE  C0E7  F0CD         	movff	_Num2+2,calculate_results_binary_octal@temp+2
  3393   0020C2  C0E8  F0CE         	movff	_Num2+3,calculate_results_binary_octal@temp+3
  3394   0020C6  C0E9  F0CF         	movff	_Num2+4,calculate_results_binary_octal@temp+4
  3395   0020CA  C0EA  F0D0         	movff	_Num2+5,calculate_results_binary_octal@temp+5
  3396   0020CE  C0EB  F0D1         	movff	_Num2+6,calculate_results_binary_octal@temp+6
  3397   0020D2  C0EC  F0D2         	movff	_Num2+7,calculate_results_binary_octal@temp+7
  3398   0020D6                     
  3399                           ; BSR set to: 0
  3400   0020D6  0E00               	movlw	0
  3401   0020D8  6FCA               	movwf	calculate_results_binary_octal@i& (0+255),b
  3402                           
  3403                           ;app.c: 353:     while(temp)
  3404   0020DA  EFEE  F010         	goto	l5048
  3405   0020DE                     l5038:
  3406                           
  3407                           ; BSR set to: 0
  3408                           ;app.c: 354:     {;app.c: 355:       remainder = temp%10;
  3409   0020DE  C0CB  F001         	movff	calculate_results_binary_octal@temp,___lomod@dividend
  3410   0020E2  C0CC  F002         	movff	calculate_results_binary_octal@temp+1,___lomod@dividend+1
  3411   0020E6  C0CD  F003         	movff	calculate_results_binary_octal@temp+2,___lomod@dividend+2
  3412   0020EA  C0CE  F004         	movff	calculate_results_binary_octal@temp+3,___lomod@dividend+3
  3413   0020EE  C0CF  F005         	movff	calculate_results_binary_octal@temp+4,___lomod@dividend+4
  3414   0020F2  C0D0  F006         	movff	calculate_results_binary_octal@temp+5,___lomod@dividend+5
  3415   0020F6  C0D1  F007         	movff	calculate_results_binary_octal@temp+6,___lomod@dividend+6
  3416   0020FA  C0D2  F008         	movff	calculate_results_binary_octal@temp+7,___lomod@dividend+7
  3417   0020FE  0E0A               	movlw	10
  3418   002100  6E09               	movwf	___lomod@divisor^0,c
  3419   002102  0E00               	movlw	0
  3420   002104  6E0A               	movwf	(___lomod@divisor+1)^0,c
  3421   002106  0E00               	movlw	0
  3422   002108  6E0B               	movwf	(___lomod@divisor+2)^0,c
  3423   00210A  0E00               	movlw	0
  3424   00210C  6E0C               	movwf	(___lomod@divisor+3)^0,c
  3425   00210E  0E00               	movlw	0
  3426   002110  6E0D               	movwf	(___lomod@divisor+4)^0,c
  3427   002112  0E00               	movlw	0
  3428   002114  6E0E               	movwf	(___lomod@divisor+5)^0,c
  3429   002116  0E00               	movlw	0
  3430   002118  6E0F               	movwf	(___lomod@divisor+6)^0,c
  3431   00211A  0E00               	movlw	0
  3432   00211C  6E10               	movwf	(___lomod@divisor+7)^0,c
  3433   00211E  ECC5  F019         	call	___lomod	;wreg free
  3434   002122  C001  F068         	movff	?___lomod,??_calculate_results_binary_octal
  3435   002126  C002  F069         	movff	?___lomod+1,??_calculate_results_binary_octal+1
  3436   00212A  C003  F06A         	movff	?___lomod+2,??_calculate_results_binary_octal+2
  3437   00212E  C004  F06B         	movff	?___lomod+3,??_calculate_results_binary_octal+3
  3438   002132  C005  F06C         	movff	?___lomod+4,??_calculate_results_binary_octal+4
  3439   002136  C006  F06D         	movff	?___lomod+5,??_calculate_results_binary_octal+5
  3440   00213A  C007  F06E         	movff	?___lomod+6,??_calculate_results_binary_octal+6
  3441   00213E  C008  F06F         	movff	?___lomod+7,??_calculate_results_binary_octal+7
  3442   002142  5068               	movf	??_calculate_results_binary_octal^0,w,c
  3443   002144  0100               	movlb	0	; () banked
  3444   002146  6FC3               	movwf	calculate_results_binary_octal@remainder& (0+255),b
  3445   002148                     
  3446                           ; BSR set to: 0
  3447                           ;app.c: 356:       temp /= 10;
  3448   002148  C0CB  F001         	movff	calculate_results_binary_octal@temp,___lodiv@dividend
  3449   00214C  C0CC  F002         	movff	calculate_results_binary_octal@temp+1,___lodiv@dividend+1
  3450   002150  C0CD  F003         	movff	calculate_results_binary_octal@temp+2,___lodiv@dividend+2
  3451   002154  C0CE  F004         	movff	calculate_results_binary_octal@temp+3,___lodiv@dividend+3
  3452   002158  C0CF  F005         	movff	calculate_results_binary_octal@temp+4,___lodiv@dividend+4
  3453   00215C  C0D0  F006         	movff	calculate_results_binary_octal@temp+5,___lodiv@dividend+5
  3454   002160  C0D1  F007         	movff	calculate_results_binary_octal@temp+6,___lodiv@dividend+6
  3455   002164  C0D2  F008         	movff	calculate_results_binary_octal@temp+7,___lodiv@dividend+7
  3456   002168  0E0A               	movlw	10
  3457   00216A  6E09               	movwf	___lodiv@divisor^0,c
  3458   00216C  0E00               	movlw	0
  3459   00216E  6E0A               	movwf	(___lodiv@divisor+1)^0,c
  3460   002170  0E00               	movlw	0
  3461   002172  6E0B               	movwf	(___lodiv@divisor+2)^0,c
  3462   002174  0E00               	movlw	0
  3463   002176  6E0C               	movwf	(___lodiv@divisor+3)^0,c
  3464   002178  0E00               	movlw	0
  3465   00217A  6E0D               	movwf	(___lodiv@divisor+4)^0,c
  3466   00217C  0E00               	movlw	0
  3467   00217E  6E0E               	movwf	(___lodiv@divisor+5)^0,c
  3468   002180  0E00               	movlw	0
  3469   002182  6E0F               	movwf	(___lodiv@divisor+6)^0,c
  3470   002184  0E00               	movlw	0
  3471   002186  6E10               	movwf	(___lodiv@divisor+7)^0,c
  3472   002188  EC4D  F019         	call	___lodiv	;wreg free
  3473   00218C  C001  F0CB         	movff	?___lodiv,calculate_results_binary_octal@temp
  3474   002190  C002  F0CC         	movff	?___lodiv+1,calculate_results_binary_octal@temp+1
  3475   002194  C003  F0CD         	movff	?___lodiv+2,calculate_results_binary_octal@temp+2
  3476   002198  C004  F0CE         	movff	?___lodiv+3,calculate_results_binary_octal@temp+3
  3477   00219C  C005  F0CF         	movff	?___lodiv+4,calculate_results_binary_octal@temp+4
  3478   0021A0  C006  F0D0         	movff	?___lodiv+5,calculate_results_binary_octal@temp+5
  3479   0021A4  C007  F0D1         	movff	?___lodiv+6,calculate_results_binary_octal@temp+6
  3480   0021A8  C008  F0D2         	movff	?___lodiv+7,calculate_results_binary_octal@temp+7
  3481   0021AC                     
  3482                           ;app.c: 357:       Dec2 += remainder * a_power_b(2, i);
  3483   0021AC  C0CA  F007         	movff	calculate_results_binary_octal@i,a_power_b@b
  3484   0021B0  0E02               	movlw	2
  3485   0021B2  EC4F  F01D         	call	_a_power_b
  3486   0021B6  C007  F0C1         	movff	?_a_power_b,_calculate_results_binary_octal$1936
  3487   0021BA  C008  F0C2         	movff	?_a_power_b+1,_calculate_results_binary_octal$1936+1
  3488   0021BE                     
  3489                           ;app.c: 357:       Dec2 += remainder * a_power_b(2, i);
  3490   0021BE  C0C3  F001         	movff	calculate_results_binary_octal@remainder,___wmul@multiplier
  3491   0021C2  6A02               	clrf	(___wmul@multiplier+1)^0,c
  3492   0021C4  C0C1  F003         	movff	_calculate_results_binary_octal$1936,___wmul@multiplicand
  3493   0021C8  C0C2  F004         	movff	_calculate_results_binary_octal$1936+1,___wmul@multiplicand+1
  3494   0021CC  ECDE  F01E         	call	___wmul	;wreg free
  3495   0021D0  5001               	movf	?___wmul^0,w,c
  3496   0021D2  0100               	movlb	0	; () banked
  3497   0021D4  27C4               	addwf	calculate_results_binary_octal@Dec2& (0+255),f,b
  3498   0021D6  5002               	movf	(?___wmul+1)^0,w,c
  3499   0021D8  23C5               	addwfc	(calculate_results_binary_octal@Dec2+1)& (0+255),f,b
  3500   0021DA                     
  3501                           ; BSR set to: 0
  3502                           ;app.c: 358:       ++i;
  3503   0021DA  2BCA               	incf	calculate_results_binary_octal@i& (0+255),f,b
  3504   0021DC                     l5048:
  3505                           
  3506                           ; BSR set to: 0
  3507                           ;app.c: 353:     while(temp)
  3508   0021DC  51CB               	movf	calculate_results_binary_octal@temp& (0+255),w,b
  3509   0021DE  11CC               	iorwf	(calculate_results_binary_octal@temp+1)& (0+255),w,b
  3510   0021E0  11CD               	iorwf	(calculate_results_binary_octal@temp+2)& (0+255),w,b
  3511   0021E2  11CE               	iorwf	(calculate_results_binary_octal@temp+3)& (0+255),w,b
  3512   0021E4  11CF               	iorwf	(calculate_results_binary_octal@temp+4)& (0+255),w,b
  3513   0021E6  11D0               	iorwf	(calculate_results_binary_octal@temp+5)& (0+255),w,b
  3514   0021E8  11D1               	iorwf	(calculate_results_binary_octal@temp+6)& (0+255),w,b
  3515   0021EA  11D2               	iorwf	(calculate_results_binary_octal@temp+7)& (0+255),w,b
  3516   0021EC  A4D8               	btfss	status,2,c
  3517   0021EE  EFFB  F010         	goto	u3931
  3518   0021F2  EFFD  F010         	goto	u3930
  3519   0021F6                     u3931:
  3520   0021F6  EF6F  F010         	goto	l5038
  3521   0021FA                     u3930:
  3522   0021FA  EF51  F011         	goto	l5060
  3523   0021FE                     l5050:
  3524                           
  3525                           ; BSR set to: 0
  3526                           ;app.c: 362:             Num = Dec1 + Dec2;
  3527   0021FE  51C4               	movf	calculate_results_binary_octal@Dec2& (0+255),w,b
  3528   002200  25C6               	addwf	calculate_results_binary_octal@Dec1& (0+255),w,b
  3529   002202  6E68               	movwf	??_calculate_results_binary_octal^0,c
  3530   002204  51C5               	movf	(calculate_results_binary_octal@Dec2+1)& (0+255),w,b
  3531   002206  21C7               	addwfc	(calculate_results_binary_octal@Dec1+1)& (0+255),w,b
  3532   002208  6E69               	movwf	(??_calculate_results_binary_octal+1)^0,c
  3533   00220A  C068  F0D3         	movff	??_calculate_results_binary_octal,_Num
  3534   00220E  C069  F0D4         	movff	??_calculate_results_binary_octal+1,_Num+1
  3535   002212  6BD5               	clrf	(_Num+2)& (0+255),b
  3536   002214  6BD6               	clrf	(_Num+3)& (0+255),b
  3537   002216  6BD7               	clrf	(_Num+4)& (0+255),b
  3538   002218  6BD8               	clrf	(_Num+5)& (0+255),b
  3539   00221A  6BD9               	clrf	(_Num+6)& (0+255),b
  3540   00221C  6BDA               	clrf	(_Num+7)& (0+255),b
  3541                           
  3542                           ;app.c: 363:             break;
  3543   00221E  EF6E  F011         	goto	l5062
  3544   002222                     l5052:
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;app.c: 365:             Num = Dec1 - Dec2;
  3548   002222  51C4               	movf	calculate_results_binary_octal@Dec2& (0+255),w,b
  3549   002224  5DC6               	subwf	calculate_results_binary_octal@Dec1& (0+255),w,b
  3550   002226  6E68               	movwf	??_calculate_results_binary_octal^0,c
  3551   002228  51C5               	movf	(calculate_results_binary_octal@Dec2+1)& (0+255),w,b
  3552   00222A  59C7               	subwfb	(calculate_results_binary_octal@Dec1+1)& (0+255),w,b
  3553   00222C  6E69               	movwf	(??_calculate_results_binary_octal+1)^0,c
  3554   00222E  C068  F0D3         	movff	??_calculate_results_binary_octal,_Num
  3555   002232  C069  F0D4         	movff	??_calculate_results_binary_octal+1,_Num+1
  3556   002236  6BD5               	clrf	(_Num+2)& (0+255),b
  3557   002238  6BD6               	clrf	(_Num+3)& (0+255),b
  3558   00223A  6BD7               	clrf	(_Num+4)& (0+255),b
  3559   00223C  6BD8               	clrf	(_Num+5)& (0+255),b
  3560   00223E  6BD9               	clrf	(_Num+6)& (0+255),b
  3561   002240  6BDA               	clrf	(_Num+7)& (0+255),b
  3562                           
  3563                           ;app.c: 366:             break;
  3564   002242  EF6E  F011         	goto	l5062
  3565   002246                     l5054:
  3566                           
  3567                           ; BSR set to: 0
  3568                           ;app.c: 368:             Num = Dec1 * Dec2;
  3569   002246  C0C6  F001         	movff	calculate_results_binary_octal@Dec1,___wmul@multiplier
  3570   00224A  C0C7  F002         	movff	calculate_results_binary_octal@Dec1+1,___wmul@multiplier+1
  3571   00224E  C0C4  F003         	movff	calculate_results_binary_octal@Dec2,___wmul@multiplicand
  3572   002252  C0C5  F004         	movff	calculate_results_binary_octal@Dec2+1,___wmul@multiplicand+1
  3573   002256  ECDE  F01E         	call	___wmul	;wreg free
  3574   00225A  C001  F0D3         	movff	?___wmul,_Num
  3575   00225E  C002  F0D4         	movff	?___wmul+1,_Num+1
  3576   002262  0100               	movlb	0	; () banked
  3577   002264  6BD5               	clrf	(_Num+2)& (0+255),b
  3578   002266  6BD6               	clrf	(_Num+3)& (0+255),b
  3579   002268  6BD7               	clrf	(_Num+4)& (0+255),b
  3580   00226A  6BD8               	clrf	(_Num+5)& (0+255),b
  3581   00226C  6BD9               	clrf	(_Num+6)& (0+255),b
  3582   00226E  6BDA               	clrf	(_Num+7)& (0+255),b
  3583                           
  3584                           ;app.c: 369:             break;
  3585   002270  EF6E  F011         	goto	l5062
  3586   002274                     l5056:
  3587                           
  3588                           ; BSR set to: 0
  3589                           ;app.c: 371:             Num = Dec1 / Dec2;
  3590   002274  C0C6  F001         	movff	calculate_results_binary_octal@Dec1,___lwdiv@dividend
  3591   002278  C0C7  F002         	movff	calculate_results_binary_octal@Dec1+1,___lwdiv@dividend+1
  3592   00227C  C0C4  F003         	movff	calculate_results_binary_octal@Dec2,___lwdiv@divisor
  3593   002280  C0C5  F004         	movff	calculate_results_binary_octal@Dec2+1,___lwdiv@divisor+1
  3594   002284  EC3A  F01C         	call	___lwdiv	;wreg free
  3595   002288  C001  F0D3         	movff	?___lwdiv,_Num
  3596   00228C  C002  F0D4         	movff	?___lwdiv+1,_Num+1
  3597   002290  0100               	movlb	0	; () banked
  3598   002292  6BD5               	clrf	(_Num+2)& (0+255),b
  3599   002294  6BD6               	clrf	(_Num+3)& (0+255),b
  3600   002296  6BD7               	clrf	(_Num+4)& (0+255),b
  3601   002298  6BD8               	clrf	(_Num+5)& (0+255),b
  3602   00229A  6BD9               	clrf	(_Num+6)& (0+255),b
  3603   00229C  6BDA               	clrf	(_Num+7)& (0+255),b
  3604                           
  3605                           ;app.c: 372:             break;
  3606   00229E  EF6E  F011         	goto	l5062
  3607   0022A2                     l5060:
  3608                           
  3609                           ; BSR set to: 0
  3610   0022A2  51E4               	movf	_Operator& (0+255),w,b
  3611   0022A4  6E68               	movwf	??_calculate_results_binary_octal^0,c
  3612   0022A6  6A69               	clrf	(??_calculate_results_binary_octal+1)^0,c
  3613                           
  3614                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3615                           ; Switch size 1, requested type "simple"
  3616                           ; Number of cases is 1, Range of values is 0 to 0
  3617                           ; switch strategies available:
  3618                           ; Name         Instructions Cycles
  3619                           ; simple_byte            4     3 (average)
  3620                           ;	Chosen strategy is simple_byte
  3621   0022A8  5069               	movf	(??_calculate_results_binary_octal+1)^0,w,c
  3622   0022AA  0A00               	xorlw	0	; case 0
  3623   0022AC  B4D8               	btfsc	status,2,c
  3624   0022AE  EF5B  F011         	goto	l6072
  3625   0022B2  EF6E  F011         	goto	l5062
  3626   0022B6                     l6072:
  3627                           
  3628                           ; BSR set to: 0
  3629                           ; Switch size 1, requested type "simple"
  3630                           ; Number of cases is 4, Range of values is 42 to 47
  3631                           ; switch strategies available:
  3632                           ; Name         Instructions Cycles
  3633                           ; simple_byte           13     7 (average)
  3634                           ;	Chosen strategy is simple_byte
  3635   0022B6  5068               	movf	??_calculate_results_binary_octal^0,w,c
  3636   0022B8  0A2A               	xorlw	42	; case 42
  3637   0022BA  B4D8               	btfsc	status,2,c
  3638   0022BC  EF23  F011         	goto	l5054
  3639   0022C0  0A01               	xorlw	1	; case 43
  3640   0022C2  B4D8               	btfsc	status,2,c
  3641   0022C4  EFFF  F010         	goto	l5050
  3642   0022C8  0A06               	xorlw	6	; case 45
  3643   0022CA  B4D8               	btfsc	status,2,c
  3644   0022CC  EF11  F011         	goto	l5052
  3645   0022D0  0A02               	xorlw	2	; case 47
  3646   0022D2  B4D8               	btfsc	status,2,c
  3647   0022D4  EF3A  F011         	goto	l5056
  3648   0022D8  EF6E  F011         	goto	l5062
  3649   0022DC                     l5062:
  3650                           
  3651                           ; BSR set to: 0
  3652                           ;app.c: 374:     uint8 conversion_arr[65];;app.c: 375:     i = 0;
  3653   0022DC  0E00               	movlw	0
  3654   0022DE  6FCA               	movwf	calculate_results_binary_octal@i& (0+255),b
  3655   0022E0                     
  3656                           ; BSR set to: 0
  3657                           ;app.c: 376:     temp = Num;
  3658   0022E0  C0D3  F0CB         	movff	_Num,calculate_results_binary_octal@temp
  3659   0022E4  C0D4  F0CC         	movff	_Num+1,calculate_results_binary_octal@temp+1
  3660   0022E8  C0D5  F0CD         	movff	_Num+2,calculate_results_binary_octal@temp+2
  3661   0022EC  C0D6  F0CE         	movff	_Num+3,calculate_results_binary_octal@temp+3
  3662   0022F0  C0D7  F0CF         	movff	_Num+4,calculate_results_binary_octal@temp+4
  3663   0022F4  C0D8  F0D0         	movff	_Num+5,calculate_results_binary_octal@temp+5
  3664   0022F8  C0D9  F0D1         	movff	_Num+6,calculate_results_binary_octal@temp+6
  3665   0022FC  C0DA  F0D2         	movff	_Num+7,calculate_results_binary_octal@temp+7
  3666                           
  3667                           ;app.c: 377:     while(temp){
  3668   002300  EFF4  F011         	goto	l5078
  3669   002304                     l5066:
  3670                           
  3671                           ; BSR set to: 0
  3672                           ;app.c: 378:         if('3' == mode)
  3673   002304  0E33               	movlw	51
  3674   002306  19F7               	xorwf	_mode& (0+255),w,b
  3675   002308  A4D8               	btfss	status,2,c
  3676   00230A  EF89  F011         	goto	u3941
  3677   00230E  EF8B  F011         	goto	u3940
  3678   002312                     u3941:
  3679   002312  EFBD  F011         	goto	l5072
  3680   002316                     u3940:
  3681   002316                     
  3682                           ; BSR set to: 0
  3683                           ;app.c: 379:         {;app.c: 380:             conversion_arr[i] = temp % 2;
  3684   002316  51CA               	movf	calculate_results_binary_octal@i& (0+255),w,b
  3685   002318  0F80               	addlw	low calculate_results_binary_octal@conversion_arr
  3686   00231A  6ED9               	movwf	fsr2l,c
  3687   00231C  6ADA               	clrf	fsr2h,c
  3688   00231E  51CB               	movf	calculate_results_binary_octal@temp& (0+255),w,b
  3689   002320  0B01               	andlw	1
  3690   002322  6EDF               	movwf	indf2,c
  3691   002324                     
  3692                           ; BSR set to: 0
  3693                           ;app.c: 381:             temp = temp / 2;
  3694   002324  C0CB  F068         	movff	calculate_results_binary_octal@temp,??_calculate_results_binary_octal
  3695   002328  C0CC  F069         	movff	calculate_results_binary_octal@temp+1,??_calculate_results_binary_octal+1
  3696   00232C  C0CD  F06A         	movff	calculate_results_binary_octal@temp+2,??_calculate_results_binary_octal+2
  3697   002330  C0CE  F06B         	movff	calculate_results_binary_octal@temp+3,??_calculate_results_binary_octal+3
  3698   002334  C0CF  F06C         	movff	calculate_results_binary_octal@temp+4,??_calculate_results_binary_octal+4
  3699   002338  C0D0  F06D         	movff	calculate_results_binary_octal@temp+5,??_calculate_results_binary_octal+5
  3700   00233C  C0D1  F06E         	movff	calculate_results_binary_octal@temp+6,??_calculate_results_binary_octal+6
  3701   002340  C0D2  F06F         	movff	calculate_results_binary_octal@temp+7,??_calculate_results_binary_octal+7
  3702   002344  90D8               	bcf	status,0,c
  3703   002346  326F               	rrcf	(??_calculate_results_binary_octal+7)^0,f,c
  3704   002348  326E               	rrcf	(??_calculate_results_binary_octal+6)^0,f,c
  3705   00234A  326D               	rrcf	(??_calculate_results_binary_octal+5)^0,f,c
  3706   00234C  326C               	rrcf	(??_calculate_results_binary_octal+4)^0,f,c
  3707   00234E  326B               	rrcf	(??_calculate_results_binary_octal+3)^0,f,c
  3708   002350  326A               	rrcf	(??_calculate_results_binary_octal+2)^0,f,c
  3709   002352  3269               	rrcf	(??_calculate_results_binary_octal+1)^0,f,c
  3710   002354  3268               	rrcf	??_calculate_results_binary_octal^0,f,c
  3711   002356  C068  F0CB         	movff	??_calculate_results_binary_octal,calculate_results_binary_octal@temp
  3712   00235A  C069  F0CC         	movff	??_calculate_results_binary_octal+1,calculate_results_binary_octal@temp+1
  3713   00235E  C06A  F0CD         	movff	??_calculate_results_binary_octal+2,calculate_results_binary_octal@temp+2
  3714   002362  C06B  F0CE         	movff	??_calculate_results_binary_octal+3,calculate_results_binary_octal@temp+3
  3715   002366  C06C  F0CF         	movff	??_calculate_results_binary_octal+4,calculate_results_binary_octal@temp+4
  3716   00236A  C06D  F0D0         	movff	??_calculate_results_binary_octal+5,calculate_results_binary_octal@temp+5
  3717   00236E  C06E  F0D1         	movff	??_calculate_results_binary_octal+6,calculate_results_binary_octal@temp+6
  3718   002372  C06F  F0D2         	movff	??_calculate_results_binary_octal+7,calculate_results_binary_octal@temp+7
  3719                           
  3720                           ;app.c: 382:         }
  3721   002376  EFF3  F011         	goto	l5076
  3722   00237A                     l5072:
  3723                           
  3724                           ; BSR set to: 0
  3725                           ;app.c: 384:         {;app.c: 385:             conversion_arr[i] = temp % 8;
  3726   00237A  51CA               	movf	calculate_results_binary_octal@i& (0+255),w,b
  3727   00237C  0F80               	addlw	low calculate_results_binary_octal@conversion_arr
  3728   00237E  6ED9               	movwf	fsr2l,c
  3729   002380  6ADA               	clrf	fsr2h,c
  3730   002382  51CB               	movf	calculate_results_binary_octal@temp& (0+255),w,b
  3731   002384  0B07               	andlw	7
  3732   002386  6EDF               	movwf	indf2,c
  3733   002388                     
  3734                           ; BSR set to: 0
  3735                           ;app.c: 386:             temp = temp / 8;
  3736   002388  C0CB  F068         	movff	calculate_results_binary_octal@temp,??_calculate_results_binary_octal
  3737   00238C  C0CC  F069         	movff	calculate_results_binary_octal@temp+1,??_calculate_results_binary_octal+1
  3738   002390  C0CD  F06A         	movff	calculate_results_binary_octal@temp+2,??_calculate_results_binary_octal+2
  3739   002394  C0CE  F06B         	movff	calculate_results_binary_octal@temp+3,??_calculate_results_binary_octal+3
  3740   002398  C0CF  F06C         	movff	calculate_results_binary_octal@temp+4,??_calculate_results_binary_octal+4
  3741   00239C  C0D0  F06D         	movff	calculate_results_binary_octal@temp+5,??_calculate_results_binary_octal+5
  3742   0023A0  C0D1  F06E         	movff	calculate_results_binary_octal@temp+6,??_calculate_results_binary_octal+6
  3743   0023A4  C0D2  F06F         	movff	calculate_results_binary_octal@temp+7,??_calculate_results_binary_octal+7
  3744   0023A8  0E04               	movlw	4
  3745   0023AA  EFE0  F011         	goto	u3950
  3746   0023AE                     u3955:
  3747   0023AE  90D8               	bcf	status,0,c
  3748   0023B0  326F               	rrcf	(??_calculate_results_binary_octal+7)^0,f,c
  3749   0023B2  326E               	rrcf	(??_calculate_results_binary_octal+6)^0,f,c
  3750   0023B4  326D               	rrcf	(??_calculate_results_binary_octal+5)^0,f,c
  3751   0023B6  326C               	rrcf	(??_calculate_results_binary_octal+4)^0,f,c
  3752   0023B8  326B               	rrcf	(??_calculate_results_binary_octal+3)^0,f,c
  3753   0023BA  326A               	rrcf	(??_calculate_results_binary_octal+2)^0,f,c
  3754   0023BC  3269               	rrcf	(??_calculate_results_binary_octal+1)^0,f,c
  3755   0023BE  3268               	rrcf	??_calculate_results_binary_octal^0,f,c
  3756   0023C0                     u3950:
  3757   0023C0  2EE8               	decfsz	wreg,f,c
  3758   0023C2  EFD7  F011         	goto	u3955
  3759   0023C6  C068  F0CB         	movff	??_calculate_results_binary_octal,calculate_results_binary_octal@temp
  3760   0023CA  C069  F0CC         	movff	??_calculate_results_binary_octal+1,calculate_results_binary_octal@temp+1
  3761   0023CE  C06A  F0CD         	movff	??_calculate_results_binary_octal+2,calculate_results_binary_octal@temp+2
  3762   0023D2  C06B  F0CE         	movff	??_calculate_results_binary_octal+3,calculate_results_binary_octal@temp+3
  3763   0023D6  C06C  F0CF         	movff	??_calculate_results_binary_octal+4,calculate_results_binary_octal@temp+4
  3764   0023DA  C06D  F0D0         	movff	??_calculate_results_binary_octal+5,calculate_results_binary_octal@temp+5
  3765   0023DE  C06E  F0D1         	movff	??_calculate_results_binary_octal+6,calculate_results_binary_octal@temp+6
  3766   0023E2  C06F  F0D2         	movff	??_calculate_results_binary_octal+7,calculate_results_binary_octal@temp+7
  3767   0023E6                     l5076:
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;app.c: 388:         i++;
  3771   0023E6  2BCA               	incf	calculate_results_binary_octal@i& (0+255),f,b
  3772   0023E8                     l5078:
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;app.c: 377:     while(temp){
  3776   0023E8  51CB               	movf	calculate_results_binary_octal@temp& (0+255),w,b
  3777   0023EA  11CC               	iorwf	(calculate_results_binary_octal@temp+1)& (0+255),w,b
  3778   0023EC  11CD               	iorwf	(calculate_results_binary_octal@temp+2)& (0+255),w,b
  3779   0023EE  11CE               	iorwf	(calculate_results_binary_octal@temp+3)& (0+255),w,b
  3780   0023F0  11CF               	iorwf	(calculate_results_binary_octal@temp+4)& (0+255),w,b
  3781   0023F2  11D0               	iorwf	(calculate_results_binary_octal@temp+5)& (0+255),w,b
  3782   0023F4  11D1               	iorwf	(calculate_results_binary_octal@temp+6)& (0+255),w,b
  3783   0023F6  11D2               	iorwf	(calculate_results_binary_octal@temp+7)& (0+255),w,b
  3784   0023F8  A4D8               	btfss	status,2,c
  3785   0023FA  EF01  F012         	goto	u3961
  3786   0023FE  EF03  F012         	goto	u3960
  3787   002402                     u3961:
  3788   002402  EF82  F011         	goto	l5066
  3789   002406                     u3960:
  3790   002406                     
  3791                           ; BSR set to: 0
  3792                           ;app.c: 390:     for (int j = i - 1; j >= 0; j--)
  3793   002406  0EFF               	movlw	255
  3794   002408  25CA               	addwf	calculate_results_binary_octal@i& (0+255),w,b
  3795   00240A  6FC8               	movwf	calculate_results_binary_octal@j& (0+255),b
  3796   00240C  6BC9               	clrf	(calculate_results_binary_octal@j+1)& (0+255),b
  3797   00240E  0EFF               	movlw	255
  3798   002410  23C9               	addwfc	(calculate_results_binary_octal@j+1)& (0+255),f,b
  3799   002412  BFC9               	btfsc	(calculate_results_binary_octal@j+1)& (0+255),7,b
  3800   002414  EF10  F012         	goto	u3970
  3801   002418  EF0E  F012         	goto	u3971
  3802   00241C                     u3971:
  3803   00241C  EF12  F012         	goto	l5084
  3804   002420                     u3970:
  3805   002420  EF90  F012         	goto	l5094
  3806   002424                     l5084:
  3807                           
  3808                           ; BSR set to: 0
  3809                           ;app.c: 391:     {;app.c: 392:       if(j==i-1){
  3810   002424  0EFF               	movlw	255
  3811   002426  25CA               	addwf	calculate_results_binary_octal@i& (0+255),w,b
  3812   002428  6E68               	movwf	??_calculate_results_binary_octal^0,c
  3813   00242A  6A69               	clrf	(??_calculate_results_binary_octal+1)^0,c
  3814   00242C  0EFF               	movlw	255
  3815   00242E  2269               	addwfc	(??_calculate_results_binary_octal+1)^0,f,c
  3816   002430  51C8               	movf	calculate_results_binary_octal@j& (0+255),w,b
  3817   002432  1868               	xorwf	??_calculate_results_binary_octal^0,w,c
  3818   002434  E107               	bnz	u3981
  3819   002436  51C9               	movf	(calculate_results_binary_octal@j+1)& (0+255),w,b
  3820   002438  1869               	xorwf	(??_calculate_results_binary_octal+1)^0,w,c
  3821   00243A  A4D8               	btfss	status,2,c
  3822   00243C  EF22  F012         	goto	u3981
  3823   002440  EF24  F012         	goto	u3980
  3824   002444                     u3981:
  3825   002444  EF35  F012         	goto	l5088
  3826   002448                     u3980:
  3827   002448                     
  3828                           ; BSR set to: 0
  3829                           ;app.c: 393:       Num = conversion_arr[j];
  3830   002448  51C8               	movf	calculate_results_binary_octal@j& (0+255),w,b
  3831   00244A  0F80               	addlw	low calculate_results_binary_octal@conversion_arr
  3832   00244C  6ED9               	movwf	fsr2l,c
  3833   00244E  6ADA               	clrf	fsr2h,c
  3834   002450  50DF               	movf	indf2,w,c
  3835   002452  6E68               	movwf	??_calculate_results_binary_octal^0,c
  3836   002454  5068               	movf	??_calculate_results_binary_octal^0,w,c
  3837   002456  6FD3               	movwf	_Num& (0+255),b
  3838   002458  6BD4               	clrf	(_Num+1)& (0+255),b
  3839   00245A  6BD5               	clrf	(_Num+2)& (0+255),b
  3840   00245C  6BD6               	clrf	(_Num+3)& (0+255),b
  3841   00245E  6BD7               	clrf	(_Num+4)& (0+255),b
  3842   002460  6BD8               	clrf	(_Num+5)& (0+255),b
  3843   002462  6BD9               	clrf	(_Num+6)& (0+255),b
  3844   002464  6BDA               	clrf	(_Num+7)& (0+255),b
  3845                           
  3846                           ;app.c: 394:       }
  3847   002466  EF86  F012         	goto	l5090
  3848   00246A                     l5088:
  3849                           
  3850                           ; BSR set to: 0
  3851                           ;app.c: 396:         Num = Num * 10 + conversion_arr[j];
  3852   00246A  C0D3  F001         	movff	_Num,___omul@multiplier
  3853   00246E  C0D4  F002         	movff	_Num+1,___omul@multiplier+1
  3854   002472  C0D5  F003         	movff	_Num+2,___omul@multiplier+2
  3855   002476  C0D6  F004         	movff	_Num+3,___omul@multiplier+3
  3856   00247A  C0D7  F005         	movff	_Num+4,___omul@multiplier+4
  3857   00247E  C0D8  F006         	movff	_Num+5,___omul@multiplier+5
  3858   002482  C0D9  F007         	movff	_Num+6,___omul@multiplier+6
  3859   002486  C0DA  F008         	movff	_Num+7,___omul@multiplier+7
  3860   00248A  0E0A               	movlw	10
  3861   00248C  6E09               	movwf	___omul@multiplicand^0,c
  3862   00248E  0E00               	movlw	0
  3863   002490  6E0A               	movwf	(___omul@multiplicand+1)^0,c
  3864   002492  0E00               	movlw	0
  3865   002494  6E0B               	movwf	(___omul@multiplicand+2)^0,c
  3866   002496  0E00               	movlw	0
  3867   002498  6E0C               	movwf	(___omul@multiplicand+3)^0,c
  3868   00249A  0E00               	movlw	0
  3869   00249C  6E0D               	movwf	(___omul@multiplicand+4)^0,c
  3870   00249E  0E00               	movlw	0
  3871   0024A0  6E0E               	movwf	(___omul@multiplicand+5)^0,c
  3872   0024A2  0E00               	movlw	0
  3873   0024A4  6E0F               	movwf	(___omul@multiplicand+6)^0,c
  3874   0024A6  0E00               	movlw	0
  3875   0024A8  6E10               	movwf	(___omul@multiplicand+7)^0,c
  3876   0024AA  EC82  F01A         	call	___omul	;wreg free
  3877   0024AE  C001  F068         	movff	?___omul,??_calculate_results_binary_octal
  3878   0024B2  C002  F069         	movff	?___omul+1,??_calculate_results_binary_octal+1
  3879   0024B6  C003  F06A         	movff	?___omul+2,??_calculate_results_binary_octal+2
  3880   0024BA  C004  F06B         	movff	?___omul+3,??_calculate_results_binary_octal+3
  3881   0024BE  C005  F06C         	movff	?___omul+4,??_calculate_results_binary_octal+4
  3882   0024C2  C006  F06D         	movff	?___omul+5,??_calculate_results_binary_octal+5
  3883   0024C6  C007  F06E         	movff	?___omul+6,??_calculate_results_binary_octal+6
  3884   0024CA  C008  F06F         	movff	?___omul+7,??_calculate_results_binary_octal+7
  3885   0024CE  0100               	movlb	0	; () banked
  3886   0024D0  51C8               	movf	calculate_results_binary_octal@j& (0+255),w,b
  3887   0024D2  0F80               	addlw	low calculate_results_binary_octal@conversion_arr
  3888   0024D4  6ED9               	movwf	fsr2l,c
  3889   0024D6  6ADA               	clrf	fsr2h,c
  3890   0024D8  50DF               	movf	indf2,w,c
  3891   0024DA  6E70               	movwf	(??_calculate_results_binary_octal+8)^0,c
  3892   0024DC  5070               	movf	(??_calculate_results_binary_octal+8)^0,w,c
  3893   0024DE  2468               	addwf	??_calculate_results_binary_octal^0,w,c
  3894   0024E0  6FD3               	movwf	_Num& (0+255),b
  3895   0024E2  0E00               	movlw	0
  3896   0024E4  2069               	addwfc	(??_calculate_results_binary_octal+1)^0,w,c
  3897   0024E6  6FD4               	movwf	(_Num+1)& (0+255),b
  3898   0024E8  0E00               	movlw	0
  3899   0024EA  206A               	addwfc	(??_calculate_results_binary_octal+2)^0,w,c
  3900   0024EC  6FD5               	movwf	(_Num+2)& (0+255),b
  3901   0024EE  0E00               	movlw	0
  3902   0024F0  206B               	addwfc	(??_calculate_results_binary_octal+3)^0,w,c
  3903   0024F2  6FD6               	movwf	(_Num+3)& (0+255),b
  3904   0024F4  0E00               	movlw	0
  3905   0024F6  206C               	addwfc	(??_calculate_results_binary_octal+4)^0,w,c
  3906   0024F8  6FD7               	movwf	(_Num+4)& (0+255),b
  3907   0024FA  0E00               	movlw	0
  3908   0024FC  206D               	addwfc	(??_calculate_results_binary_octal+5)^0,w,c
  3909   0024FE  6FD8               	movwf	(_Num+5)& (0+255),b
  3910   002500  0E00               	movlw	0
  3911   002502  206E               	addwfc	(??_calculate_results_binary_octal+6)^0,w,c
  3912   002504  6FD9               	movwf	(_Num+6)& (0+255),b
  3913   002506  0E00               	movlw	0
  3914   002508  206F               	addwfc	(??_calculate_results_binary_octal+7)^0,w,c
  3915   00250A  6FDA               	movwf	(_Num+7)& (0+255),b
  3916   00250C                     l5090:
  3917                           
  3918                           ; BSR set to: 0
  3919                           ;app.c: 398:     }
  3920   00250C  07C8               	decf	calculate_results_binary_octal@j& (0+255),f,b
  3921   00250E  A0D8               	btfss	status,0,c
  3922   002510  07C9               	decf	(calculate_results_binary_octal@j+1)& (0+255),f,b
  3923   002512                     
  3924                           ; BSR set to: 0
  3925   002512  BFC9               	btfsc	(calculate_results_binary_octal@j+1)& (0+255),7,b
  3926   002514  EF90  F012         	goto	u3990
  3927   002518  EF8E  F012         	goto	u3991
  3928   00251C                     u3991:
  3929   00251C  EF12  F012         	goto	l5084
  3930   002520                     u3990:
  3931   002520                     l5094:
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;app.c: 399:     ret = lcd_4bit_set_cursor(&lcd, 1, 2);
  3935   002520  0EFA               	movlw	low _lcd
  3936   002522  6E16               	movwf	lcd_4bit_set_cursor@LCD^0,c
  3937   002524  0E01               	movlw	1
  3938   002526  6E17               	movwf	lcd_4bit_set_cursor@Cols^0,c
  3939   002528  0E02               	movlw	2
  3940   00252A  6E18               	movwf	lcd_4bit_set_cursor@Rows^0,c
  3941   00252C  EC74  F01C         	call	_lcd_4bit_set_cursor	;wreg free
  3942   002530  0101               	movlb	1	; () banked
  3943   002532  6F5F               	movwf	_ret& (0+255),b
  3944   002534                     
  3945                           ; BSR set to: 1
  3946                           ;app.c: 400:     ret = lcd_4bit_print_int(&lcd, Num);
  3947   002534  0EFA               	movlw	low _lcd
  3948   002536  6E53               	movwf	lcd_4bit_print_int@LCD^0,c
  3949   002538  C0D3  F054         	movff	_Num,lcd_4bit_print_int@value
  3950   00253C  C0D4  F055         	movff	_Num+1,lcd_4bit_print_int@value+1
  3951   002540  C0D5  F056         	movff	_Num+2,lcd_4bit_print_int@value+2
  3952   002544  C0D6  F057         	movff	_Num+3,lcd_4bit_print_int@value+3
  3953   002548  C0D7  F058         	movff	_Num+4,lcd_4bit_print_int@value+4
  3954   00254C  C0D8  F059         	movff	_Num+5,lcd_4bit_print_int@value+5
  3955   002550  C0D9  F05A         	movff	_Num+6,lcd_4bit_print_int@value+6
  3956   002554  C0DA  F05B         	movff	_Num+7,lcd_4bit_print_int@value+7
  3957   002558  EC0B  F01E         	call	_lcd_4bit_print_int	;wreg free
  3958   00255C  0101               	movlb	1	; () banked
  3959   00255E  6F5F               	movwf	_ret& (0+255),b
  3960   002560                     
  3961                           ; BSR set to: 1
  3962   002560  0012               	return		;funcret
  3963   002562                     __end_of_calculate_results_binary_octal:
  3964                           	callstack 0
  3965                           
  3966 ;; *************** function _lcd_4bit_print_int *****************
  3967 ;; Defined at:
  3968 ;;		line 114 in file "ECU-Layer/LCD/ecu_lcd.c"
  3969 ;; Parameters:    Size  Location     Type
  3970 ;;  LCD             1   82[COMRAM] PTR const struct .
  3971 ;;		 -> lcd(6), 
  3972 ;;  value           8   83[COMRAM] unsigned long long 
  3973 ;; Auto vars:     Size  Location     Type
  3974 ;;  str            11   91[COMRAM] unsigned char [11]
  3975 ;;  ret             1  102[COMRAM] unsigned char 
  3976 ;; Return value:  Size  Location     Type
  3977 ;;                  1    wreg      unsigned char 
  3978 ;; Registers used:
  3979 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3980 ;; Tracked objects:
  3981 ;;		On entry : 0/0
  3982 ;;		On exit  : 0/0
  3983 ;;		Unchanged: 0/0
  3984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3985 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3986 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3988 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3989 ;;Total ram usage:       21 bytes
  3990 ;; Hardware stack levels used: 1
  3991 ;; Hardware stack levels required when called: 8
  3992 ;; This function calls:
  3993 ;;		_convert_int_to_string
  3994 ;;		_lcd_4bit_print_string
  3995 ;; This function is called by:
  3996 ;;		_calculate_results_decimal
  3997 ;;		_calculate_results_binary_octal
  3998 ;; This function uses a non-reentrant model
  3999 ;;
  4000                           
  4001                           	psect	text4
  4002   003C16                     __ptext4:
  4003                           	callstack 0
  4004   003C16                     _lcd_4bit_print_int:
  4005                           	callstack 20
  4006   003C16                     
  4007                           ;ECU-Layer/LCD/ecu_lcd.c: 116:     uint8 str[11];;ECU-Layer/LCD/ecu_lcd.c: 117:     if((
      +                          (void*)0) == LCD){
  4008   003C16  5053               	movf	lcd_4bit_print_int@LCD^0,w,c
  4009   003C18  A4D8               	btfss	status,2,c
  4010   003C1A  EF11  F01E         	goto	u3821
  4011   003C1E  EF13  F01E         	goto	u3820
  4012   003C22                     u3821:
  4013   003C22  EF17  F01E         	goto	l4908
  4014   003C26                     u3820:
  4015   003C26                     
  4016                           ;ECU-Layer/LCD/ecu_lcd.c: 118:         ret = (Std_ReturnType)0x00;
  4017   003C26  0E00               	movlw	0
  4018   003C28  6E67               	movwf	lcd_4bit_print_int@ret^0,c
  4019                           
  4020                           ;ECU-Layer/LCD/ecu_lcd.c: 119:     }
  4021   003C2A  EF33  F01E         	goto	l4912
  4022   003C2E                     l4908:
  4023                           
  4024                           ;ECU-Layer/LCD/ecu_lcd.c: 121:         convert_int_to_string(value, str);
  4025   003C2E  C054  F04A         	movff	lcd_4bit_print_int@value,convert_int_to_string@value
  4026   003C32  C055  F04B         	movff	lcd_4bit_print_int@value+1,convert_int_to_string@value+1
  4027   003C36  C056  F04C         	movff	lcd_4bit_print_int@value+2,convert_int_to_string@value+2
  4028   003C3A  C057  F04D         	movff	lcd_4bit_print_int@value+3,convert_int_to_string@value+3
  4029   003C3E  C058  F04E         	movff	lcd_4bit_print_int@value+4,convert_int_to_string@value+4
  4030   003C42  C059  F04F         	movff	lcd_4bit_print_int@value+5,convert_int_to_string@value+5
  4031   003C46  C05A  F050         	movff	lcd_4bit_print_int@value+6,convert_int_to_string@value+6
  4032   003C4A  C05B  F051         	movff	lcd_4bit_print_int@value+7,convert_int_to_string@value+7
  4033   003C4E  0E5C               	movlw	low lcd_4bit_print_int@str
  4034   003C50  6E52               	movwf	convert_int_to_string@str^0,c
  4035   003C52  ECDE  F01D         	call	_convert_int_to_string	;wreg free
  4036   003C56                     
  4037                           ;ECU-Layer/LCD/ecu_lcd.c: 122:         ret = lcd_4bit_print_string(LCD, str);
  4038   003C56  C053  F016         	movff	lcd_4bit_print_int@LCD,lcd_4bit_print_string@LCD
  4039   003C5A  0E5C               	movlw	low lcd_4bit_print_int@str
  4040   003C5C  6E17               	movwf	lcd_4bit_print_string@Str^0,c
  4041   003C5E  6A18               	clrf	(lcd_4bit_print_string@Str+1)^0,c
  4042   003C60  ECF8  F01B         	call	_lcd_4bit_print_string	;wreg free
  4043   003C64  6E67               	movwf	lcd_4bit_print_int@ret^0,c
  4044   003C66                     l4912:
  4045                           
  4046                           ;ECU-Layer/LCD/ecu_lcd.c: 124:     return ret;
  4047   003C66  5067               	movf	lcd_4bit_print_int@ret^0,w,c
  4048   003C68  0012               	return		;funcret
  4049   003C6A                     __end_of_lcd_4bit_print_int:
  4050                           	callstack 0
  4051                           
  4052 ;; *************** function _convert_int_to_string *****************
  4053 ;; Defined at:
  4054 ;;		line 277 in file "ECU-Layer/LCD/ecu_lcd.c"
  4055 ;; Parameters:    Size  Location     Type
  4056 ;;  value           8   73[COMRAM] unsigned long long 
  4057 ;;  str             1   81[COMRAM] PTR unsigned char 
  4058 ;;		 -> lcd_4bit_print_int@str(11), 
  4059 ;; Auto vars:     Size  Location     Type
  4060 ;;		None
  4061 ;; Return value:  Size  Location     Type
  4062 ;;                  1    wreg      void 
  4063 ;; Registers used:
  4064 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4065 ;; Tracked objects:
  4066 ;;		On entry : 0/0
  4067 ;;		On exit  : 0/0
  4068 ;;		Unchanged: 0/0
  4069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4070 ;;      Params:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4073 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4074 ;;Total ram usage:        9 bytes
  4075 ;; Hardware stack levels used: 1
  4076 ;; Hardware stack levels required when called: 7
  4077 ;; This function calls:
  4078 ;;		_memset
  4079 ;;		_sprintf
  4080 ;; This function is called by:
  4081 ;;		_lcd_4bit_print_int
  4082 ;; This function uses a non-reentrant model
  4083 ;;
  4084                           
  4085                           	psect	text5
  4086   003BBC                     __ptext5:
  4087                           	callstack 0
  4088   003BBC                     _convert_int_to_string:
  4089                           	callstack 20
  4090   003BBC                     
  4091                           ;ECU-Layer/LCD/ecu_lcd.c: 278:     if(((void*)0) == str)
  4092   003BBC  5052               	movf	convert_int_to_string@str^0,w,c
  4093   003BBE  A4D8               	btfss	status,2,c
  4094   003BC0  EFE4  F01D         	goto	u2191
  4095   003BC4  EFE6  F01D         	goto	u2190
  4096   003BC8                     u2191:
  4097   003BC8  EFE8  F01D         	goto	l3318
  4098   003BCC                     u2190:
  4099   003BCC  EF0A  F01E         	goto	l184
  4100   003BD0                     l3318:
  4101                           
  4102                           ;ECU-Layer/LCD/ecu_lcd.c: 283:     {;ECU-Layer/LCD/ecu_lcd.c: 284:         memset(str, '
      +                          \0', 11);
  4103   003BD0  C052  F001         	movff	convert_int_to_string@str,memset@dest
  4104   003BD4  0E00               	movlw	0
  4105   003BD6  6E03               	movwf	(memset@c+1)^0,c
  4106   003BD8  0E00               	movlw	0
  4107   003BDA  6E02               	movwf	memset@c^0,c
  4108   003BDC  0E00               	movlw	0
  4109   003BDE  6E05               	movwf	(memset@n+1)^0,c
  4110   003BE0  0E0B               	movlw	11
  4111   003BE2  6E04               	movwf	memset@n^0,c
  4112   003BE4  ECB0  F01E         	call	_memset	;wreg free
  4113   003BE8                     
  4114                           ;ECU-Layer/LCD/ecu_lcd.c: 285:         sprintf(str, "%llu", value);
  4115   003BE8  C052  F033         	movff	convert_int_to_string@str,sprintf@s
  4116   003BEC  0E4F               	movlw	low STR_1
  4117   003BEE  6E34               	movwf	sprintf@fmt^0,c
  4118   003BF0  C04A  F035         	movff	convert_int_to_string@value,?_sprintf+2
  4119   003BF4  C04B  F036         	movff	convert_int_to_string@value+1,?_sprintf+3
  4120   003BF8  C04C  F037         	movff	convert_int_to_string@value+2,?_sprintf+4
  4121   003BFC  C04D  F038         	movff	convert_int_to_string@value+3,?_sprintf+5
  4122   003C00  C04E  F039         	movff	convert_int_to_string@value+4,?_sprintf+6
  4123   003C04  C04F  F03A         	movff	convert_int_to_string@value+5,?_sprintf+7
  4124   003C08  C050  F03B         	movff	convert_int_to_string@value+6,?_sprintf+8
  4125   003C0C  C051  F03C         	movff	convert_int_to_string@value+7,?_sprintf+9
  4126   003C10  EC96  F01E         	call	_sprintf	;wreg free
  4127   003C14                     l184:
  4128   003C14  0012               	return		;funcret
  4129   003C16                     __end_of_convert_int_to_string:
  4130                           	callstack 0
  4131                           
  4132 ;; *************** function _sprintf *****************
  4133 ;; Defined at:
  4134 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_sprintf.c"
  4135 ;; Parameters:    Size  Location     Type
  4136 ;;  s               1   50[COMRAM] PTR unsigned char 
  4137 ;;		 -> lcd_4bit_print_int@str(11), 
  4138 ;;  fmt             1   51[COMRAM] PTR const unsigned char 
  4139 ;;		 -> STR_1(5), 
  4140 ;; Auto vars:     Size  Location     Type
  4141 ;;  f              12   61[COMRAM] struct _IO_FILE
  4142 ;;  ret             2    0        int 
  4143 ;;  ap              1   60[COMRAM] PTR void [1]
  4144 ;;		 -> ?_sprintf(2), 
  4145 ;; Return value:  Size  Location     Type
  4146 ;;                  2   50[COMRAM] int 
  4147 ;; Registers used:
  4148 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4149 ;; Tracked objects:
  4150 ;;		On entry : 0/0
  4151 ;;		On exit  : 0/0
  4152 ;;		Unchanged: 0/0
  4153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4154 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4155 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4157 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4158 ;;Total ram usage:       23 bytes
  4159 ;; Hardware stack levels used: 1
  4160 ;; Hardware stack levels required when called: 6
  4161 ;; This function calls:
  4162 ;;		_vfprintf
  4163 ;; This function is called by:
  4164 ;;		_convert_int_to_string
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168                           	psect	text6
  4169   003D2C                     __ptext6:
  4170                           	callstack 0
  4171   003D2C                     _sprintf:
  4172                           	callstack 20
  4173   003D2C  0E35               	movlw	low (?_sprintf+2)
  4174   003D2E  6E3D               	movwf	sprintf@ap^0,c
  4175   003D30  C033  F03E         	movff	sprintf@s,sprintf@f
  4176   003D34  0E00               	movlw	0
  4177   003D36  6E42               	movwf	(sprintf@f+4)^0,c
  4178   003D38  0E00               	movlw	0
  4179   003D3A  6E41               	movwf	(sprintf@f+3)^0,c
  4180   003D3C  0E00               	movlw	0
  4181   003D3E  6E49               	movwf	(sprintf@f+11)^0,c
  4182   003D40  0E00               	movlw	0
  4183   003D42  6E48               	movwf	(sprintf@f+10)^0,c
  4184   003D44  0E3E               	movlw	low sprintf@f
  4185   003D46  6E2F               	movwf	vfprintf@fp^0,c
  4186   003D48  C034  F030         	movff	sprintf@fmt,vfprintf@fmt
  4187   003D4C  0E3D               	movlw	low sprintf@ap
  4188   003D4E  6E31               	movwf	vfprintf@ap^0,c
  4189   003D50  EC59  F01E         	call	_vfprintf	;wreg free
  4190   003D54  5033               	movf	sprintf@s^0,w,c
  4191   003D56  2441               	addwf	(sprintf@f+3)^0,w,c
  4192   003D58  6ED9               	movwf	fsr2l,c
  4193   003D5A  6ADA               	clrf	fsr2h,c
  4194   003D5C  6ADF               	clrf	indf2,c
  4195   003D5E  0012               	return		;funcret
  4196   003D60                     __end_of_sprintf:
  4197                           	callstack 0
  4198                           
  4199 ;; *************** function _vfprintf *****************
  4200 ;; Defined at:
  4201 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  4202 ;; Parameters:    Size  Location     Type
  4203 ;;  fp              1   46[COMRAM] PTR struct _IO_FILE
  4204 ;;		 -> sprintf@f(12), 
  4205 ;;  fmt             1   47[COMRAM] PTR const unsigned char 
  4206 ;;		 -> STR_1(5), 
  4207 ;;  ap              1   48[COMRAM] PTR PTR void 
  4208 ;;		 -> sprintf@ap(1), 
  4209 ;; Auto vars:     Size  Location     Type
  4210 ;;  cfmt            1   49[COMRAM] PTR unsigned char 
  4211 ;;		 -> STR_1(5), 
  4212 ;; Return value:  Size  Location     Type
  4213 ;;                  2   46[COMRAM] int 
  4214 ;; Registers used:
  4215 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4216 ;; Tracked objects:
  4217 ;;		On entry : 0/0
  4218 ;;		On exit  : 0/0
  4219 ;;		Unchanged: 0/0
  4220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4221 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4222 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4224 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4225 ;;Total ram usage:        4 bytes
  4226 ;; Hardware stack levels used: 1
  4227 ;; Hardware stack levels required when called: 5
  4228 ;; This function calls:
  4229 ;;		_vfpfcnvrt
  4230 ;; This function is called by:
  4231 ;;		_sprintf
  4232 ;; This function uses a non-reentrant model
  4233 ;;
  4234                           
  4235                           	psect	text7
  4236   003CB2                     __ptext7:
  4237                           	callstack 0
  4238   003CB2                     _vfprintf:
  4239                           	callstack 20
  4240   003CB2                     
  4241                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  4242   003CB2  C030  F032         	movff	vfprintf@fmt,vfprintf@cfmt
  4243                           
  4244                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  4245   003CB6  EF65  F01E         	goto	l3254
  4246   003CBA                     l3252:
  4247                           
  4248                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  4249   003CBA  C02F  F01A         	movff	vfprintf@fp,vfpfcnvrt@fp
  4250   003CBE  0E32               	movlw	low vfprintf@cfmt
  4251   003CC0  6E1B               	movwf	vfpfcnvrt@fmt^0,c
  4252   003CC2  C031  F01C         	movff	vfprintf@ap,vfpfcnvrt@ap
  4253   003CC6  ECB1  F012         	call	_vfpfcnvrt	;wreg free
  4254   003CCA                     l3254:
  4255                           
  4256                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  4257   003CCA  C032  FFF6         	movff	vfprintf@cfmt,tblptrl
  4258   003CCE                     	if	1	;There is more than 1 active tblptr byte
  4259   003CCE  0E10               	movlw	high __smallconst
  4260   003CD0  6EF7               	movwf	tblptrh,c
  4261   003CD2                     	endif
  4262   003CD2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4263   003CD2  6AF8               	clrf	tblptru,c
  4264   003CD4                     	endif
  4265   003CD4                     	if	0	;tblptru may be non-zero
  4266   003CD4                     	endif
  4267   003CD4  0008               	tblrd		*
  4268   003CD6  50F5               	movf	tablat,w,c
  4269   003CD8  0900               	iorlw	0
  4270   003CDA  A4D8               	btfss	status,2,c
  4271   003CDC  EF72  F01E         	goto	u2111
  4272   003CE0  EF74  F01E         	goto	u2110
  4273   003CE4                     u2111:
  4274   003CE4  EF5D  F01E         	goto	l3252
  4275   003CE8                     u2110:
  4276   003CE8                     
  4277                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  4278   003CE8  0E00               	movlw	0
  4279   003CEA  6E30               	movwf	(?_vfprintf+1)^0,c
  4280   003CEC  0E00               	movlw	0
  4281   003CEE  6E2F               	movwf	?_vfprintf^0,c
  4282   003CF0  0012               	return		;funcret
  4283   003CF2                     __end_of_vfprintf:
  4284                           	callstack 0
  4285                           
  4286 ;; *************** function _vfpfcnvrt *****************
  4287 ;; Defined at:
  4288 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c"
  4289 ;; Parameters:    Size  Location     Type
  4290 ;;  fp              1   25[COMRAM] PTR struct _IO_FILE
  4291 ;;		 -> sprintf@f(12), 
  4292 ;;  fmt             1   26[COMRAM] PTR PTR unsigned char 
  4293 ;;		 -> vfprintf@cfmt(1), 
  4294 ;;  ap              1   27[COMRAM] PTR PTR void 
  4295 ;;		 -> sprintf@ap(1), 
  4296 ;; Auto vars:     Size  Location     Type
  4297 ;;  convarg         8   36[COMRAM] struct .
  4298 ;;  c               1   45[COMRAM] unsigned char 
  4299 ;;  cp              1   44[COMRAM] PTR unsigned char 
  4300 ;;		 -> STR_1(5), 
  4301 ;;  done            1    0        _Bool 
  4302 ;; Return value:  Size  Location     Type
  4303 ;;                  1    wreg      void 
  4304 ;; Registers used:
  4305 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4306 ;; Tracked objects:
  4307 ;;		On entry : 0/0
  4308 ;;		On exit  : 0/0
  4309 ;;		Unchanged: 0/0
  4310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4311 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4312 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4313 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4314 ;;      Totals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4315 ;;Total ram usage:       21 bytes
  4316 ;; Hardware stack levels used: 1
  4317 ;; Hardware stack levels required when called: 4
  4318 ;; This function calls:
  4319 ;;		___lodiv
  4320 ;;		___lomod
  4321 ;;		_fputc
  4322 ;; This function is called by:
  4323 ;;		_vfprintf
  4324 ;; This function uses a non-reentrant model
  4325 ;;
  4326                           
  4327                           	psect	text8
  4328   002562                     __ptext8:
  4329                           	callstack 0
  4330   002562                     _vfpfcnvrt:
  4331                           	callstack 20
  4332   002562                     
  4333                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  4334   002562  501B               	movf	vfpfcnvrt@fmt^0,w,c
  4335   002564  6ED9               	movwf	fsr2l,c
  4336   002566  6ADA               	clrf	fsr2h,c
  4337   002568  CFDF FFF6          	movff	indf2,tblptrl
  4338   00256C                     	if	1	;There is more than 1 active tblptr byte
  4339   00256C  0E10               	movlw	high __smallconst
  4340   00256E  6EF7               	movwf	tblptrh,c
  4341   002570                     	endif
  4342   002570                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4343   002570  6AF8               	clrf	tblptru,c
  4344   002572                     	endif
  4345   002572                     	if	0	;tblptru may be non-zero
  4346   002572                     	endif
  4347   002572  0008               	tblrd		*
  4348   002574  50F5               	movf	tablat,w,c
  4349   002576  0A25               	xorlw	37
  4350   002578  A4D8               	btfss	status,2,c
  4351   00257A  EFC1  F012         	goto	u2011
  4352   00257E  EFC3  F012         	goto	u2010
  4353   002582                     u2011:
  4354   002582  EF31  F014         	goto	l3184
  4355   002586                     u2010:
  4356   002586                     
  4357                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  4358   002586  501B               	movf	vfpfcnvrt@fmt^0,w,c
  4359   002588  6ED9               	movwf	fsr2l,c
  4360   00258A  6ADA               	clrf	fsr2h,c
  4361   00258C  2ADF               	incf	indf2,f,c
  4362   00258E                     
  4363                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  4364   00258E  0E00               	movlw	0
  4365   002590  0101               	movlb	1	; () banked
  4366   002592  6F5A               	movwf	(_width+1)& (0+255),b
  4367   002594  0E00               	movlw	0
  4368   002596  6F59               	movwf	_width& (0+255),b
  4369   002598  C159  F0E3         	movff	_width,_flags
  4370   00259C                     
  4371                           ; BSR set to: 1
  4372                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  4373   00259C  695B               	setf	_prec& (0+255),b
  4374   00259E  695C               	setf	(_prec+1)& (0+255),b
  4375   0025A0                     
  4376                           ; BSR set to: 1
  4377                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  4378   0025A0  501B               	movf	vfpfcnvrt@fmt^0,w,c
  4379   0025A2  6ED9               	movwf	fsr2l,c
  4380   0025A4  6ADA               	clrf	fsr2h,c
  4381   0025A6  50DF               	movf	indf2,w,c
  4382   0025A8  6E2D               	movwf	vfpfcnvrt@cp^0,c
  4383   0025AA                     
  4384                           ; BSR set to: 1
  4385                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1293:   c = *cp;
  4386   0025AA  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4387   0025AE                     	if	1	;There is more than 1 active tblptr byte
  4388   0025AE  0E10               	movlw	high __smallconst
  4389   0025B0  6EF7               	movwf	tblptrh,c
  4390   0025B2                     	endif
  4391   0025B2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4392   0025B2  6AF8               	clrf	tblptru,c
  4393   0025B4                     	endif
  4394   0025B4                     	if	0	;tblptru may be non-zero
  4395   0025B4                     	endif
  4396   0025B4  0008               	tblrd		*
  4397   0025B6  CFF5 F02E          	movff	tablat,vfpfcnvrt@c
  4398                           
  4399                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1294:   switch(c)
      +                           {
  4400   0025BA  EFFC  F012         	goto	l3146
  4401   0025BE                     l3132:
  4402                           
  4403                           ; BSR set to: 1
  4404                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1309:     cp++;
  4405   0025BE  2A2D               	incf	vfpfcnvrt@cp^0,f,c
  4406   0025C0                     
  4407                           ; BSR set to: 1
  4408                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1311:     if (*cp
      +                           == 'l') {
  4409   0025C0  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4410   0025C4                     	if	1	;There is more than 1 active tblptr byte
  4411   0025C4  0E10               	movlw	high __smallconst
  4412   0025C6  6EF7               	movwf	tblptrh,c
  4413   0025C8                     	endif
  4414   0025C8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4415   0025C8  6AF8               	clrf	tblptru,c
  4416   0025CA                     	endif
  4417   0025CA                     	if	0	;tblptru may be non-zero
  4418   0025CA                     	endif
  4419   0025CA  0008               	tblrd		*
  4420   0025CC  50F5               	movf	tablat,w,c
  4421   0025CE  0A6C               	xorlw	108
  4422   0025D0  A4D8               	btfss	status,2,c
  4423   0025D2  EFED  F012         	goto	u2021
  4424   0025D6  EFEF  F012         	goto	u2020
  4425   0025DA                     u2021:
  4426   0025DA  EF11  F013         	goto	l3148
  4427   0025DE                     u2020:
  4428   0025DE                     
  4429                           ; BSR set to: 1
  4430                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1312:      c = 'L
      +                          ';
  4431   0025DE  0E4C               	movlw	76
  4432   0025E0  6E2E               	movwf	vfpfcnvrt@c^0,c
  4433   0025E2                     
  4434                           ; BSR set to: 1
  4435                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1313:      cp++;
  4436   0025E2  2A2D               	incf	vfpfcnvrt@cp^0,f,c
  4437   0025E4  EF11  F013         	goto	l3148
  4438   0025E8                     l3140:
  4439                           
  4440                           ; BSR set to: 1
  4441                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1350:     c = 'i'
      +                          ;
  4442   0025E8  0E69               	movlw	105
  4443   0025EA  6E2E               	movwf	vfpfcnvrt@c^0,c
  4444                           
  4445                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1351:     break;
  4446   0025EC  EF11  F013         	goto	l3148
  4447   0025F0                     l3142:
  4448                           
  4449                           ; BSR set to: 1
  4450                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1353:     c = 0;
  4451   0025F0  0E00               	movlw	0
  4452   0025F2  6E2E               	movwf	vfpfcnvrt@c^0,c
  4453                           
  4454                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1354:     break;
  4455   0025F4  EF11  F013         	goto	l3148
  4456   0025F8                     l3146:
  4457                           
  4458                           ; BSR set to: 1
  4459   0025F8  502E               	movf	vfpfcnvrt@c^0,w,c
  4460   0025FA  6E1D               	movwf	??_vfpfcnvrt^0,c
  4461   0025FC  6A1E               	clrf	(??_vfpfcnvrt+1)^0,c
  4462                           
  4463                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4464                           ; Switch size 1, requested type "simple"
  4465                           ; Number of cases is 1, Range of values is 0 to 0
  4466                           ; switch strategies available:
  4467                           ; Name         Instructions Cycles
  4468                           ; simple_byte            4     3 (average)
  4469                           ;	Chosen strategy is simple_byte
  4470   0025FE  501E               	movf	(??_vfpfcnvrt+1)^0,w,c
  4471   002600  0A00               	xorlw	0	; case 0
  4472   002602  B4D8               	btfsc	status,2,c
  4473   002604  EF06  F013         	goto	l6074
  4474   002608  EFF8  F012         	goto	l3142
  4475   00260C                     l6074:
  4476                           
  4477                           ; BSR set to: 1
  4478                           ; Switch size 1, requested type "simple"
  4479                           ; Number of cases is 2, Range of values is 108 to 117
  4480                           ; switch strategies available:
  4481                           ; Name         Instructions Cycles
  4482                           ; simple_byte            7     4 (average)
  4483                           ;	Chosen strategy is simple_byte
  4484   00260C  501D               	movf	??_vfpfcnvrt^0,w,c
  4485   00260E  0A6C               	xorlw	108	; case 108
  4486   002610  B4D8               	btfsc	status,2,c
  4487   002612  EFDF  F012         	goto	l3132
  4488   002616  0A19               	xorlw	25	; case 117
  4489   002618  B4D8               	btfsc	status,2,c
  4490   00261A  EFF4  F012         	goto	l3140
  4491   00261E  EFF8  F012         	goto	l3142
  4492   002622                     l3148:
  4493                           
  4494                           ; BSR set to: 1
  4495   002622  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4496   002626                     	if	1	;There is more than 1 active tblptr byte
  4497   002626  0E10               	movlw	high __smallconst
  4498   002628  6EF7               	movwf	tblptrh,c
  4499   00262A                     	endif
  4500   00262A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4501   00262A  6AF8               	clrf	tblptru,c
  4502   00262C                     	endif
  4503   00262C                     	if	0	;tblptru may be non-zero
  4504   00262C                     	endif
  4505   00262C  0008               	tblrd		*
  4506   00262E  50F5               	movf	tablat,w,c
  4507   002630  0A75               	xorlw	117
  4508   002632  A4D8               	btfss	status,2,c
  4509   002634  EF1E  F013         	goto	u2031
  4510   002638  EF20  F013         	goto	u2030
  4511   00263C                     u2031:
  4512   00263C  EF2B  F014         	goto	l3180
  4513   002640                     u2030:
  4514   002640  EF54  F013         	goto	l3156
  4515   002644                     l3150:
  4516                           
  4517                           ; BSR set to: 1
  4518                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1456:      convar
      +                          g.uint = (vfpf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (un
      +                          signed int)0));
  4519   002644  501C               	movf	vfpfcnvrt@ap^0,w,c
  4520   002646  6ED9               	movwf	fsr2l,c
  4521   002648  6ADA               	clrf	fsr2h,c
  4522   00264A  50DF               	movf	indf2,w,c
  4523   00264C  2ADF               	incf	indf2,f,c
  4524   00264E  2ADF               	incf	indf2,f,c
  4525   002650  6ED9               	movwf	fsr2l,c
  4526   002652  6ADA               	clrf	fsr2h,c
  4527   002654  CFDE F01D          	movff	postinc2,??_vfpfcnvrt
  4528   002658  CFDD F01E          	movff	postdec2,??_vfpfcnvrt+1
  4529   00265C  C01D  F025         	movff	??_vfpfcnvrt,vfpfcnvrt@convarg
  4530   002660  C01E  F026         	movff	??_vfpfcnvrt+1,vfpfcnvrt@convarg+1
  4531   002664  6A27               	clrf	(vfpfcnvrt@convarg+2)^0,c
  4532   002666  6A28               	clrf	(vfpfcnvrt@convarg+3)^0,c
  4533   002668  6A29               	clrf	(vfpfcnvrt@convarg+4)^0,c
  4534   00266A  6A2A               	clrf	(vfpfcnvrt@convarg+5)^0,c
  4535   00266C  6A2B               	clrf	(vfpfcnvrt@convarg+6)^0,c
  4536   00266E  6A2C               	clrf	(vfpfcnvrt@convarg+7)^0,c
  4537                           
  4538                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1457:      break;
  4539   002670  EF69  F013         	goto	l3158
  4540   002674                     l3152:
  4541                           
  4542                           ; BSR set to: 1
  4543                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1475:      convar
      +                          g.uint = (vfpf_uint_t)(*(unsigned long long *)__va_arg(*(unsigned long long **)ap, (unsi
      +                          gned long long)0));
  4544   002674  501C               	movf	vfpfcnvrt@ap^0,w,c
  4545   002676  6ED9               	movwf	fsr2l,c
  4546   002678  6ADA               	clrf	fsr2h,c
  4547   00267A  0E08               	movlw	8
  4548   00267C  26DF               	addwf	indf2,f,c
  4549   00267E  5CDF               	subwf	indf2,w,c
  4550   002680  6ED9               	movwf	fsr2l,c
  4551   002682  6ADA               	clrf	fsr2h,c
  4552   002684  CFDE F025          	movff	postinc2,vfpfcnvrt@convarg
  4553   002688  CFDE F026          	movff	postinc2,vfpfcnvrt@convarg+1
  4554   00268C  CFDE F027          	movff	postinc2,vfpfcnvrt@convarg+2
  4555   002690  CFDE F028          	movff	postinc2,vfpfcnvrt@convarg+3
  4556   002694  CFDE F029          	movff	postinc2,vfpfcnvrt@convarg+4
  4557   002698  CFDE F02A          	movff	postinc2,vfpfcnvrt@convarg+5
  4558   00269C  CFDE F02B          	movff	postinc2,vfpfcnvrt@convarg+6
  4559   0026A0  CFDE F02C          	movff	postinc2,vfpfcnvrt@convarg+7
  4560                           
  4561                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1476:      break;
  4562   0026A4  EF69  F013         	goto	l3158
  4563   0026A8                     l3156:
  4564                           
  4565                           ; BSR set to: 1
  4566   0026A8  502E               	movf	vfpfcnvrt@c^0,w,c
  4567   0026AA  6E1D               	movwf	??_vfpfcnvrt^0,c
  4568   0026AC  6A1E               	clrf	(??_vfpfcnvrt+1)^0,c
  4569                           
  4570                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4571                           ; Switch size 1, requested type "simple"
  4572                           ; Number of cases is 1, Range of values is 0 to 0
  4573                           ; switch strategies available:
  4574                           ; Name         Instructions Cycles
  4575                           ; simple_byte            4     3 (average)
  4576                           ;	Chosen strategy is simple_byte
  4577   0026AE  501E               	movf	(??_vfpfcnvrt+1)^0,w,c
  4578   0026B0  0A00               	xorlw	0	; case 0
  4579   0026B2  B4D8               	btfsc	status,2,c
  4580   0026B4  EF5E  F013         	goto	l6076
  4581   0026B8  EF69  F013         	goto	l3158
  4582   0026BC                     l6076:
  4583                           
  4584                           ; BSR set to: 1
  4585                           ; Switch size 1, requested type "simple"
  4586                           ; Number of cases is 2, Range of values is 76 to 105
  4587                           ; switch strategies available:
  4588                           ; Name         Instructions Cycles
  4589                           ; simple_byte            7     4 (average)
  4590                           ;	Chosen strategy is simple_byte
  4591   0026BC  501D               	movf	??_vfpfcnvrt^0,w,c
  4592   0026BE  0A4C               	xorlw	76	; case 76
  4593   0026C0  B4D8               	btfsc	status,2,c
  4594   0026C2  EF3A  F013         	goto	l3152
  4595   0026C6  0A25               	xorlw	37	; case 105
  4596   0026C8  B4D8               	btfsc	status,2,c
  4597   0026CA  EF22  F013         	goto	l3150
  4598   0026CE  EF69  F013         	goto	l3158
  4599   0026D2                     l3158:
  4600                           
  4601                           ; BSR set to: 1
  4602                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1497:    *fmt = c
      +                          p+1;
  4603   0026D2  501B               	movf	vfpfcnvrt@fmt^0,w,c
  4604   0026D4  6ED9               	movwf	fsr2l,c
  4605   0026D6  6ADA               	clrf	fsr2h,c
  4606   0026D8  282D               	incf	vfpfcnvrt@cp^0,w,c
  4607   0026DA  6EDF               	movwf	indf2,c
  4608                           
  4609                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1498:    switch (
      +                          *cp) {
  4610   0026DC  EF14  F014         	goto	l3178
  4611   0026E0                     l3160:
  4612                           
  4613                           ; BSR set to: 1
  4614                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1525:      c = si
      +                          zeof(dbuf);
  4615   0026E0  0E20               	movlw	32
  4616   0026E2  6E2E               	movwf	vfpfcnvrt@c^0,c
  4617   0026E4                     l3162:
  4618                           
  4619                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1527:       dbuf[
      +                          --c] = (convarg.uint % 10) + '0';
  4620   0026E4  062E               	decf	vfpfcnvrt@c^0,f,c
  4621   0026E6  0E39               	movlw	low _dbuf
  4622   0026E8  242E               	addwf	vfpfcnvrt@c^0,w,c
  4623   0026EA  6ED9               	movwf	fsr2l,c
  4624   0026EC  6ADA               	clrf	fsr2h,c
  4625   0026EE  0E01               	movlw	high _dbuf
  4626   0026F0  22DA               	addwfc	fsr2h,f,c
  4627   0026F2  C025  F001         	movff	vfpfcnvrt@convarg,___lomod@dividend
  4628   0026F6  C026  F002         	movff	vfpfcnvrt@convarg+1,___lomod@dividend+1
  4629   0026FA  C027  F003         	movff	vfpfcnvrt@convarg+2,___lomod@dividend+2
  4630   0026FE  C028  F004         	movff	vfpfcnvrt@convarg+3,___lomod@dividend+3
  4631   002702  C029  F005         	movff	vfpfcnvrt@convarg+4,___lomod@dividend+4
  4632   002706  C02A  F006         	movff	vfpfcnvrt@convarg+5,___lomod@dividend+5
  4633   00270A  C02B  F007         	movff	vfpfcnvrt@convarg+6,___lomod@dividend+6
  4634   00270E  C02C  F008         	movff	vfpfcnvrt@convarg+7,___lomod@dividend+7
  4635   002712  0E0A               	movlw	10
  4636   002714  6E09               	movwf	___lomod@divisor^0,c
  4637   002716  0E00               	movlw	0
  4638   002718  6E0A               	movwf	(___lomod@divisor+1)^0,c
  4639   00271A  0E00               	movlw	0
  4640   00271C  6E0B               	movwf	(___lomod@divisor+2)^0,c
  4641   00271E  0E00               	movlw	0
  4642   002720  6E0C               	movwf	(___lomod@divisor+3)^0,c
  4643   002722  0E00               	movlw	0
  4644   002724  6E0D               	movwf	(___lomod@divisor+4)^0,c
  4645   002726  0E00               	movlw	0
  4646   002728  6E0E               	movwf	(___lomod@divisor+5)^0,c
  4647   00272A  0E00               	movlw	0
  4648   00272C  6E0F               	movwf	(___lomod@divisor+6)^0,c
  4649   00272E  0E00               	movlw	0
  4650   002730  6E10               	movwf	(___lomod@divisor+7)^0,c
  4651   002732  ECC5  F019         	call	___lomod	;wreg free
  4652   002736  C001  F01D         	movff	?___lomod,??_vfpfcnvrt
  4653   00273A  C002  F01E         	movff	?___lomod+1,??_vfpfcnvrt+1
  4654   00273E  C003  F01F         	movff	?___lomod+2,??_vfpfcnvrt+2
  4655   002742  C004  F020         	movff	?___lomod+3,??_vfpfcnvrt+3
  4656   002746  C005  F021         	movff	?___lomod+4,??_vfpfcnvrt+4
  4657   00274A  C006  F022         	movff	?___lomod+5,??_vfpfcnvrt+5
  4658   00274E  C007  F023         	movff	?___lomod+6,??_vfpfcnvrt+6
  4659   002752  C008  F024         	movff	?___lomod+7,??_vfpfcnvrt+7
  4660   002756  501D               	movf	??_vfpfcnvrt^0,w,c
  4661   002758  0F30               	addlw	48
  4662   00275A  6EDF               	movwf	indf2,c
  4663   00275C                     
  4664                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1528:       conva
      +                          rg.uint /= 10;
  4665   00275C  C025  F001         	movff	vfpfcnvrt@convarg,___lodiv@dividend
  4666   002760  C026  F002         	movff	vfpfcnvrt@convarg+1,___lodiv@dividend+1
  4667   002764  C027  F003         	movff	vfpfcnvrt@convarg+2,___lodiv@dividend+2
  4668   002768  C028  F004         	movff	vfpfcnvrt@convarg+3,___lodiv@dividend+3
  4669   00276C  C029  F005         	movff	vfpfcnvrt@convarg+4,___lodiv@dividend+4
  4670   002770  C02A  F006         	movff	vfpfcnvrt@convarg+5,___lodiv@dividend+5
  4671   002774  C02B  F007         	movff	vfpfcnvrt@convarg+6,___lodiv@dividend+6
  4672   002778  C02C  F008         	movff	vfpfcnvrt@convarg+7,___lodiv@dividend+7
  4673   00277C  0E0A               	movlw	10
  4674   00277E  6E09               	movwf	___lodiv@divisor^0,c
  4675   002780  0E00               	movlw	0
  4676   002782  6E0A               	movwf	(___lodiv@divisor+1)^0,c
  4677   002784  0E00               	movlw	0
  4678   002786  6E0B               	movwf	(___lodiv@divisor+2)^0,c
  4679   002788  0E00               	movlw	0
  4680   00278A  6E0C               	movwf	(___lodiv@divisor+3)^0,c
  4681   00278C  0E00               	movlw	0
  4682   00278E  6E0D               	movwf	(___lodiv@divisor+4)^0,c
  4683   002790  0E00               	movlw	0
  4684   002792  6E0E               	movwf	(___lodiv@divisor+5)^0,c
  4685   002794  0E00               	movlw	0
  4686   002796  6E0F               	movwf	(___lodiv@divisor+6)^0,c
  4687   002798  0E00               	movlw	0
  4688   00279A  6E10               	movwf	(___lodiv@divisor+7)^0,c
  4689   00279C  EC4D  F019         	call	___lodiv	;wreg free
  4690   0027A0  C001  F025         	movff	?___lodiv,vfpfcnvrt@convarg
  4691   0027A4  C002  F026         	movff	?___lodiv+1,vfpfcnvrt@convarg+1
  4692   0027A8  C003  F027         	movff	?___lodiv+2,vfpfcnvrt@convarg+2
  4693   0027AC  C004  F028         	movff	?___lodiv+3,vfpfcnvrt@convarg+3
  4694   0027B0  C005  F029         	movff	?___lodiv+4,vfpfcnvrt@convarg+4
  4695   0027B4  C006  F02A         	movff	?___lodiv+5,vfpfcnvrt@convarg+5
  4696   0027B8  C007  F02B         	movff	?___lodiv+6,vfpfcnvrt@convarg+6
  4697   0027BC  C008  F02C         	movff	?___lodiv+7,vfpfcnvrt@convarg+7
  4698   0027C0                     
  4699                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1532:      } whil
      +                          e (convarg.uint != 0 && c != 0);
  4700   0027C0  5025               	movf	vfpfcnvrt@convarg^0,w,c
  4701   0027C2  1026               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  4702   0027C4  1027               	iorwf	(vfpfcnvrt@convarg+2)^0,w,c
  4703   0027C6  1028               	iorwf	(vfpfcnvrt@convarg+3)^0,w,c
  4704   0027C8  1029               	iorwf	(vfpfcnvrt@convarg+4)^0,w,c
  4705   0027CA  102A               	iorwf	(vfpfcnvrt@convarg+5)^0,w,c
  4706   0027CC  102B               	iorwf	(vfpfcnvrt@convarg+6)^0,w,c
  4707   0027CE  102C               	iorwf	(vfpfcnvrt@convarg+7)^0,w,c
  4708   0027D0  B4D8               	btfsc	status,2,c
  4709   0027D2  EFED  F013         	goto	u2041
  4710   0027D6  EFEF  F013         	goto	u2040
  4711   0027DA                     u2041:
  4712   0027DA  EF09  F014         	goto	l3174
  4713   0027DE                     u2040:
  4714   0027DE  502E               	movf	vfpfcnvrt@c^0,w,c
  4715   0027E0  A4D8               	btfss	status,2,c
  4716   0027E2  EFF5  F013         	goto	u2051
  4717   0027E6  EFF7  F013         	goto	u2050
  4718   0027EA                     u2051:
  4719   0027EA  EF72  F013         	goto	l3162
  4720   0027EE                     u2050:
  4721   0027EE  EF09  F014         	goto	l3174
  4722   0027F2                     l3170:
  4723                           
  4724                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1534:       fputc
      +                          (dbuf[c++], fp);
  4725   0027F2  0E39               	movlw	low _dbuf
  4726   0027F4  242E               	addwf	vfpfcnvrt@c^0,w,c
  4727   0027F6  6ED9               	movwf	fsr2l,c
  4728   0027F8  6ADA               	clrf	fsr2h,c
  4729   0027FA  0E01               	movlw	high _dbuf
  4730   0027FC  22DA               	addwfc	fsr2h,f,c
  4731   0027FE  50DF               	movf	indf2,w,c
  4732   002800  6E1D               	movwf	??_vfpfcnvrt^0,c
  4733   002802  501D               	movf	??_vfpfcnvrt^0,w,c
  4734   002804  6E01               	movwf	fputc@c^0,c
  4735   002806  6A02               	clrf	(fputc@c+1)^0,c
  4736   002808  C01A  F003         	movff	vfpfcnvrt@fp,fputc@fp
  4737   00280C  EC2D  F01A         	call	_fputc	;wreg free
  4738   002810  2A2E               	incf	vfpfcnvrt@c^0,f,c
  4739   002812                     l3174:
  4740                           
  4741                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1533:      while 
      +                          (c != sizeof(dbuf)) {
  4742   002812  0E20               	movlw	32
  4743   002814  182E               	xorwf	vfpfcnvrt@c^0,w,c
  4744   002816  A4D8               	btfss	status,2,c
  4745   002818  EF10  F014         	goto	u2061
  4746   00281C  EF12  F014         	goto	u2060
  4747   002820                     u2061:
  4748   002820  EFF9  F013         	goto	l3170
  4749   002824                     u2060:
  4750   002824  EF43  F014         	goto	l1402
  4751   002828                     l3178:
  4752                           
  4753                           ; BSR set to: 1
  4754   002828  C02D  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  4755   00282C                     	if	1	;There is more than 1 active tblptr byte
  4756   00282C  0E10               	movlw	high __smallconst
  4757   00282E  6EF7               	movwf	tblptrh,c
  4758   002830                     	endif
  4759   002830                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4760   002830  6AF8               	clrf	tblptru,c
  4761   002832                     	endif
  4762   002832                     	if	0	;tblptru may be non-zero
  4763   002832                     	endif
  4764   002832  0008               	tblrd		*
  4765   002834  50F5               	movf	tablat,w,c
  4766   002836  6E1D               	movwf	??_vfpfcnvrt^0,c
  4767   002838  6A1E               	clrf	(??_vfpfcnvrt+1)^0,c
  4768                           
  4769                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4770                           ; Switch size 1, requested type "simple"
  4771                           ; Number of cases is 1, Range of values is 0 to 0
  4772                           ; switch strategies available:
  4773                           ; Name         Instructions Cycles
  4774                           ; simple_byte            4     3 (average)
  4775                           ;	Chosen strategy is simple_byte
  4776   00283A  501E               	movf	(??_vfpfcnvrt+1)^0,w,c
  4777   00283C  0A00               	xorlw	0	; case 0
  4778   00283E  B4D8               	btfsc	status,2,c
  4779   002840  EF24  F014         	goto	l6078
  4780   002844  EF2B  F014         	goto	l3180
  4781   002848                     l6078:
  4782                           
  4783                           ; BSR set to: 1
  4784                           ; Switch size 1, requested type "simple"
  4785                           ; Number of cases is 1, Range of values is 117 to 117
  4786                           ; switch strategies available:
  4787                           ; Name         Instructions Cycles
  4788                           ; simple_byte            4     3 (average)
  4789                           ;	Chosen strategy is simple_byte
  4790   002848  501D               	movf	??_vfpfcnvrt^0,w,c
  4791   00284A  0A75               	xorlw	117	; case 117
  4792   00284C  B4D8               	btfsc	status,2,c
  4793   00284E  EF70  F013         	goto	l3160
  4794   002852  EF2B  F014         	goto	l3180
  4795   002856                     l3180:
  4796                           
  4797                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  4798   002856  501B               	movf	vfpfcnvrt@fmt^0,w,c
  4799   002858  6ED9               	movwf	fsr2l,c
  4800   00285A  6ADA               	clrf	fsr2h,c
  4801   00285C  2ADF               	incf	indf2,f,c
  4802   00285E  EF43  F014         	goto	l1402
  4803   002862                     l3184:
  4804                           
  4805                           ;C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  4806   002862  501B               	movf	vfpfcnvrt@fmt^0,w,c
  4807   002864  6ED9               	movwf	fsr2l,c
  4808   002866  6ADA               	clrf	fsr2h,c
  4809   002868  CFDF FFF6          	movff	indf2,tblptrl
  4810   00286C                     	if	1	;There is more than 1 active tblptr byte
  4811   00286C  0E10               	movlw	high __smallconst
  4812   00286E  6EF7               	movwf	tblptrh,c
  4813   002870                     	endif
  4814   002870                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4815   002870  6AF8               	clrf	tblptru,c
  4816   002872                     	endif
  4817   002872                     	if	0	;tblptru may be non-zero
  4818   002872                     	endif
  4819   002872  0008               	tblrd		*
  4820   002874  50F5               	movf	tablat,w,c
  4821   002876  6E01               	movwf	fputc@c^0,c
  4822   002878  6A02               	clrf	(fputc@c+1)^0,c
  4823   00287A  C01A  F003         	movff	vfpfcnvrt@fp,fputc@fp
  4824   00287E  EC2D  F01A         	call	_fputc	;wreg free
  4825   002882  EF2B  F014         	goto	l3180
  4826   002886                     l1402:
  4827   002886  0012               	return		;funcret
  4828   002888                     __end_of_vfpfcnvrt:
  4829                           	callstack 0
  4830                           
  4831 ;; *************** function _fputc *****************
  4832 ;; Defined at:
  4833 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\nf_fputc.c"
  4834 ;; Parameters:    Size  Location     Type
  4835 ;;  c               2    0[COMRAM] int 
  4836 ;;  fp              1    2[COMRAM] PTR struct _IO_FILE
  4837 ;;		 -> sprintf@f(12), 
  4838 ;; Auto vars:     Size  Location     Type
  4839 ;;		None
  4840 ;; Return value:  Size  Location     Type
  4841 ;;                  2    0[COMRAM] int 
  4842 ;; Registers used:
  4843 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4844 ;; Tracked objects:
  4845 ;;		On entry : 0/0
  4846 ;;		On exit  : 0/0
  4847 ;;		Unchanged: 0/0
  4848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4849 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4851 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4852 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4853 ;;Total ram usage:        8 bytes
  4854 ;; Hardware stack levels used: 1
  4855 ;; Hardware stack levels required when called: 3
  4856 ;; This function calls:
  4857 ;;		_putch
  4858 ;; This function is called by:
  4859 ;;		_vfpfcnvrt
  4860 ;; This function uses a non-reentrant model
  4861 ;;
  4862                           
  4863                           	psect	text9
  4864   00345A                     __ptext9:
  4865                           	callstack 0
  4866   00345A                     _fputc:
  4867                           	callstack 20
  4868   00345A  5003               	movf	fputc@fp^0,w,c
  4869   00345C  B4D8               	btfsc	status,2,c
  4870   00345E  EF33  F01A         	goto	u1931
  4871   003462  EF35  F01A         	goto	u1930
  4872   003466                     u1931:
  4873   003466  EF3D  F01A         	goto	l3086
  4874   00346A                     u1930:
  4875   00346A  5003               	movf	fputc@fp^0,w,c
  4876   00346C  A4D8               	btfss	status,2,c
  4877   00346E  EF3B  F01A         	goto	u1941
  4878   003472  EF3D  F01A         	goto	u1940
  4879   003476                     u1941:
  4880   003476  EF42  F01A         	goto	l3088
  4881   00347A                     u1940:
  4882   00347A                     l3086:
  4883   00347A  5001               	movf	fputc@c^0,w,c
  4884   00347C  EC03  F01F         	call	_putch
  4885   003480  EF81  F01A         	goto	l1421
  4886   003484                     l3088:
  4887   003484  5003               	movf	fputc@fp^0,w,c
  4888   003486  6ED9               	movwf	fsr2l,c
  4889   003488  6ADA               	clrf	fsr2h,c
  4890   00348A  0E0A               	movlw	10
  4891   00348C  26D9               	addwf	fsr2l,f,c
  4892   00348E  50DE               	movf	postinc2,w,c
  4893   003490  10DE               	iorwf	postinc2,w,c
  4894   003492  B4D8               	btfsc	status,2,c
  4895   003494  EF4E  F01A         	goto	u1951
  4896   003498  EF50  F01A         	goto	u1950
  4897   00349C                     u1951:
  4898   00349C  EF69  F01A         	goto	l3092
  4899   0034A0                     u1950:
  4900   0034A0  5003               	movf	fputc@fp^0,w,c
  4901   0034A2  6ED9               	movwf	fsr2l,c
  4902   0034A4  6ADA               	clrf	fsr2h,c
  4903   0034A6  0E0A               	movlw	10
  4904   0034A8  26D9               	addwf	fsr2l,f,c
  4905   0034AA  5003               	movf	fputc@fp^0,w,c
  4906   0034AC  6EE1               	movwf	fsr1l,c
  4907   0034AE  6AE2               	clrf	fsr1h,c
  4908   0034B0  0E03               	movlw	3
  4909   0034B2  26E1               	addwf	fsr1l,f,c
  4910   0034B4  50DE               	movf	postinc2,w,c
  4911   0034B6  5CE6               	subwf	postinc1,w,c
  4912   0034B8  50E6               	movf	postinc1,w,c
  4913   0034BA  0A80               	xorlw	128
  4914   0034BC  6E08               	movwf	(??_fputc+4)^0,c
  4915   0034BE  50DE               	movf	postinc2,w,c
  4916   0034C0  0A80               	xorlw	128
  4917   0034C2  5808               	subwfb	(??_fputc+4)^0,w,c
  4918   0034C4  B0D8               	btfsc	status,0,c
  4919   0034C6  EF67  F01A         	goto	u1961
  4920   0034CA  EF69  F01A         	goto	u1960
  4921   0034CE                     u1961:
  4922   0034CE  EF81  F01A         	goto	l1421
  4923   0034D2                     u1960:
  4924   0034D2                     l3092:
  4925   0034D2  5003               	movf	fputc@fp^0,w,c
  4926   0034D4  6ED9               	movwf	fsr2l,c
  4927   0034D6  6ADA               	clrf	fsr2h,c
  4928   0034D8  0E03               	movlw	3
  4929   0034DA  26D9               	addwf	fsr2l,f,c
  4930   0034DC  50DF               	movf	indf2,w,c
  4931   0034DE  6E04               	movwf	??_fputc^0,c
  4932   0034E0  5003               	movf	fputc@fp^0,w,c
  4933   0034E2  6ED9               	movwf	fsr2l,c
  4934   0034E4  6ADA               	clrf	fsr2h,c
  4935   0034E6  50DF               	movf	indf2,w,c
  4936   0034E8  2404               	addwf	??_fputc^0,w,c
  4937   0034EA  6ED9               	movwf	fsr2l,c
  4938   0034EC  6ADA               	clrf	fsr2h,c
  4939   0034EE  C001  FFDF         	movff	fputc@c,indf2
  4940   0034F2  5003               	movf	fputc@fp^0,w,c
  4941   0034F4  6ED9               	movwf	fsr2l,c
  4942   0034F6  6ADA               	clrf	fsr2h,c
  4943   0034F8  0E03               	movlw	3
  4944   0034FA  26D9               	addwf	fsr2l,f,c
  4945   0034FC  2ADE               	incf	postinc2,f,c
  4946   0034FE  0E00               	movlw	0
  4947   003500  22DD               	addwfc	postdec2,f,c
  4948   003502                     l1421:
  4949   003502  0012               	return		;funcret
  4950   003504                     __end_of_fputc:
  4951                           	callstack 0
  4952                           
  4953 ;; *************** function _putch *****************
  4954 ;; Defined at:
  4955 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\putch.c"
  4956 ;; Parameters:    Size  Location     Type
  4957 ;;  c               1    wreg     unsigned char 
  4958 ;; Auto vars:     Size  Location     Type
  4959 ;;  c               1    0[COMRAM] unsigned char 
  4960 ;; Return value:  Size  Location     Type
  4961 ;;                  1    wreg      void 
  4962 ;; Registers used:
  4963 ;;		wreg
  4964 ;; Tracked objects:
  4965 ;;		On entry : 0/0
  4966 ;;		On exit  : 0/0
  4967 ;;		Unchanged: 0/0
  4968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4972 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4973 ;;Total ram usage:        0 bytes
  4974 ;; Hardware stack levels used: 1
  4975 ;; Hardware stack levels required when called: 2
  4976 ;; This function calls:
  4977 ;;		Nothing
  4978 ;; This function is called by:
  4979 ;;		_fputc
  4980 ;; This function uses a non-reentrant model
  4981 ;;
  4982                           
  4983                           	psect	text10
  4984   003E06                     __ptext10:
  4985                           	callstack 0
  4986   003E06                     _putch:
  4987                           	callstack 20
  4988   003E06  0012               	return		;funcret
  4989   003E08                     __end_of_putch:
  4990                           	callstack 0
  4991                           
  4992 ;; *************** function ___lomod *****************
  4993 ;; Defined at:
  4994 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lomod.c"
  4995 ;; Parameters:    Size  Location     Type
  4996 ;;  dividend        8    0[COMRAM] unsigned long long 
  4997 ;;  divisor         8    8[COMRAM] unsigned long long 
  4998 ;; Auto vars:     Size  Location     Type
  4999 ;;  counter         1   16[COMRAM] unsigned char 
  5000 ;; Return value:  Size  Location     Type
  5001 ;;                  8    0[COMRAM] unsigned long long 
  5002 ;; Registers used:
  5003 ;;		wreg, status,2, status,0
  5004 ;; Tracked objects:
  5005 ;;		On entry : 0/0
  5006 ;;		On exit  : 0/0
  5007 ;;		Unchanged: 0/0
  5008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5009 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5010 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5012 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5013 ;;Total ram usage:       17 bytes
  5014 ;; Hardware stack levels used: 1
  5015 ;; Hardware stack levels required when called: 2
  5016 ;; This function calls:
  5017 ;;		Nothing
  5018 ;; This function is called by:
  5019 ;;		_calculate_results_binary_octal
  5020 ;;		_vfpfcnvrt
  5021 ;; This function uses a non-reentrant model
  5022 ;;
  5023                           
  5024                           	psect	text11
  5025   00338A                     __ptext11:
  5026                           	callstack 0
  5027   00338A                     ___lomod:
  5028                           	callstack 21
  5029   00338A  5009               	movf	___lomod@divisor^0,w,c
  5030   00338C  100A               	iorwf	(___lomod@divisor+1)^0,w,c
  5031   00338E  100B               	iorwf	(___lomod@divisor+2)^0,w,c
  5032   003390  100C               	iorwf	(___lomod@divisor+3)^0,w,c
  5033   003392  100D               	iorwf	(___lomod@divisor+4)^0,w,c
  5034   003394  100E               	iorwf	(___lomod@divisor+5)^0,w,c
  5035   003396  100F               	iorwf	(___lomod@divisor+6)^0,w,c
  5036   003398  1010               	iorwf	(___lomod@divisor+7)^0,w,c
  5037   00339A  B4D8               	btfsc	status,2,c
  5038   00339C  EFD2  F019         	goto	u1901
  5039   0033A0  EFD4  F019         	goto	u1900
  5040   0033A4                     u1901:
  5041   0033A4  EF1C  F01A         	goto	l1119
  5042   0033A8                     u1900:
  5043   0033A8  0E01               	movlw	1
  5044   0033AA  6E11               	movwf	___lomod@counter^0,c
  5045   0033AC  EFE2  F019         	goto	l3072
  5046   0033B0                     l3070:
  5047   0033B0  90D8               	bcf	status,0,c
  5048   0033B2  3609               	rlcf	___lomod@divisor^0,f,c
  5049   0033B4  360A               	rlcf	(___lomod@divisor+1)^0,f,c
  5050   0033B6  360B               	rlcf	(___lomod@divisor+2)^0,f,c
  5051   0033B8  360C               	rlcf	(___lomod@divisor+3)^0,f,c
  5052   0033BA  360D               	rlcf	(___lomod@divisor+4)^0,f,c
  5053   0033BC  360E               	rlcf	(___lomod@divisor+5)^0,f,c
  5054   0033BE  360F               	rlcf	(___lomod@divisor+6)^0,f,c
  5055   0033C0  3610               	rlcf	(___lomod@divisor+7)^0,f,c
  5056   0033C2  2A11               	incf	___lomod@counter^0,f,c
  5057   0033C4                     l3072:
  5058   0033C4  AE10               	btfss	(___lomod@divisor+7)^0,7,c
  5059   0033C6  EFE7  F019         	goto	u1911
  5060   0033CA  EFE9  F019         	goto	u1910
  5061   0033CE                     u1911:
  5062   0033CE  EFD8  F019         	goto	l3070
  5063   0033D2                     u1910:
  5064   0033D2                     l3074:
  5065   0033D2  5009               	movf	___lomod@divisor^0,w,c
  5066   0033D4  5C01               	subwf	___lomod@dividend^0,w,c
  5067   0033D6  500A               	movf	(___lomod@divisor+1)^0,w,c
  5068   0033D8  5802               	subwfb	(___lomod@dividend+1)^0,w,c
  5069   0033DA  500B               	movf	(___lomod@divisor+2)^0,w,c
  5070   0033DC  5803               	subwfb	(___lomod@dividend+2)^0,w,c
  5071   0033DE  500C               	movf	(___lomod@divisor+3)^0,w,c
  5072   0033E0  5804               	subwfb	(___lomod@dividend+3)^0,w,c
  5073   0033E2  500D               	movf	(___lomod@divisor+4)^0,w,c
  5074   0033E4  5805               	subwfb	(___lomod@dividend+4)^0,w,c
  5075   0033E6  500E               	movf	(___lomod@divisor+5)^0,w,c
  5076   0033E8  5806               	subwfb	(___lomod@dividend+5)^0,w,c
  5077   0033EA  500F               	movf	(___lomod@divisor+6)^0,w,c
  5078   0033EC  5807               	subwfb	(___lomod@dividend+6)^0,w,c
  5079   0033EE  5010               	movf	(___lomod@divisor+7)^0,w,c
  5080   0033F0  5808               	subwfb	(___lomod@dividend+7)^0,w,c
  5081   0033F2  A0D8               	btfss	status,0,c
  5082   0033F4  EFFE  F019         	goto	u1921
  5083   0033F8  EF00  F01A         	goto	u1920
  5084   0033FC                     u1921:
  5085   0033FC  EF10  F01A         	goto	l3078
  5086   003400                     u1920:
  5087   003400  5009               	movf	___lomod@divisor^0,w,c
  5088   003402  5E01               	subwf	___lomod@dividend^0,f,c
  5089   003404  500A               	movf	(___lomod@divisor+1)^0,w,c
  5090   003406  5A02               	subwfb	(___lomod@dividend+1)^0,f,c
  5091   003408  500B               	movf	(___lomod@divisor+2)^0,w,c
  5092   00340A  5A03               	subwfb	(___lomod@dividend+2)^0,f,c
  5093   00340C  500C               	movf	(___lomod@divisor+3)^0,w,c
  5094   00340E  5A04               	subwfb	(___lomod@dividend+3)^0,f,c
  5095   003410  500D               	movf	(___lomod@divisor+4)^0,w,c
  5096   003412  5A05               	subwfb	(___lomod@dividend+4)^0,f,c
  5097   003414  500E               	movf	(___lomod@divisor+5)^0,w,c
  5098   003416  5A06               	subwfb	(___lomod@dividend+5)^0,f,c
  5099   003418  500F               	movf	(___lomod@divisor+6)^0,w,c
  5100   00341A  5A07               	subwfb	(___lomod@dividend+6)^0,f,c
  5101   00341C  5010               	movf	(___lomod@divisor+7)^0,w,c
  5102   00341E  5A08               	subwfb	(___lomod@dividend+7)^0,f,c
  5103   003420                     l3078:
  5104   003420  90D8               	bcf	status,0,c
  5105   003422  3210               	rrcf	(___lomod@divisor+7)^0,f,c
  5106   003424  320F               	rrcf	(___lomod@divisor+6)^0,f,c
  5107   003426  320E               	rrcf	(___lomod@divisor+5)^0,f,c
  5108   003428  320D               	rrcf	(___lomod@divisor+4)^0,f,c
  5109   00342A  320C               	rrcf	(___lomod@divisor+3)^0,f,c
  5110   00342C  320B               	rrcf	(___lomod@divisor+2)^0,f,c
  5111   00342E  320A               	rrcf	(___lomod@divisor+1)^0,f,c
  5112   003430  3209               	rrcf	___lomod@divisor^0,f,c
  5113   003432  2E11               	decfsz	___lomod@counter^0,f,c
  5114   003434  EFE9  F019         	goto	l3074
  5115   003438                     l1119:
  5116   003438  C001  F001         	movff	___lomod@dividend,?___lomod
  5117   00343C  C002  F002         	movff	___lomod@dividend+1,?___lomod+1
  5118   003440  C003  F003         	movff	___lomod@dividend+2,?___lomod+2
  5119   003444  C004  F004         	movff	___lomod@dividend+3,?___lomod+3
  5120   003448  C005  F005         	movff	___lomod@dividend+4,?___lomod+4
  5121   00344C  C006  F006         	movff	___lomod@dividend+5,?___lomod+5
  5122   003450  C007  F007         	movff	___lomod@dividend+6,?___lomod+6
  5123   003454  C008  F008         	movff	___lomod@dividend+7,?___lomod+7
  5124   003458  0012               	return		;funcret
  5125   00345A                     __end_of___lomod:
  5126                           	callstack 0
  5127                           
  5128 ;; *************** function ___lodiv *****************
  5129 ;; Defined at:
  5130 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lodiv.c"
  5131 ;; Parameters:    Size  Location     Type
  5132 ;;  dividend        8    0[COMRAM] unsigned long long 
  5133 ;;  divisor         8    8[COMRAM] unsigned long long 
  5134 ;; Auto vars:     Size  Location     Type
  5135 ;;  quotient        8   16[COMRAM] unsigned long long 
  5136 ;;  counter         1   24[COMRAM] unsigned char 
  5137 ;; Return value:  Size  Location     Type
  5138 ;;                  8    0[COMRAM] unsigned long long 
  5139 ;; Registers used:
  5140 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5141 ;; Tracked objects:
  5142 ;;		On entry : 0/0
  5143 ;;		On exit  : 0/0
  5144 ;;		Unchanged: 0/0
  5145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5146 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5147 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5149 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5150 ;;Total ram usage:       25 bytes
  5151 ;; Hardware stack levels used: 1
  5152 ;; Hardware stack levels required when called: 2
  5153 ;; This function calls:
  5154 ;;		Nothing
  5155 ;; This function is called by:
  5156 ;;		_calculate_results_decimal
  5157 ;;		_calculate_results_binary_octal
  5158 ;;		_vfpfcnvrt
  5159 ;; This function uses a non-reentrant model
  5160 ;;
  5161                           
  5162                           	psect	text12
  5163   00329A                     __ptext12:
  5164                           	callstack 0
  5165   00329A                     ___lodiv:
  5166                           	callstack 21
  5167   00329A  EE20  F011         	lfsr	2,___lodiv@quotient
  5168   00329E  0E07               	movlw	7
  5169   0032A0                     u1861:
  5170   0032A0  6ADE               	clrf	postinc2,c
  5171   0032A2  06E8               	decf	wreg,f,c
  5172   0032A4  E2FD               	bc	u1861
  5173   0032A6  5009               	movf	___lodiv@divisor^0,w,c
  5174   0032A8  100A               	iorwf	(___lodiv@divisor+1)^0,w,c
  5175   0032AA  100B               	iorwf	(___lodiv@divisor+2)^0,w,c
  5176   0032AC  100C               	iorwf	(___lodiv@divisor+3)^0,w,c
  5177   0032AE  100D               	iorwf	(___lodiv@divisor+4)^0,w,c
  5178   0032B0  100E               	iorwf	(___lodiv@divisor+5)^0,w,c
  5179   0032B2  100F               	iorwf	(___lodiv@divisor+6)^0,w,c
  5180   0032B4  1010               	iorwf	(___lodiv@divisor+7)^0,w,c
  5181   0032B6  B4D8               	btfsc	status,2,c
  5182   0032B8  EF60  F019         	goto	u1871
  5183   0032BC  EF62  F019         	goto	u1870
  5184   0032C0                     u1871:
  5185   0032C0  EFB4  F019         	goto	l1109
  5186   0032C4                     u1870:
  5187   0032C4  0E01               	movlw	1
  5188   0032C6  6E19               	movwf	___lodiv@counter^0,c
  5189   0032C8  EF70  F019         	goto	l3052
  5190   0032CC                     l3050:
  5191   0032CC  90D8               	bcf	status,0,c
  5192   0032CE  3609               	rlcf	___lodiv@divisor^0,f,c
  5193   0032D0  360A               	rlcf	(___lodiv@divisor+1)^0,f,c
  5194   0032D2  360B               	rlcf	(___lodiv@divisor+2)^0,f,c
  5195   0032D4  360C               	rlcf	(___lodiv@divisor+3)^0,f,c
  5196   0032D6  360D               	rlcf	(___lodiv@divisor+4)^0,f,c
  5197   0032D8  360E               	rlcf	(___lodiv@divisor+5)^0,f,c
  5198   0032DA  360F               	rlcf	(___lodiv@divisor+6)^0,f,c
  5199   0032DC  3610               	rlcf	(___lodiv@divisor+7)^0,f,c
  5200   0032DE  2A19               	incf	___lodiv@counter^0,f,c
  5201   0032E0                     l3052:
  5202   0032E0  AE10               	btfss	(___lodiv@divisor+7)^0,7,c
  5203   0032E2  EF75  F019         	goto	u1881
  5204   0032E6  EF77  F019         	goto	u1880
  5205   0032EA                     u1881:
  5206   0032EA  EF66  F019         	goto	l3050
  5207   0032EE                     u1880:
  5208   0032EE                     l3054:
  5209   0032EE  90D8               	bcf	status,0,c
  5210   0032F0  3611               	rlcf	___lodiv@quotient^0,f,c
  5211   0032F2  3612               	rlcf	(___lodiv@quotient+1)^0,f,c
  5212   0032F4  3613               	rlcf	(___lodiv@quotient+2)^0,f,c
  5213   0032F6  3614               	rlcf	(___lodiv@quotient+3)^0,f,c
  5214   0032F8  3615               	rlcf	(___lodiv@quotient+4)^0,f,c
  5215   0032FA  3616               	rlcf	(___lodiv@quotient+5)^0,f,c
  5216   0032FC  3617               	rlcf	(___lodiv@quotient+6)^0,f,c
  5217   0032FE  3618               	rlcf	(___lodiv@quotient+7)^0,f,c
  5218   003300  5009               	movf	___lodiv@divisor^0,w,c
  5219   003302  5C01               	subwf	___lodiv@dividend^0,w,c
  5220   003304  500A               	movf	(___lodiv@divisor+1)^0,w,c
  5221   003306  5802               	subwfb	(___lodiv@dividend+1)^0,w,c
  5222   003308  500B               	movf	(___lodiv@divisor+2)^0,w,c
  5223   00330A  5803               	subwfb	(___lodiv@dividend+2)^0,w,c
  5224   00330C  500C               	movf	(___lodiv@divisor+3)^0,w,c
  5225   00330E  5804               	subwfb	(___lodiv@dividend+3)^0,w,c
  5226   003310  500D               	movf	(___lodiv@divisor+4)^0,w,c
  5227   003312  5805               	subwfb	(___lodiv@dividend+4)^0,w,c
  5228   003314  500E               	movf	(___lodiv@divisor+5)^0,w,c
  5229   003316  5806               	subwfb	(___lodiv@dividend+5)^0,w,c
  5230   003318  500F               	movf	(___lodiv@divisor+6)^0,w,c
  5231   00331A  5807               	subwfb	(___lodiv@dividend+6)^0,w,c
  5232   00331C  5010               	movf	(___lodiv@divisor+7)^0,w,c
  5233   00331E  5808               	subwfb	(___lodiv@dividend+7)^0,w,c
  5234   003320  A0D8               	btfss	status,0,c
  5235   003322  EF95  F019         	goto	u1891
  5236   003326  EF97  F019         	goto	u1890
  5237   00332A                     u1891:
  5238   00332A  EFA8  F019         	goto	l3062
  5239   00332E                     u1890:
  5240   00332E  5009               	movf	___lodiv@divisor^0,w,c
  5241   003330  5E01               	subwf	___lodiv@dividend^0,f,c
  5242   003332  500A               	movf	(___lodiv@divisor+1)^0,w,c
  5243   003334  5A02               	subwfb	(___lodiv@dividend+1)^0,f,c
  5244   003336  500B               	movf	(___lodiv@divisor+2)^0,w,c
  5245   003338  5A03               	subwfb	(___lodiv@dividend+2)^0,f,c
  5246   00333A  500C               	movf	(___lodiv@divisor+3)^0,w,c
  5247   00333C  5A04               	subwfb	(___lodiv@dividend+3)^0,f,c
  5248   00333E  500D               	movf	(___lodiv@divisor+4)^0,w,c
  5249   003340  5A05               	subwfb	(___lodiv@dividend+4)^0,f,c
  5250   003342  500E               	movf	(___lodiv@divisor+5)^0,w,c
  5251   003344  5A06               	subwfb	(___lodiv@dividend+5)^0,f,c
  5252   003346  500F               	movf	(___lodiv@divisor+6)^0,w,c
  5253   003348  5A07               	subwfb	(___lodiv@dividend+6)^0,f,c
  5254   00334A  5010               	movf	(___lodiv@divisor+7)^0,w,c
  5255   00334C  5A08               	subwfb	(___lodiv@dividend+7)^0,f,c
  5256   00334E  8011               	bsf	___lodiv@quotient^0,0,c
  5257   003350                     l3062:
  5258   003350  90D8               	bcf	status,0,c
  5259   003352  3210               	rrcf	(___lodiv@divisor+7)^0,f,c
  5260   003354  320F               	rrcf	(___lodiv@divisor+6)^0,f,c
  5261   003356  320E               	rrcf	(___lodiv@divisor+5)^0,f,c
  5262   003358  320D               	rrcf	(___lodiv@divisor+4)^0,f,c
  5263   00335A  320C               	rrcf	(___lodiv@divisor+3)^0,f,c
  5264   00335C  320B               	rrcf	(___lodiv@divisor+2)^0,f,c
  5265   00335E  320A               	rrcf	(___lodiv@divisor+1)^0,f,c
  5266   003360  3209               	rrcf	___lodiv@divisor^0,f,c
  5267   003362  2E19               	decfsz	___lodiv@counter^0,f,c
  5268   003364  EF77  F019         	goto	l3054
  5269   003368                     l1109:
  5270   003368  C011  F001         	movff	___lodiv@quotient,?___lodiv
  5271   00336C  C012  F002         	movff	___lodiv@quotient+1,?___lodiv+1
  5272   003370  C013  F003         	movff	___lodiv@quotient+2,?___lodiv+2
  5273   003374  C014  F004         	movff	___lodiv@quotient+3,?___lodiv+3
  5274   003378  C015  F005         	movff	___lodiv@quotient+4,?___lodiv+4
  5275   00337C  C016  F006         	movff	___lodiv@quotient+5,?___lodiv+5
  5276   003380  C017  F007         	movff	___lodiv@quotient+6,?___lodiv+6
  5277   003384  C018  F008         	movff	___lodiv@quotient+7,?___lodiv+7
  5278   003388  0012               	return		;funcret
  5279   00338A                     __end_of___lodiv:
  5280                           	callstack 0
  5281                           
  5282 ;; *************** function _memset *****************
  5283 ;; Defined at:
  5284 ;;		line 3 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\memset.c"
  5285 ;; Parameters:    Size  Location     Type
  5286 ;;  dest            1    0[COMRAM] PTR void 
  5287 ;;		 -> lcd_4bit_print_int@str(11), 
  5288 ;;  c               2    1[COMRAM] int 
  5289 ;;  n               2    3[COMRAM] unsigned int 
  5290 ;; Auto vars:     Size  Location     Type
  5291 ;;  p               1    5[COMRAM] PTR unsigned char 
  5292 ;;		 -> lcd_4bit_print_int@str(11), 
  5293 ;; Return value:  Size  Location     Type
  5294 ;;                  1    wreg      PTR void 
  5295 ;; Registers used:
  5296 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5297 ;; Tracked objects:
  5298 ;;		On entry : 0/0
  5299 ;;		On exit  : 0/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5302 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5303 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5305 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5306 ;;Total ram usage:        6 bytes
  5307 ;; Hardware stack levels used: 1
  5308 ;; Hardware stack levels required when called: 2
  5309 ;; This function calls:
  5310 ;;		Nothing
  5311 ;; This function is called by:
  5312 ;;		_convert_int_to_string
  5313 ;; This function uses a non-reentrant model
  5314 ;;
  5315                           
  5316                           	psect	text13
  5317   003D60                     __ptext13:
  5318                           	callstack 0
  5319   003D60                     _memset:
  5320                           	callstack 24
  5321   003D60  C001  F006         	movff	memset@dest,memset@p
  5322   003D64  EFBA  F01E         	goto	l3276
  5323   003D68                     l3272:
  5324   003D68  5006               	movf	memset@p^0,w,c
  5325   003D6A  6ED9               	movwf	fsr2l,c
  5326   003D6C  6ADA               	clrf	fsr2h,c
  5327   003D6E  C002  FFDF         	movff	memset@c,indf2
  5328   003D72  2A06               	incf	memset@p^0,f,c
  5329   003D74                     l3276:
  5330   003D74  0604               	decf	memset@n^0,f,c
  5331   003D76  A0D8               	btfss	status,0,c
  5332   003D78  0605               	decf	(memset@n+1)^0,f,c
  5333   003D7A  2804               	incf	memset@n^0,w,c
  5334   003D7C  E106               	bnz	u2131
  5335   003D7E  2805               	incf	(memset@n+1)^0,w,c
  5336   003D80  A4D8               	btfss	status,2,c
  5337   003D82  EFC5  F01E         	goto	u2131
  5338   003D86  EFC7  F01E         	goto	u2130
  5339   003D8A                     u2131:
  5340   003D8A  EFB4  F01E         	goto	l3272
  5341   003D8E                     u2130:
  5342   003D8E  0012               	return		;funcret
  5343   003D90                     __end_of_memset:
  5344                           	callstack 0
  5345                           
  5346 ;; *************** function _a_power_b *****************
  5347 ;; Defined at:
  5348 ;;		line 403 in file "app.c"
  5349 ;; Parameters:    Size  Location     Type
  5350 ;;  a               1    wreg     unsigned char 
  5351 ;;  b               1    6[COMRAM] unsigned char 
  5352 ;; Auto vars:     Size  Location     Type
  5353 ;;  a               1   11[COMRAM] unsigned char 
  5354 ;;  i               2   12[COMRAM] int 
  5355 ;;  ans             2   14[COMRAM] unsigned int 
  5356 ;; Return value:  Size  Location     Type
  5357 ;;                  2    6[COMRAM] unsigned int 
  5358 ;; Registers used:
  5359 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5360 ;; Tracked objects:
  5361 ;;		On entry : 0/0
  5362 ;;		On exit  : 0/0
  5363 ;;		Unchanged: 0/0
  5364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5365 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5366 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5367 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5368 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5369 ;;Total ram usage:       10 bytes
  5370 ;; Hardware stack levels used: 1
  5371 ;; Hardware stack levels required when called: 3
  5372 ;; This function calls:
  5373 ;;		___wmul
  5374 ;; This function is called by:
  5375 ;;		_calculate_results_binary_octal
  5376 ;; This function uses a non-reentrant model
  5377 ;;
  5378                           
  5379                           	psect	text14
  5380   003A9E                     __ptext14:
  5381                           	callstack 0
  5382   003A9E                     _a_power_b:
  5383                           	callstack 25
  5384                           
  5385                           ;incstack = 0
  5386                           ;a_power_b@a stored from wreg
  5387   003A9E  6E0C               	movwf	a_power_b@a^0,c
  5388   003AA0                     
  5389                           ;app.c: 404:     uint16 ans = 1;
  5390   003AA0  0E00               	movlw	0
  5391   003AA2  6E10               	movwf	(a_power_b@ans+1)^0,c
  5392   003AA4  0E01               	movlw	1
  5393   003AA6  6E0F               	movwf	a_power_b@ans^0,c
  5394                           
  5395                           ;app.c: 405:     for (int i = 0; i < b; i++)
  5396   003AA8  0E00               	movlw	0
  5397   003AAA  6E0E               	movwf	(a_power_b@i+1)^0,c
  5398   003AAC  0E00               	movlw	0
  5399   003AAE  6E0D               	movwf	a_power_b@i^0,c
  5400   003AB0  EF69  F01D         	goto	l3408
  5401   003AB4                     l3404:
  5402                           
  5403                           ;app.c: 406:     {;app.c: 407:         ans *= a;
  5404   003AB4  C00F  F001         	movff	a_power_b@ans,___wmul@multiplier
  5405   003AB8  C010  F002         	movff	a_power_b@ans+1,___wmul@multiplier+1
  5406   003ABC  C00C  F003         	movff	a_power_b@a,___wmul@multiplicand
  5407   003AC0  6A04               	clrf	(___wmul@multiplicand+1)^0,c
  5408   003AC2  ECDE  F01E         	call	___wmul	;wreg free
  5409   003AC6  C001  F00F         	movff	?___wmul,a_power_b@ans
  5410   003ACA  C002  F010         	movff	?___wmul+1,a_power_b@ans+1
  5411   003ACE                     
  5412                           ;app.c: 408:     }
  5413   003ACE  4A0D               	infsnz	a_power_b@i^0,f,c
  5414   003AD0  2A0E               	incf	(a_power_b@i+1)^0,f,c
  5415   003AD2                     l3408:
  5416   003AD2  5007               	movf	a_power_b@b^0,w,c
  5417   003AD4  6E09               	movwf	??_a_power_b^0,c
  5418   003AD6  6A0A               	clrf	(??_a_power_b+1)^0,c
  5419   003AD8  5009               	movf	??_a_power_b^0,w,c
  5420   003ADA  5C0D               	subwf	a_power_b@i^0,w,c
  5421   003ADC  500E               	movf	(a_power_b@i+1)^0,w,c
  5422   003ADE  0A80               	xorlw	128
  5423   003AE0  6E0B               	movwf	(??_a_power_b+2)^0,c
  5424   003AE2  500A               	movf	(??_a_power_b+1)^0,w,c
  5425   003AE4  0A80               	xorlw	128
  5426   003AE6  580B               	subwfb	(??_a_power_b+2)^0,w,c
  5427   003AE8  A0D8               	btfss	status,0,c
  5428   003AEA  EF79  F01D         	goto	u2311
  5429   003AEE  EF7B  F01D         	goto	u2310
  5430   003AF2                     u2311:
  5431   003AF2  EF5A  F01D         	goto	l3404
  5432   003AF6                     u2310:
  5433   003AF6                     
  5434                           ;app.c: 409:     return ans;
  5435   003AF6  C00F  F007         	movff	a_power_b@ans,?_a_power_b
  5436   003AFA  C010  F008         	movff	a_power_b@ans+1,?_a_power_b+1
  5437   003AFE  0012               	return		;funcret
  5438   003B00                     __end_of_a_power_b:
  5439                           	callstack 0
  5440                           
  5441 ;; *************** function ___wmul *****************
  5442 ;; Defined at:
  5443 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul16.c"
  5444 ;; Parameters:    Size  Location     Type
  5445 ;;  multiplier      2    0[COMRAM] unsigned int 
  5446 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5447 ;; Auto vars:     Size  Location     Type
  5448 ;;  product         2    4[COMRAM] unsigned int 
  5449 ;; Return value:  Size  Location     Type
  5450 ;;                  2    0[COMRAM] unsigned int 
  5451 ;; Registers used:
  5452 ;;		wreg, status,2, status,0, prodl, prodh
  5453 ;; Tracked objects:
  5454 ;;		On entry : 0/0
  5455 ;;		On exit  : 0/0
  5456 ;;		Unchanged: 0/0
  5457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5458 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5459 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5461 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5462 ;;Total ram usage:        6 bytes
  5463 ;; Hardware stack levels used: 1
  5464 ;; Hardware stack levels required when called: 2
  5465 ;; This function calls:
  5466 ;;		Nothing
  5467 ;; This function is called by:
  5468 ;;		_calculate_results_binary_octal
  5469 ;;		_a_power_b
  5470 ;; This function uses a non-reentrant model
  5471 ;;
  5472                           
  5473                           	psect	text15
  5474   003DBC                     __ptext15:
  5475                           	callstack 0
  5476   003DBC                     ___wmul:
  5477                           	callstack 25
  5478   003DBC  5001               	movf	___wmul@multiplier^0,w,c
  5479   003DBE  0203               	mulwf	___wmul@multiplicand^0,c
  5480   003DC0  CFF3 F005          	movff	prodl,___wmul@product
  5481   003DC4  CFF4 F006          	movff	prodh,___wmul@product+1
  5482   003DC8  5001               	movf	___wmul@multiplier^0,w,c
  5483   003DCA  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  5484   003DCC  50F3               	movf	243,w,c
  5485   003DCE  2606               	addwf	(___wmul@product+1)^0,f,c
  5486   003DD0  5002               	movf	(___wmul@multiplier+1)^0,w,c
  5487   003DD2  0203               	mulwf	___wmul@multiplicand^0,c
  5488   003DD4  50F3               	movf	243,w,c
  5489   003DD6  2606               	addwf	(___wmul@product+1)^0,f,c
  5490   003DD8  C005  F001         	movff	___wmul@product,?___wmul
  5491   003DDC  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5492   003DE0  0012               	return		;funcret
  5493   003DE2                     __end_of___wmul:
  5494                           	callstack 0
  5495                           
  5496 ;; *************** function ___omul *****************
  5497 ;; Defined at:
  5498 ;;		line 91 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\Umul64.c"
  5499 ;; Parameters:    Size  Location     Type
  5500 ;;  multiplier      8    0[COMRAM] unsigned long long 
  5501 ;;  multiplicand    8    8[COMRAM] unsigned long long 
  5502 ;; Auto vars:     Size  Location     Type
  5503 ;;  product         8   16[COMRAM] unsigned long long 
  5504 ;; Return value:  Size  Location     Type
  5505 ;;                  8    0[COMRAM] unsigned long long 
  5506 ;; Registers used:
  5507 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5508 ;; Tracked objects:
  5509 ;;		On entry : 0/0
  5510 ;;		On exit  : 0/0
  5511 ;;		Unchanged: 0/0
  5512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5513 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5514 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5515 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5516 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5517 ;;Total ram usage:       24 bytes
  5518 ;; Hardware stack levels used: 1
  5519 ;; Hardware stack levels required when called: 2
  5520 ;; This function calls:
  5521 ;;		Nothing
  5522 ;; This function is called by:
  5523 ;;		_print_numbers
  5524 ;;		_calculate_results_decimal
  5525 ;;		_calculate_results_binary_octal
  5526 ;; This function uses a non-reentrant model
  5527 ;;
  5528                           
  5529                           	psect	text16
  5530   003504                     __ptext16:
  5531                           	callstack 0
  5532   003504                     ___omul:
  5533                           	callstack 26
  5534   003504  EE20  F011         	lfsr	2,___omul@product
  5535   003508  0E07               	movlw	7
  5536   00350A                     u2321:
  5537   00350A  6ADE               	clrf	postinc2,c
  5538   00350C  06E8               	decf	wreg,f,c
  5539   00350E  E2FD               	bc	u2321
  5540   003510                     l3412:
  5541   003510  A001               	btfss	___omul@multiplier^0,0,c
  5542   003512  EF8D  F01A         	goto	u2331
  5543   003516  EF8F  F01A         	goto	u2330
  5544   00351A                     u2331:
  5545   00351A  EF9F  F01A         	goto	l3416
  5546   00351E                     u2330:
  5547   00351E  5009               	movf	___omul@multiplicand^0,w,c
  5548   003520  2611               	addwf	___omul@product^0,f,c
  5549   003522  500A               	movf	(___omul@multiplicand+1)^0,w,c
  5550   003524  2212               	addwfc	(___omul@product+1)^0,f,c
  5551   003526  500B               	movf	(___omul@multiplicand+2)^0,w,c
  5552   003528  2213               	addwfc	(___omul@product+2)^0,f,c
  5553   00352A  500C               	movf	(___omul@multiplicand+3)^0,w,c
  5554   00352C  2214               	addwfc	(___omul@product+3)^0,f,c
  5555   00352E  500D               	movf	(___omul@multiplicand+4)^0,w,c
  5556   003530  2215               	addwfc	(___omul@product+4)^0,f,c
  5557   003532  500E               	movf	(___omul@multiplicand+5)^0,w,c
  5558   003534  2216               	addwfc	(___omul@product+5)^0,f,c
  5559   003536  500F               	movf	(___omul@multiplicand+6)^0,w,c
  5560   003538  2217               	addwfc	(___omul@product+6)^0,f,c
  5561   00353A  5010               	movf	(___omul@multiplicand+7)^0,w,c
  5562   00353C  2218               	addwfc	(___omul@product+7)^0,f,c
  5563   00353E                     l3416:
  5564   00353E  90D8               	bcf	status,0,c
  5565   003540  3609               	rlcf	___omul@multiplicand^0,f,c
  5566   003542  360A               	rlcf	(___omul@multiplicand+1)^0,f,c
  5567   003544  360B               	rlcf	(___omul@multiplicand+2)^0,f,c
  5568   003546  360C               	rlcf	(___omul@multiplicand+3)^0,f,c
  5569   003548  360D               	rlcf	(___omul@multiplicand+4)^0,f,c
  5570   00354A  360E               	rlcf	(___omul@multiplicand+5)^0,f,c
  5571   00354C  360F               	rlcf	(___omul@multiplicand+6)^0,f,c
  5572   00354E  3610               	rlcf	(___omul@multiplicand+7)^0,f,c
  5573   003550  90D8               	bcf	status,0,c
  5574   003552  3208               	rrcf	(___omul@multiplier+7)^0,f,c
  5575   003554  3207               	rrcf	(___omul@multiplier+6)^0,f,c
  5576   003556  3206               	rrcf	(___omul@multiplier+5)^0,f,c
  5577   003558  3205               	rrcf	(___omul@multiplier+4)^0,f,c
  5578   00355A  3204               	rrcf	(___omul@multiplier+3)^0,f,c
  5579   00355C  3203               	rrcf	(___omul@multiplier+2)^0,f,c
  5580   00355E  3202               	rrcf	(___omul@multiplier+1)^0,f,c
  5581   003560  3201               	rrcf	___omul@multiplier^0,f,c
  5582   003562  5001               	movf	___omul@multiplier^0,w,c
  5583   003564  1002               	iorwf	(___omul@multiplier+1)^0,w,c
  5584   003566  1003               	iorwf	(___omul@multiplier+2)^0,w,c
  5585   003568  1004               	iorwf	(___omul@multiplier+3)^0,w,c
  5586   00356A  1005               	iorwf	(___omul@multiplier+4)^0,w,c
  5587   00356C  1006               	iorwf	(___omul@multiplier+5)^0,w,c
  5588   00356E  1007               	iorwf	(___omul@multiplier+6)^0,w,c
  5589   003570  1008               	iorwf	(___omul@multiplier+7)^0,w,c
  5590   003572  A4D8               	btfss	status,2,c
  5591   003574  EFBE  F01A         	goto	u2341
  5592   003578  EFC0  F01A         	goto	u2340
  5593   00357C                     u2341:
  5594   00357C  EF88  F01A         	goto	l3412
  5595   003580                     u2340:
  5596   003580  C011  F001         	movff	___omul@product,?___omul
  5597   003584  C012  F002         	movff	___omul@product+1,?___omul+1
  5598   003588  C013  F003         	movff	___omul@product+2,?___omul+2
  5599   00358C  C014  F004         	movff	___omul@product+3,?___omul+3
  5600   003590  C015  F005         	movff	___omul@product+4,?___omul+4
  5601   003594  C016  F006         	movff	___omul@product+5,?___omul+5
  5602   003598  C017  F007         	movff	___omul@product+6,?___omul+6
  5603   00359C  C018  F008         	movff	___omul@product+7,?___omul+7
  5604   0035A0  0012               	return		;funcret
  5605   0035A2                     __end_of___omul:
  5606                           	callstack 0
  5607                           
  5608 ;; *************** function ___lwdiv *****************
  5609 ;; Defined at:
  5610 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.45\pic\sources\c99\common\lwdiv.c"
  5611 ;; Parameters:    Size  Location     Type
  5612 ;;  dividend        2    0[COMRAM] unsigned int 
  5613 ;;  divisor         2    2[COMRAM] unsigned int 
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;  quotient        2    4[COMRAM] unsigned int 
  5616 ;;  counter         1    6[COMRAM] unsigned char 
  5617 ;; Return value:  Size  Location     Type
  5618 ;;                  2    0[COMRAM] unsigned int 
  5619 ;; Registers used:
  5620 ;;		wreg, status,2, status,0
  5621 ;; Tracked objects:
  5622 ;;		On entry : 0/0
  5623 ;;		On exit  : 0/0
  5624 ;;		Unchanged: 0/0
  5625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5626 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5627 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5629 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5630 ;;Total ram usage:        7 bytes
  5631 ;; Hardware stack levels used: 1
  5632 ;; Hardware stack levels required when called: 2
  5633 ;; This function calls:
  5634 ;;		Nothing
  5635 ;; This function is called by:
  5636 ;;		_calculate_results_binary_octal
  5637 ;; This function uses a non-reentrant model
  5638 ;;
  5639                           
  5640                           	psect	text17
  5641   003874                     __ptext17:
  5642                           	callstack 0
  5643   003874                     ___lwdiv:
  5644                           	callstack 26
  5645   003874  0E00               	movlw	0
  5646   003876  6E06               	movwf	(___lwdiv@quotient+1)^0,c
  5647   003878  0E00               	movlw	0
  5648   00387A  6E05               	movwf	___lwdiv@quotient^0,c
  5649   00387C  5003               	movf	___lwdiv@divisor^0,w,c
  5650   00387E  1004               	iorwf	(___lwdiv@divisor+1)^0,w,c
  5651   003880  B4D8               	btfsc	status,2,c
  5652   003882  EF45  F01C         	goto	u2351
  5653   003886  EF47  F01C         	goto	u2350
  5654   00388A                     u2351:
  5655   00388A  EF6F  F01C         	goto	l1162
  5656   00388E                     u2350:
  5657   00388E  0E01               	movlw	1
  5658   003890  6E07               	movwf	___lwdiv@counter^0,c
  5659   003892  EF4F  F01C         	goto	l3428
  5660   003896                     l3426:
  5661   003896  90D8               	bcf	status,0,c
  5662   003898  3603               	rlcf	___lwdiv@divisor^0,f,c
  5663   00389A  3604               	rlcf	(___lwdiv@divisor+1)^0,f,c
  5664   00389C  2A07               	incf	___lwdiv@counter^0,f,c
  5665   00389E                     l3428:
  5666   00389E  AE04               	btfss	(___lwdiv@divisor+1)^0,7,c
  5667   0038A0  EF54  F01C         	goto	u2361
  5668   0038A4  EF56  F01C         	goto	u2360
  5669   0038A8                     u2361:
  5670   0038A8  EF4B  F01C         	goto	l3426
  5671   0038AC                     u2360:
  5672   0038AC                     l3430:
  5673   0038AC  90D8               	bcf	status,0,c
  5674   0038AE  3605               	rlcf	___lwdiv@quotient^0,f,c
  5675   0038B0  3606               	rlcf	(___lwdiv@quotient+1)^0,f,c
  5676   0038B2  5003               	movf	___lwdiv@divisor^0,w,c
  5677   0038B4  5C01               	subwf	___lwdiv@dividend^0,w,c
  5678   0038B6  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  5679   0038B8  5802               	subwfb	(___lwdiv@dividend+1)^0,w,c
  5680   0038BA  A0D8               	btfss	status,0,c
  5681   0038BC  EF62  F01C         	goto	u2371
  5682   0038C0  EF64  F01C         	goto	u2370
  5683   0038C4                     u2371:
  5684   0038C4  EF69  F01C         	goto	l3438
  5685   0038C8                     u2370:
  5686   0038C8  5003               	movf	___lwdiv@divisor^0,w,c
  5687   0038CA  5E01               	subwf	___lwdiv@dividend^0,f,c
  5688   0038CC  5004               	movf	(___lwdiv@divisor+1)^0,w,c
  5689   0038CE  5A02               	subwfb	(___lwdiv@dividend+1)^0,f,c
  5690   0038D0  8005               	bsf	___lwdiv@quotient^0,0,c
  5691   0038D2                     l3438:
  5692   0038D2  90D8               	bcf	status,0,c
  5693   0038D4  3204               	rrcf	(___lwdiv@divisor+1)^0,f,c
  5694   0038D6  3203               	rrcf	___lwdiv@divisor^0,f,c
  5695   0038D8  2E07               	decfsz	___lwdiv@counter^0,f,c
  5696   0038DA  EF56  F01C         	goto	l3430
  5697   0038DE                     l1162:
  5698   0038DE  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  5699   0038E2  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5700   0038E6  0012               	return		;funcret
  5701   0038E8                     __end_of___lwdiv:
  5702                           	callstack 0
  5703                           
  5704 ;; *************** function _mode_select_menu *****************
  5705 ;; Defined at:
  5706 ;;		line 296 in file "app.c"
  5707 ;; Parameters:    Size  Location     Type
  5708 ;;		None
  5709 ;; Auto vars:     Size  Location     Type
  5710 ;;		None
  5711 ;; Return value:  Size  Location     Type
  5712 ;;                  1    wreg      void 
  5713 ;; Registers used:
  5714 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5715 ;; Tracked objects:
  5716 ;;		On entry : 0/0
  5717 ;;		On exit  : 0/0
  5718 ;;		Unchanged: 0/0
  5719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5722 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5723 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5724 ;;Total ram usage:        2 bytes
  5725 ;; Hardware stack levels used: 1
  5726 ;; Hardware stack levels required when called: 6
  5727 ;; This function calls:
  5728 ;;		_keypad_get_value
  5729 ;;		_lcd_4bit_print_string
  5730 ;;		_lcd_4bit_send_command
  5731 ;;		_lcd_4bit_set_cursor
  5732 ;; This function is called by:
  5733 ;;		_main
  5734 ;; This function uses a non-reentrant model
  5735 ;;
  5736                           
  5737                           	psect	text18
  5738   002888                     __ptext18:
  5739                           	callstack 0
  5740   002888                     _mode_select_menu:
  5741                           	callstack 24
  5742   002888                     
  5743                           ;app.c: 297:     key = 0; Num1 = 0; Num2 = 0; Num = 0;
  5744   002888  0E00               	movlw	0
  5745   00288A  0100               	movlb	0	; () banked
  5746   00288C  6FF5               	movwf	_key& (0+255),b
  5747   00288E                     
  5748                           ; BSR set to: 0
  5749   00288E  EE20  F0ED         	lfsr	2,_Num1
  5750   002892  0E07               	movlw	7
  5751   002894                     u4121:
  5752   002894  6ADE               	clrf	postinc2,c
  5753   002896  06E8               	decf	wreg,f,c
  5754   002898  E2FD               	bc	u4121
  5755   00289A                     
  5756                           ; BSR set to: 0
  5757   00289A  EE20  F0E5         	lfsr	2,_Num2
  5758   00289E  0E07               	movlw	7
  5759   0028A0                     u4131:
  5760   0028A0  6ADE               	clrf	postinc2,c
  5761   0028A2  06E8               	decf	wreg,f,c
  5762   0028A4  E2FD               	bc	u4131
  5763   0028A6                     
  5764                           ; BSR set to: 0
  5765   0028A6  EE20  F0D3         	lfsr	2,_Num
  5766   0028AA  0E07               	movlw	7
  5767   0028AC                     u4141:
  5768   0028AC  6ADE               	clrf	postinc2,c
  5769   0028AE  06E8               	decf	wreg,f,c
  5770   0028B0  E2FD               	bc	u4141
  5771   0028B2                     
  5772                           ; BSR set to: 0
  5773                           ;app.c: 298:     ret = lcd_4bit_send_command(&lcd, 0x01);
  5774   0028B2  0EFA               	movlw	low _lcd
  5775   0028B4  6E12               	movwf	lcd_4bit_send_command@LCD^0,c
  5776   0028B6  0E01               	movlw	1
  5777   0028B8  6E13               	movwf	lcd_4bit_send_command@command^0,c
  5778   0028BA  ECAF  F01D         	call	_lcd_4bit_send_command	;wreg free
  5779   0028BE  0101               	movlb	1	; () banked
  5780   0028C0  6F5F               	movwf	_ret& (0+255),b
  5781   0028C2                     
  5782                           ; BSR set to: 1
  5783                           ;app.c: 299:     _delay((unsigned long)((10)*(4000000UL/4000.0)));
  5784   0028C2  0E0D               	movlw	13
  5785   0028C4  6E1C               	movwf	??_mode_select_menu^0,c
  5786   0028C6  0EFC               	movlw	252
  5787   0028C8                     u4817:
  5788   0028C8  2EE8               	decfsz	wreg,f,c
  5789   0028CA  D7FE               	bra	u4817
  5790   0028CC  2E1C               	decfsz	??_mode_select_menu^0,f,c
  5791   0028CE  D7FC               	bra	u4817
  5792   0028D0                     
  5793                           ;app.c: 300:     ret = lcd_4bit_print_string(&lcd, "1- Dec   2- Oct");
  5794   0028D0  0EFA               	movlw	low _lcd
  5795   0028D2  6E16               	movwf	lcd_4bit_print_string@LCD^0,c
  5796   0028D4  0E33               	movlw	low STR_3
  5797   0028D6  6E17               	movwf	lcd_4bit_print_string@Str^0,c
  5798   0028D8  5017               	movf	lcd_4bit_print_string@Str^0,w,c
  5799   0028DA  A4D8               	btfss	status,2,c
  5800   0028DC  0E10               	movlw	high __smallconst
  5801   0028DE  6E18               	movwf	(lcd_4bit_print_string@Str+1)^0,c
  5802   0028E0  ECF8  F01B         	call	_lcd_4bit_print_string	;wreg free
  5803   0028E4  0101               	movlb	1	; () banked
  5804   0028E6  6F5F               	movwf	_ret& (0+255),b
  5805   0028E8                     
  5806                           ; BSR set to: 1
  5807                           ;app.c: 301:     ret = lcd_4bit_set_cursor(&lcd, 1, 2);
  5808   0028E8  0EFA               	movlw	low _lcd
  5809   0028EA  6E16               	movwf	lcd_4bit_set_cursor@LCD^0,c
  5810   0028EC  0E01               	movlw	1
  5811   0028EE  6E17               	movwf	lcd_4bit_set_cursor@Cols^0,c
  5812   0028F0  0E02               	movlw	2
  5813   0028F2  6E18               	movwf	lcd_4bit_set_cursor@Rows^0,c
  5814   0028F4  EC74  F01C         	call	_lcd_4bit_set_cursor	;wreg free
  5815   0028F8  0101               	movlb	1	; () banked
  5816   0028FA  6F5F               	movwf	_ret& (0+255),b
  5817   0028FC                     
  5818                           ; BSR set to: 1
  5819                           ;app.c: 302:     ret = lcd_4bit_print_string(&lcd, "     3- Bin");
  5820   0028FC  0EFA               	movlw	low _lcd
  5821   0028FE  6E16               	movwf	lcd_4bit_print_string@LCD^0,c
  5822   002900  0E43               	movlw	low STR_4
  5823   002902  6E17               	movwf	lcd_4bit_print_string@Str^0,c
  5824   002904  5017               	movf	lcd_4bit_print_string@Str^0,w,c
  5825   002906  A4D8               	btfss	status,2,c
  5826   002908  0E10               	movlw	high __smallconst
  5827   00290A  6E18               	movwf	(lcd_4bit_print_string@Str+1)^0,c
  5828   00290C  ECF8  F01B         	call	_lcd_4bit_print_string	;wreg free
  5829   002910  0101               	movlb	1	; () banked
  5830   002912  6F5F               	movwf	_ret& (0+255),b
  5831                           
  5832                           ;app.c: 303:     while(!('1' == key || '2' == key || '3' == key))
  5833   002914  EF96  F014         	goto	l5266
  5834   002918                     l5264:
  5835                           
  5836                           ; BSR set to: 0
  5837                           ;app.c: 304:     {;app.c: 305:         ret = keypad_get_value(&keypad, &key);
  5838   002918  0E2E               	movlw	low _keypad
  5839   00291A  6E0B               	movwf	keypad_get_value@keypad^0,c
  5840   00291C  0E01               	movlw	high _keypad
  5841   00291E  6E0C               	movwf	(keypad_get_value@keypad+1)^0,c
  5842   002920  0EF5               	movlw	low _key
  5843   002922  6E0D               	movwf	keypad_get_value@value^0,c
  5844   002924  EC24  F016         	call	_keypad_get_value	;wreg free
  5845   002928  0101               	movlb	1	; () banked
  5846   00292A  6F5F               	movwf	_ret& (0+255),b
  5847   00292C                     l5266:
  5848                           
  5849                           ; BSR set to: 1
  5850                           ;app.c: 303:     while(!('1' == key || '2' == key || '3' == key))
  5851   00292C  0E31               	movlw	49
  5852   00292E  0100               	movlb	0	; () banked
  5853   002930  19F5               	xorwf	_key& (0+255),w,b
  5854   002932  B4D8               	btfsc	status,2,c
  5855   002934  EF9E  F014         	goto	u4151
  5856   002938  EFA0  F014         	goto	u4150
  5857   00293C                     u4151:
  5858   00293C  EF10  F015         	goto	l5296
  5859   002940                     u4150:
  5860   002940                     
  5861                           ; BSR set to: 0
  5862   002940  0E32               	movlw	50
  5863   002942  19F5               	xorwf	_key& (0+255),w,b
  5864   002944  B4D8               	btfsc	status,2,c
  5865   002946  EFA7  F014         	goto	u4161
  5866   00294A  EFA9  F014         	goto	u4160
  5867   00294E                     u4161:
  5868   00294E  EF10  F015         	goto	l5296
  5869   002952                     u4160:
  5870   002952                     
  5871                           ; BSR set to: 0
  5872   002952  0E33               	movlw	51
  5873   002954  19F5               	xorwf	_key& (0+255),w,b
  5874   002956  A4D8               	btfss	status,2,c
  5875   002958  EFB0  F014         	goto	u4171
  5876   00295C  EFB2  F014         	goto	u4170
  5877   002960                     u4171:
  5878   002960  EF8C  F014         	goto	l5264
  5879   002964                     u4170:
  5880   002964  EF10  F015         	goto	l5296
  5881   002968                     l5272:
  5882                           
  5883                           ; BSR set to: 0
  5884                           ;app.c: 309:             mode = '1';
  5885   002968  0E31               	movlw	49
  5886   00296A  6FF7               	movwf	_mode& (0+255),b
  5887   00296C                     
  5888                           ; BSR set to: 0
  5889                           ;app.c: 310:             ret = lcd_4bit_send_command(&lcd, 0x01);
  5890   00296C  0EFA               	movlw	low _lcd
  5891   00296E  6E12               	movwf	lcd_4bit_send_command@LCD^0,c
  5892   002970  0E01               	movlw	1
  5893   002972  6E13               	movwf	lcd_4bit_send_command@command^0,c
  5894   002974  ECAF  F01D         	call	_lcd_4bit_send_command	;wreg free
  5895   002978  0101               	movlb	1	; () banked
  5896   00297A  6F5F               	movwf	_ret& (0+255),b
  5897   00297C                     
  5898                           ; BSR set to: 1
  5899                           ;app.c: 311:             _delay((unsigned long)((10)*(4000000UL/4000.0)));
  5900   00297C  0E0D               	movlw	13
  5901   00297E  6E1C               	movwf	??_mode_select_menu^0,c
  5902   002980  0EFC               	movlw	252
  5903   002982                     u4827:
  5904   002982  2EE8               	decfsz	wreg,f,c
  5905   002984  D7FE               	bra	u4827
  5906   002986  2E1C               	decfsz	??_mode_select_menu^0,f,c
  5907   002988  D7FC               	bra	u4827
  5908   00298A                     
  5909                           ;app.c: 312:             ret = lcd_4bit_print_string(&lcd, "  Decimal Mode  ");
  5910   00298A  0EFA               	movlw	low _lcd
  5911   00298C  6E16               	movwf	lcd_4bit_print_string@LCD^0,c
  5912   00298E  0E12               	movlw	low STR_2
  5913   002990  6E17               	movwf	lcd_4bit_print_string@Str^0,c
  5914   002992  5017               	movf	lcd_4bit_print_string@Str^0,w,c
  5915   002994  A4D8               	btfss	status,2,c
  5916   002996  0E10               	movlw	high __smallconst
  5917   002998  6E18               	movwf	(lcd_4bit_print_string@Str+1)^0,c
  5918   00299A  ECF8  F01B         	call	_lcd_4bit_print_string	;wreg free
  5919   00299E  0101               	movlb	1	; () banked
  5920   0029A0  6F5F               	movwf	_ret& (0+255),b
  5921   0029A2                     l5280:
  5922                           
  5923                           ;app.c: 314:             mode = '2';
  5924   0029A2  0E32               	movlw	50
  5925   0029A4  0100               	movlb	0	; () banked
  5926   0029A6  6FF7               	movwf	_mode& (0+255),b
  5927   0029A8                     
  5928                           ; BSR set to: 0
  5929                           ;app.c: 315:             ret = lcd_4bit_send_command(&lcd, 0x01);
  5930   0029A8  0EFA               	movlw	low _lcd
  5931   0029AA  6E12               	movwf	lcd_4bit_send_command@LCD^0,c
  5932   0029AC  0E01               	movlw	1
  5933   0029AE  6E13               	movwf	lcd_4bit_send_command@command^0,c
  5934   0029B0  ECAF  F01D         	call	_lcd_4bit_send_command	;wreg free
  5935   0029B4  0101               	movlb	1	; () banked
  5936   0029B6  6F5F               	movwf	_ret& (0+255),b
  5937   0029B8                     
  5938                           ; BSR set to: 1
  5939                           ;app.c: 316:             _delay((unsigned long)((10)*(4000000UL/4000.0)));
  5940   0029B8  0E0D               	movlw	13
  5941   0029BA  6E1C               	movwf	??_mode_select_menu^0,c
  5942   0029BC  0EFC               	movlw	252
  5943   0029BE                     u4837:
  5944   0029BE  2EE8               	decfsz	wreg,f,c
  5945   0029C0  D7FE               	bra	u4837
  5946   0029C2  2E1C               	decfsz	??_mode_select_menu^0,f,c
  5947   0029C4  D7FC               	bra	u4837
  5948                           
  5949                           ;app.c: 317:             ret = lcd_4bit_print_string(&lcd, "   Octal Mode   ");
  5950   0029C6  0EFA               	movlw	low _lcd
  5951   0029C8  6E16               	movwf	lcd_4bit_print_string@LCD^0,c
  5952   0029CA  0E01               	movlw	low STR_6
  5953   0029CC  6E17               	movwf	lcd_4bit_print_string@Str^0,c
  5954   0029CE  5017               	movf	lcd_4bit_print_string@Str^0,w,c
  5955   0029D0  A4D8               	btfss	status,2,c
  5956   0029D2  0E10               	movlw	high __smallconst
  5957   0029D4  6E18               	movwf	(lcd_4bit_print_string@Str+1)^0,c
  5958   0029D6  ECF8  F01B         	call	_lcd_4bit_print_string	;wreg free
  5959   0029DA  0101               	movlb	1	; () banked
  5960   0029DC  6F5F               	movwf	_ret& (0+255),b
  5961                           
  5962                           ;app.c: 318:             break;
  5963   0029DE  EF29  F015         	goto	l5298
  5964   0029E2                     l5286:
  5965                           
  5966                           ; BSR set to: 0
  5967                           ;app.c: 320:             mode = '3';
  5968   0029E2  0E33               	movlw	51
  5969   0029E4  6FF7               	movwf	_mode& (0+255),b
  5970   0029E6                     
  5971                           ; BSR set to: 0
  5972                           ;app.c: 321:             ret = lcd_4bit_send_command(&lcd, 0x01);
  5973   0029E6  0EFA               	movlw	low _lcd
  5974   0029E8  6E12               	movwf	lcd_4bit_send_command@LCD^0,c
  5975   0029EA  0E01               	movlw	1
  5976   0029EC  6E13               	movwf	lcd_4bit_send_command@command^0,c
  5977   0029EE  ECAF  F01D         	call	_lcd_4bit_send_command	;wreg free
  5978   0029F2  0101               	movlb	1	; () banked
  5979   0029F4  6F5F               	movwf	_ret& (0+255),b
  5980   0029F6                     
  5981                           ; BSR set to: 1
  5982                           ;app.c: 322:             _delay((unsigned long)((10)*(4000000UL/4000.0)));
  5983   0029F6  0E0D               	movlw	13
  5984   0029F8  6E1C               	movwf	??_mode_select_menu^0,c
  5985   0029FA  0EFC               	movlw	252
  5986   0029FC                     u4847:
  5987   0029FC  2EE8               	decfsz	wreg,f,c
  5988   0029FE  D7FE               	bra	u4847
  5989   002A00  2E1C               	decfsz	??_mode_select_menu^0,f,c
  5990   002A02  D7FC               	bra	u4847
  5991   002A04                     
  5992                           ;app.c: 323:             ret = lcd_4bit_print_string(&lcd, "  Binary Mode  ");
  5993   002A04  0EFA               	movlw	low _lcd
  5994   002A06  6E16               	movwf	lcd_4bit_print_string@LCD^0,c
  5995   002A08  0E23               	movlw	low STR_7
  5996   002A0A  6E17               	movwf	lcd_4bit_print_string@Str^0,c
  5997   002A0C  5017               	movf	lcd_4bit_print_string@Str^0,w,c
  5998   002A0E  A4D8               	btfss	status,2,c
  5999   002A10  0E10               	movlw	high __smallconst
  6000   002A12  6E18               	movwf	(lcd_4bit_print_string@Str+1)^0,c
  6001   002A14  ECF8  F01B         	call	_lcd_4bit_print_string	;wreg free
  6002   002A18  0101               	movlb	1	; () banked
  6003   002A1A  6F5F               	movwf	_ret& (0+255),b
  6004                           
  6005                           ;app.c: 324:             break;
  6006   002A1C  EF29  F015         	goto	l5298
  6007   002A20                     l5296:
  6008                           
  6009                           ; BSR set to: 0
  6010   002A20  51F5               	movf	_key& (0+255),w,b
  6011   002A22  6E1C               	movwf	??_mode_select_menu^0,c
  6012   002A24  6A1D               	clrf	(??_mode_select_menu+1)^0,c
  6013                           
  6014                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6015                           ; Switch size 1, requested type "simple"
  6016                           ; Number of cases is 1, Range of values is 0 to 0
  6017                           ; switch strategies available:
  6018                           ; Name         Instructions Cycles
  6019                           ; simple_byte            4     3 (average)
  6020                           ;	Chosen strategy is simple_byte
  6021   002A26  501D               	movf	(??_mode_select_menu+1)^0,w,c
  6022   002A28  0A00               	xorlw	0	; case 0
  6023   002A2A  B4D8               	btfsc	status,2,c
  6024   002A2C  EF1A  F015         	goto	l6080
  6025   002A30  EF29  F015         	goto	l5298
  6026   002A34                     l6080:
  6027                           
  6028                           ; BSR set to: 0
  6029                           ; Switch size 1, requested type "simple"
  6030                           ; Number of cases is 3, Range of values is 49 to 51
  6031                           ; switch strategies available:
  6032                           ; Name         Instructions Cycles
  6033                           ; simple_byte           10     6 (average)
  6034                           ;	Chosen strategy is simple_byte
  6035   002A34  501C               	movf	??_mode_select_menu^0,w,c
  6036   002A36  0A31               	xorlw	49	; case 49
  6037   002A38  B4D8               	btfsc	status,2,c
  6038   002A3A  EFB4  F014         	goto	l5272
  6039   002A3E  0A03               	xorlw	3	; case 50
  6040   002A40  B4D8               	btfsc	status,2,c
  6041   002A42  EFD1  F014         	goto	l5280
  6042   002A46  0A01               	xorlw	1	; case 51
  6043   002A48  B4D8               	btfsc	status,2,c
  6044   002A4A  EFF1  F014         	goto	l5286
  6045   002A4E  EF29  F015         	goto	l5298
  6046   002A52                     l5298:
  6047                           
  6048                           ;app.c: 326:     _delay((unsigned long)((1000)*(4000000UL/4000.0)));
  6049   002A52  0E06               	movlw	6
  6050   002A54  6E1D               	movwf	(??_mode_select_menu+1)^0,c
  6051   002A56  0E13               	movlw	19
  6052   002A58  6E1C               	movwf	??_mode_select_menu^0,c
  6053   002A5A  0EAE               	movlw	174
  6054   002A5C                     u4857:
  6055   002A5C  2EE8               	decfsz	wreg,f,c
  6056   002A5E  D7FE               	bra	u4857
  6057   002A60  2E1C               	decfsz	??_mode_select_menu^0,f,c
  6058   002A62  D7FC               	bra	u4857
  6059   002A64  2E1D               	decfsz	(??_mode_select_menu+1)^0,f,c
  6060   002A66  D7FA               	bra	u4857
  6061   002A68                     
  6062                           ;app.c: 327:     ret = lcd_4bit_send_command(&lcd, 0x01);
  6063   002A68  0EFA               	movlw	low _lcd
  6064   002A6A  6E12               	movwf	lcd_4bit_send_command@LCD^0,c
  6065   002A6C  0E01               	movlw	1
  6066   002A6E  6E13               	movwf	lcd_4bit_send_command@command^0,c
  6067   002A70  ECAF  F01D         	call	_lcd_4bit_send_command	;wreg free
  6068   002A74  0101               	movlb	1	; () banked
  6069   002A76  6F5F               	movwf	_ret& (0+255),b
  6070   002A78                     
  6071                           ; BSR set to: 1
  6072                           ;app.c: 328:     _delay((unsigned long)((10)*(4000000UL/4000.0)));
  6073   002A78  0E0D               	movlw	13
  6074   002A7A  6E1C               	movwf	??_mode_select_menu^0,c
  6075   002A7C  0EFC               	movlw	252
  6076   002A7E                     u4867:
  6077   002A7E  2EE8               	decfsz	wreg,f,c
  6078   002A80  D7FE               	bra	u4867
  6079   002A82  2E1C               	decfsz	??_mode_select_menu^0,f,c
  6080   002A84  D7FC               	bra	u4867
  6081   002A86                     
  6082                           ;app.c: 329:     key = 0;
  6083   002A86  0E00               	movlw	0
  6084   002A88  0100               	movlb	0	; () banked
  6085   002A8A  6FF5               	movwf	_key& (0+255),b
  6086   002A8C                     
  6087                           ; BSR set to: 0
  6088   002A8C  0012               	return		;funcret
  6089   002A8E                     __end_of_mode_select_menu:
  6090                           	callstack 0
  6091                           
  6092 ;; *************** function _lcd_4bit_set_cursor *****************
  6093 ;; Defined at:
  6094 ;;		line 76 in file "ECU-Layer/LCD/ecu_lcd.c"
  6095 ;; Parameters:    Size  Location     Type
  6096 ;;  LCD             1   21[COMRAM] PTR const struct .
  6097 ;;		 -> lcd(6), 
  6098 ;;  Cols            1   22[COMRAM] unsigned char 
  6099 ;;  Rows            1   23[COMRAM] unsigned char 
  6100 ;; Auto vars:     Size  Location     Type
  6101 ;;  ret             1   26[COMRAM] unsigned char 
  6102 ;; Return value:  Size  Location     Type
  6103 ;;                  1    wreg      unsigned char 
  6104 ;; Registers used:
  6105 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6106 ;; Tracked objects:
  6107 ;;		On entry : 0/0
  6108 ;;		On exit  : 0/0
  6109 ;;		Unchanged: 0/0
  6110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6111 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6112 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6113 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6114 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6115 ;;Total ram usage:        6 bytes
  6116 ;; Hardware stack levels used: 1
  6117 ;; Hardware stack levels required when called: 5
  6118 ;; This function calls:
  6119 ;;		_lcd_4bit_send_command
  6120 ;; This function is called by:
  6121 ;;		_calculate_results_decimal
  6122 ;;		_mode_select_menu
  6123 ;;		_calculate_results_binary_octal
  6124 ;; This function uses a non-reentrant model
  6125 ;;
  6126                           
  6127                           	psect	text19
  6128   0038E8                     __ptext19:
  6129                           	callstack 0
  6130   0038E8                     _lcd_4bit_set_cursor:
  6131                           	callstack 23
  6132   0038E8                     
  6133                           ;ECU-Layer/LCD/ecu_lcd.c: 78:     if(((void*)0) == LCD){
  6134   0038E8  5016               	movf	lcd_4bit_set_cursor@LCD^0,w,c
  6135   0038EA  A4D8               	btfss	status,2,c
  6136   0038EC  EF7A  F01C         	goto	u3811
  6137   0038F0  EF7C  F01C         	goto	u3810
  6138   0038F4                     u3811:
  6139   0038F4  EF80  F01C         	goto	l4884
  6140   0038F8                     u3810:
  6141   0038F8                     l4882:
  6142                           
  6143                           ;ECU-Layer/LCD/ecu_lcd.c: 79:         ret = (Std_ReturnType)0x00;
  6144   0038F8  0E00               	movlw	0
  6145   0038FA  6E1B               	movwf	lcd_4bit_set_cursor@ret^0,c
  6146                           
  6147                           ;ECU-Layer/LCD/ecu_lcd.c: 80:     }
  6148   0038FC  EFAC  F01C         	goto	l4896
  6149   003900                     l4884:
  6150                           
  6151                           ;ECU-Layer/LCD/ecu_lcd.c: 82:         Cols--;
  6152   003900  0617               	decf	lcd_4bit_set_cursor@Cols^0,f,c
  6153                           
  6154                           ;ECU-Layer/LCD/ecu_lcd.c: 83:         switch(Rows){
  6155   003902  EF97  F01C         	goto	l4894
  6156   003906                     l4886:
  6157                           
  6158                           ;ECU-Layer/LCD/ecu_lcd.c: 85:                 ret = lcd_4bit_send_command(LCD, 0x80 + Co
      +                          ls);
  6159   003906  C016  F012         	movff	lcd_4bit_set_cursor@LCD,lcd_4bit_send_command@LCD
  6160   00390A  5017               	movf	lcd_4bit_set_cursor@Cols^0,w,c
  6161   00390C  0F80               	addlw	128
  6162   00390E  6E13               	movwf	lcd_4bit_send_command@command^0,c
  6163   003910  ECAF  F01D         	call	_lcd_4bit_send_command	;wreg free
  6164   003914  6E1B               	movwf	lcd_4bit_set_cursor@ret^0,c
  6165                           
  6166                           ;ECU-Layer/LCD/ecu_lcd.c: 86:                 break;
  6167   003916  EFAC  F01C         	goto	l4896
  6168   00391A                     l4888:
  6169                           
  6170                           ;ECU-Layer/LCD/ecu_lcd.c: 88:                 ret = lcd_4bit_send_command(LCD, 0xC0 + Co
      +                          ls);
  6171   00391A  C016  F012         	movff	lcd_4bit_set_cursor@LCD,lcd_4bit_send_command@LCD
  6172   00391E  5017               	movf	lcd_4bit_set_cursor@Cols^0,w,c
  6173   003920  0FC0               	addlw	192
  6174   003922  6E13               	movwf	lcd_4bit_send_command@command^0,c
  6175   003924  ECAF  F01D         	call	_lcd_4bit_send_command	;wreg free
  6176   003928  6E1B               	movwf	lcd_4bit_set_cursor@ret^0,c
  6177                           
  6178                           ;ECU-Layer/LCD/ecu_lcd.c: 89:                 break;
  6179   00392A  EFAC  F01C         	goto	l4896
  6180   00392E                     l4894:
  6181   00392E  5018               	movf	lcd_4bit_set_cursor@Rows^0,w,c
  6182   003930  6E19               	movwf	??_lcd_4bit_set_cursor^0,c
  6183   003932  6A1A               	clrf	(??_lcd_4bit_set_cursor+1)^0,c
  6184                           
  6185                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6186                           ; Switch size 1, requested type "simple"
  6187                           ; Number of cases is 1, Range of values is 0 to 0
  6188                           ; switch strategies available:
  6189                           ; Name         Instructions Cycles
  6190                           ; simple_byte            4     3 (average)
  6191                           ;	Chosen strategy is simple_byte
  6192   003934  501A               	movf	(??_lcd_4bit_set_cursor+1)^0,w,c
  6193   003936  0A00               	xorlw	0	; case 0
  6194   003938  B4D8               	btfsc	status,2,c
  6195   00393A  EFA1  F01C         	goto	l6082
  6196   00393E  EF7C  F01C         	goto	l4882
  6197   003942                     l6082:
  6198                           
  6199                           ; Switch size 1, requested type "simple"
  6200                           ; Number of cases is 2, Range of values is 1 to 2
  6201                           ; switch strategies available:
  6202                           ; Name         Instructions Cycles
  6203                           ; simple_byte            7     4 (average)
  6204                           ;	Chosen strategy is simple_byte
  6205   003942  5019               	movf	??_lcd_4bit_set_cursor^0,w,c
  6206   003944  0A01               	xorlw	1	; case 1
  6207   003946  B4D8               	btfsc	status,2,c
  6208   003948  EF83  F01C         	goto	l4886
  6209   00394C  0A03               	xorlw	3	; case 2
  6210   00394E  B4D8               	btfsc	status,2,c
  6211   003950  EF8D  F01C         	goto	l4888
  6212   003954  EF7C  F01C         	goto	l4882
  6213   003958                     l4896:
  6214                           
  6215                           ;ECU-Layer/LCD/ecu_lcd.c: 95:     return ret;
  6216   003958  501B               	movf	lcd_4bit_set_cursor@ret^0,w,c
  6217   00395A  0012               	return		;funcret
  6218   00395C                     __end_of_lcd_4bit_set_cursor:
  6219                           	callstack 0
  6220                           
  6221 ;; *************** function _lcd_4bit_print_string *****************
  6222 ;; Defined at:
  6223 ;;		line 99 in file "ECU-Layer/LCD/ecu_lcd.c"
  6224 ;; Parameters:    Size  Location     Type
  6225 ;;  LCD             1   21[COMRAM] PTR const struct .
  6226 ;;		 -> lcd(6), 
  6227 ;;  Str             2   22[COMRAM] PTR unsigned char 
  6228 ;;		 -> STR_7(16), STR_6(17), STR_5(17), STR_4(12), 
  6229 ;;		 -> STR_3(16), STR_2(17), lcd_4bit_print_int@str(11), 
  6230 ;; Auto vars:     Size  Location     Type
  6231 ;;  ret             1   24[COMRAM] unsigned char 
  6232 ;; Return value:  Size  Location     Type
  6233 ;;                  1    wreg      unsigned char 
  6234 ;; Registers used:
  6235 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6236 ;; Tracked objects:
  6237 ;;		On entry : 0/0
  6238 ;;		On exit  : 0/0
  6239 ;;		Unchanged: 0/0
  6240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6241 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6242 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6244 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6245 ;;Total ram usage:        4 bytes
  6246 ;; Hardware stack levels used: 1
  6247 ;; Hardware stack levels required when called: 5
  6248 ;; This function calls:
  6249 ;;		_lcd_4bit_print_char
  6250 ;; This function is called by:
  6251 ;;		_lcd_4bit_print_int
  6252 ;;		_main
  6253 ;;		_mode_select_menu
  6254 ;; This function uses a non-reentrant model
  6255 ;;
  6256                           
  6257                           	psect	text20
  6258   0037F0                     __ptext20:
  6259                           	callstack 0
  6260   0037F0                     _lcd_4bit_print_string:
  6261                           	callstack 22
  6262   0037F0                     
  6263                           ;ECU-Layer/LCD/ecu_lcd.c: 100:     Std_ReturnType ret = (Std_ReturnType)0x01;
  6264   0037F0  0E01               	movlw	1
  6265   0037F2  6E19               	movwf	lcd_4bit_print_string@ret^0,c
  6266                           
  6267                           ;ECU-Layer/LCD/ecu_lcd.c: 101:     if(((void*)0) == LCD){
  6268   0037F4  5016               	movf	lcd_4bit_print_string@LCD^0,w,c
  6269   0037F6  A4D8               	btfss	status,2,c
  6270   0037F8  EF00  F01C         	goto	u3681
  6271   0037FC  EF02  F01C         	goto	u3680
  6272   003800                     u3681:
  6273   003800  EF1F  F01C         	goto	l4836
  6274   003804                     u3680:
  6275   003804                     
  6276                           ;ECU-Layer/LCD/ecu_lcd.c: 102:         ret = (Std_ReturnType)0x00;
  6277   003804  0E00               	movlw	0
  6278   003806  6E19               	movwf	lcd_4bit_print_string@ret^0,c
  6279                           
  6280                           ;ECU-Layer/LCD/ecu_lcd.c: 103:     }
  6281   003808  EF38  F01C         	goto	l4838
  6282   00380C                     l4832:
  6283                           
  6284                           ;ECU-Layer/LCD/ecu_lcd.c: 106:         {;ECU-Layer/LCD/ecu_lcd.c: 107:             ret =
      +                           lcd_4bit_print_char(LCD, *(Str++));
  6285   00380C  C016  F012         	movff	lcd_4bit_print_string@LCD,lcd_4bit_print_char@LCD
  6286   003810  C017  FFF6         	movff	lcd_4bit_print_string@Str,tblptrl
  6287   003814  C018  FFF7         	movff	lcd_4bit_print_string@Str+1,tblptrh
  6288   003818  0E00               	movlw	low (__smallconst shr (0+16))
  6289   00381A  6EF8               	movwf	tblptru,c
  6290   00381C  0E0F               	movlw	(high __ramtop+-1)
  6291   00381E  64F7               	cpfsgt	tblptrh,c
  6292   003820  D003               	bra	u3697
  6293   003822  0008               	tblrd		*
  6294   003824  50F5               	movf	tablat,w,c
  6295   003826  D005               	bra	u3690
  6296   003828                     u3697:
  6297   003828  CFF6 FFE9          	movff	tblptrl,fsr0l
  6298   00382C  CFF7 FFEA          	movff	tblptrh,fsr0h
  6299   003830  50EF               	movf	indf0,w,c
  6300   003832                     u3690:
  6301   003832  6E13               	movwf	lcd_4bit_print_char@data^0,c
  6302   003834  EC80  F01D         	call	_lcd_4bit_print_char	;wreg free
  6303   003838  6E19               	movwf	lcd_4bit_print_string@ret^0,c
  6304   00383A  4A17               	infsnz	lcd_4bit_print_string@Str^0,f,c
  6305   00383C  2A18               	incf	(lcd_4bit_print_string@Str+1)^0,f,c
  6306   00383E                     l4836:
  6307                           
  6308                           ;ECU-Layer/LCD/ecu_lcd.c: 105:         while(*Str)
  6309   00383E  C017  FFF6         	movff	lcd_4bit_print_string@Str,tblptrl
  6310   003842  C018  FFF7         	movff	lcd_4bit_print_string@Str+1,tblptrh
  6311   003846  0E00               	movlw	low (__smallconst shr (0+16))
  6312   003848  6EF8               	movwf	tblptru,c
  6313   00384A  0E0F               	movlw	(high __ramtop+-1)
  6314   00384C  64F7               	cpfsgt	tblptrh,c
  6315   00384E  D003               	bra	u3707
  6316   003850  0008               	tblrd		*
  6317   003852  50F5               	movf	tablat,w,c
  6318   003854  D005               	bra	u3700
  6319   003856                     u3707:
  6320   003856  CFF6 FFE9          	movff	tblptrl,fsr0l
  6321   00385A  CFF7 FFEA          	movff	tblptrh,fsr0h
  6322   00385E  50EF               	movf	indf0,w,c
  6323   003860                     u3700:
  6324   003860  0900               	iorlw	0
  6325   003862  A4D8               	btfss	status,2,c
  6326   003864  EF36  F01C         	goto	u3711
  6327   003868  EF38  F01C         	goto	u3710
  6328   00386C                     u3711:
  6329   00386C  EF06  F01C         	goto	l4832
  6330   003870                     u3710:
  6331   003870                     l4838:
  6332                           
  6333                           ;ECU-Layer/LCD/ecu_lcd.c: 110:     return ret;
  6334   003870  5019               	movf	lcd_4bit_print_string@ret^0,w,c
  6335   003872  0012               	return		;funcret
  6336   003874                     __end_of_lcd_4bit_print_string:
  6337                           	callstack 0
  6338                           
  6339 ;; *************** function _lcd_4bit_print_char *****************
  6340 ;; Defined at:
  6341 ;;		line 60 in file "ECU-Layer/LCD/ecu_lcd.c"
  6342 ;; Parameters:    Size  Location     Type
  6343 ;;  LCD             1   17[COMRAM] PTR const struct .
  6344 ;;		 -> lcd(6), 
  6345 ;;  data            1   18[COMRAM] unsigned char 
  6346 ;; Auto vars:     Size  Location     Type
  6347 ;;  ret             1   20[COMRAM] unsigned char 
  6348 ;; Return value:  Size  Location     Type
  6349 ;;                  1    wreg      unsigned char 
  6350 ;; Registers used:
  6351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6352 ;; Tracked objects:
  6353 ;;		On entry : 0/0
  6354 ;;		On exit  : 0/0
  6355 ;;		Unchanged: 0/0
  6356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6357 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6358 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6359 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6360 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6361 ;;Total ram usage:        4 bytes
  6362 ;; Hardware stack levels used: 1
  6363 ;; Hardware stack levels required when called: 4
  6364 ;; This function calls:
  6365 ;;		_LCD_4BIT_SEND_ENABLE
  6366 ;;		_LCD_SEND_4BITS
  6367 ;;		_gpio_pin_write_logic
  6368 ;; This function is called by:
  6369 ;;		_lcd_4bit_print_string
  6370 ;;		_print_numbers
  6371 ;; This function uses a non-reentrant model
  6372 ;;
  6373                           
  6374                           	psect	text21
  6375   003B00                     __ptext21:
  6376                           	callstack 0
  6377   003B00                     _lcd_4bit_print_char:
  6378                           	callstack 25
  6379   003B00                     
  6380                           ;ECU-Layer/LCD/ecu_lcd.c: 62:     if(((void*)0) == LCD){
  6381   003B00  5012               	movf	lcd_4bit_print_char@LCD^0,w,c
  6382   003B02  A4D8               	btfss	status,2,c
  6383   003B04  EF86  F01D         	goto	u3661
  6384   003B08  EF88  F01D         	goto	u3660
  6385   003B0C                     u3661:
  6386   003B0C  EF8C  F01D         	goto	l4812
  6387   003B10                     u3660:
  6388   003B10                     
  6389                           ;ECU-Layer/LCD/ecu_lcd.c: 63:         ret = (Std_ReturnType)0x00;
  6390   003B10  0E00               	movlw	0
  6391   003B12  6E15               	movwf	lcd_4bit_print_char@ret^0,c
  6392                           
  6393                           ;ECU-Layer/LCD/ecu_lcd.c: 64:     }
  6394   003B14  EFAD  F01D         	goto	l4814
  6395   003B18                     l4812:
  6396                           
  6397                           ;ECU-Layer/LCD/ecu_lcd.c: 66:         ret = gpio_pin_write_logic(&(LCD->Rs), HIGH);
  6398   003B18  C012  F014         	movff	lcd_4bit_print_char@LCD,??_lcd_4bit_print_char
  6399   003B1C  0E04               	movlw	4
  6400   003B1E  2614               	addwf	??_lcd_4bit_print_char^0,f,c
  6401   003B20  C014  F001         	movff	??_lcd_4bit_print_char,gpio_pin_write_logic@pin_config
  6402   003B24  6A02               	clrf	(gpio_pin_write_logic@pin_config+1)^0,c
  6403   003B26  0E01               	movlw	1
  6404   003B28  6E03               	movwf	gpio_pin_write_logic@logic^0,c
  6405   003B2A  ECB7  F018         	call	_gpio_pin_write_logic	;wreg free
  6406   003B2E  6E15               	movwf	lcd_4bit_print_char@ret^0,c
  6407                           
  6408                           ;ECU-Layer/LCD/ecu_lcd.c: 67:         LCD_SEND_4BITS(LCD, data >> 4);
  6409   003B30  C012  F00B         	movff	lcd_4bit_print_char@LCD,LCD_SEND_4BITS@LCD
  6410   003B34  3813               	swapf	lcd_4bit_print_char@data^0,w,c
  6411   003B36  0B0F               	andlw	15
  6412   003B38  6E0C               	movwf	LCD_SEND_4BITS@command^0,c
  6413   003B3A  ECAE  F01C         	call	_LCD_SEND_4BITS	;wreg free
  6414                           
  6415                           ;ECU-Layer/LCD/ecu_lcd.c: 68:         LCD_4BIT_SEND_ENABLE(LCD);
  6416   003B3E  C012  F00B         	movff	lcd_4bit_print_char@LCD,LCD_4BIT_SEND_ENABLE@LCD
  6417   003B42  EC35  F01E         	call	_LCD_4BIT_SEND_ENABLE	;wreg free
  6418                           
  6419                           ;ECU-Layer/LCD/ecu_lcd.c: 69:         LCD_SEND_4BITS(LCD, data);
  6420   003B46  C012  F00B         	movff	lcd_4bit_print_char@LCD,LCD_SEND_4BITS@LCD
  6421   003B4A  C013  F00C         	movff	lcd_4bit_print_char@data,LCD_SEND_4BITS@command
  6422   003B4E  ECAE  F01C         	call	_LCD_SEND_4BITS	;wreg free
  6423                           
  6424                           ;ECU-Layer/LCD/ecu_lcd.c: 70:         LCD_4BIT_SEND_ENABLE(LCD);
  6425   003B52  C012  F00B         	movff	lcd_4bit_print_char@LCD,LCD_4BIT_SEND_ENABLE@LCD
  6426   003B56  EC35  F01E         	call	_LCD_4BIT_SEND_ENABLE	;wreg free
  6427   003B5A                     l4814:
  6428                           
  6429                           ;ECU-Layer/LCD/ecu_lcd.c: 72:     return ret;
  6430   003B5A  5015               	movf	lcd_4bit_print_char@ret^0,w,c
  6431   003B5C  0012               	return		;funcret
  6432   003B5E                     __end_of_lcd_4bit_print_char:
  6433                           	callstack 0
  6434                           
  6435 ;; *************** function _keypad_get_value *****************
  6436 ;; Defined at:
  6437 ;;		line 28 in file "ECU-Layer/KEYPAD/ecu_keypad.c"
  6438 ;; Parameters:    Size  Location     Type
  6439 ;;  keypad          2   10[COMRAM] PTR const struct .
  6440 ;;		 -> keypad(8), 
  6441 ;;  value           1   12[COMRAM] PTR unsigned char 
  6442 ;;		 -> key(1), 
  6443 ;; Auto vars:     Size  Location     Type
  6444 ;;  cols            2   23[COMRAM] int 
  6445 ;;  i               2   19[COMRAM] int 
  6446 ;;  rows            2   21[COMRAM] int 
  6447 ;;  ret             1   18[COMRAM] unsigned char 
  6448 ;;  logic_state     1   17[COMRAM] unsigned char 
  6449 ;; Return value:  Size  Location     Type
  6450 ;;                  1    wreg      unsigned char 
  6451 ;; Registers used:
  6452 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6453 ;; Tracked objects:
  6454 ;;		On entry : 0/0
  6455 ;;		On exit  : 0/0
  6456 ;;		Unchanged: 0/0
  6457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6458 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6459 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6460 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6461 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6462 ;;Total ram usage:       15 bytes
  6463 ;; Hardware stack levels used: 1
  6464 ;; Hardware stack levels required when called: 3
  6465 ;; This function calls:
  6466 ;;		_gpio_pin_read_logic
  6467 ;;		_gpio_pin_write_logic
  6468 ;; This function is called by:
  6469 ;;		_main
  6470 ;;		_mode_select_menu
  6471 ;; This function uses a non-reentrant model
  6472 ;;
  6473                           
  6474                           	psect	text22
  6475   002C48                     __ptext22:
  6476                           	callstack 0
  6477   002C48                     _keypad_get_value:
  6478                           	callstack 26
  6479   002C48                     
  6480                           ;ECU-Layer/KEYPAD/ecu_keypad.c: 30:     uint8 logic_state = LOW;
  6481   002C48  0E00               	movlw	0
  6482   002C4A  6E12               	movwf	keypad_get_value@logic_state^0,c
  6483   002C4C                     
  6484                           ;ECU-Layer/KEYPAD/ecu_keypad.c: 31:     if(((void*)0) == keypad || ((void*)0) == value){
  6485   002C4C  500B               	movf	keypad_get_value@keypad^0,w,c
  6486   002C4E  100C               	iorwf	(keypad_get_value@keypad+1)^0,w,c
  6487   002C50  B4D8               	btfsc	status,2,c
  6488   002C52  EF2D  F016         	goto	u3851
  6489   002C56  EF2F  F016         	goto	u3850
  6490   002C5A                     u3851:
  6491   002C5A  EF37  F016         	goto	l4936
  6492   002C5E                     u3850:
  6493   002C5E  500D               	movf	keypad_get_value@value^0,w,c
  6494   002C60  A4D8               	btfss	status,2,c
  6495   002C62  EF35  F016         	goto	u3861
  6496   002C66  EF37  F016         	goto	u3860
  6497   002C6A                     u3861:
  6498   002C6A  EF3B  F016         	goto	l4938
  6499   002C6E                     u3860:
  6500   002C6E                     l4936:
  6501                           
  6502                           ;ECU-Layer/KEYPAD/ecu_keypad.c: 32:         ret = (Std_ReturnType)0x00;
  6503   002C6E  0E00               	movlw	0
  6504   002C70  6E13               	movwf	keypad_get_value@ret^0,c
  6505                           
  6506                           ;ECU-Layer/KEYPAD/ecu_keypad.c: 33:     }
  6507   002C72  EFCB  F016         	goto	l4980
  6508   002C76                     l4938:
  6509                           
  6510                           ;ECU-Layer/KEYPAD/ecu_keypad.c: 35:         for(int rows = 0;rows < 4;rows++)
  6511   002C76  0E00               	movlw	0
  6512   002C78  6E17               	movwf	(keypad_get_value@rows+1)^0,c
  6513   002C7A  0E00               	movlw	0
  6514   002C7C  6E16               	movwf	keypad_get_value@rows^0,c
  6515   002C7E                     l4944:
  6516                           
  6517                           ;ECU-Layer/KEYPAD/ecu_keypad.c: 36:         {;ECU-Layer/KEYPAD/ecu_keypad.c: 37:        
      +                               for(int i = 0;i < 4;i++)
  6518   002C7E  0E00               	movlw	0
  6519   002C80  6E15               	movwf	(keypad_get_value@i+1)^0,c
  6520   002C82  0E00               	movlw	0
  6521   002C84  6E14               	movwf	keypad_get_value@i^0,c
  6522   002C86                     l4950:
  6523   002C86  5014               	movf	keypad_get_value@i^0,w,c
  6524   002C88  240B               	addwf	keypad_get_value@keypad^0,w,c
  6525   002C8A  6E0E               	movwf	??_keypad_get_value^0,c
  6526   002C8C  5015               	movf	(keypad_get_value@i+1)^0,w,c
  6527   002C8E  200C               	addwfc	(keypad_get_value@keypad+1)^0,w,c
  6528   002C90  6E0F               	movwf	(??_keypad_get_value+1)^0,c
  6529   002C92  0E04               	movlw	4
  6530   002C94  240E               	addwf	??_keypad_get_value^0,w,c
  6531   002C96  6E01               	movwf	gpio_pin_write_logic@pin_config^0,c
  6532   002C98  0E00               	movlw	0
  6533   002C9A  200F               	addwfc	(??_keypad_get_value+1)^0,w,c
  6534   002C9C  6E02               	movwf	(gpio_pin_write_logic@pin_config+1)^0,c
  6535   002C9E  0E00               	movlw	0
  6536   002CA0  6E03               	movwf	gpio_pin_write_logic@logic^0,c
  6537   002CA2  ECB7  F018         	call	_gpio_pin_write_logic	;wreg free
  6538   002CA6                     
  6539                           ;ECU-Layer/KEYPAD/ecu_keypad.c: 40:             }
  6540   002CA6  4A14               	infsnz	keypad_get_value@i^0,f,c
  6541   002CA8  2A15               	incf	(keypad_get_value@i+1)^0,f,c
  6542   002CAA  BE15               	btfsc	(keypad_get_value@i+1)^0,7,c
  6543   002CAC  EF61  F016         	goto	u3871
  6544   002CB0  5015               	movf	(keypad_get_value@i+1)^0,w,c
  6545   002CB2  E109               	bnz	u3870
  6546   002CB4  0E04               	movlw	4
  6547   002CB6  5C14               	subwf	keypad_get_value@i^0,w,c
  6548   002CB8  A0D8               	btfss	status,0,c
  6549   002CBA  EF61  F016         	goto	u3871
  6550   002CBE  EF63  F016         	goto	u3870
  6551   002CC2                     u3871:
  6552   002CC2  EF43  F016         	goto	l4950
  6553   002CC6                     u3870:
  6554   002CC6                     
  6555                           ;ECU-Layer/KEYPAD/ecu_keypad.c: 41:             ret = gpio_pin_write_logic(&(keypad->key
      +                          pad_rows_pins[rows]), HIGH);
  6556   002CC6  5016               	movf	keypad_get_value@rows^0,w,c
  6557   002CC8  240B               	addwf	keypad_get_value@keypad^0,w,c
  6558   002CCA  6E0E               	movwf	??_keypad_get_value^0,c
  6559   002CCC  5017               	movf	(keypad_get_value@rows+1)^0,w,c
  6560   002CCE  200C               	addwfc	(keypad_get_value@keypad+1)^0,w,c
  6561   002CD0  6E0F               	movwf	(??_keypad_get_value+1)^0,c
  6562   002CD2  0E04               	movlw	4
  6563   002CD4  240E               	addwf	??_keypad_get_value^0,w,c
  6564   002CD6  6E01               	movwf	gpio_pin_write_logic@pin_config^0,c
  6565   002CD8  0E00               	movlw	0
  6566   002CDA  200F               	addwfc	(??_keypad_get_value+1)^0,w,c
  6567   002CDC  6E02               	movwf	(gpio_pin_write_logic@pin_config+1)^0,c
  6568   002CDE  0E01               	movlw	1
  6569   002CE0  6E03               	movwf	gpio_pin_write_logic@logic^0,c
  6570   002CE2  ECB7  F018         	call	_gpio_pin_write_logic	;wreg free
  6571   002CE6  6E13               	movwf	keypad_get_value@ret^0,c
  6572   002CE8                     
  6573                           ;ECU-Layer/KEYPAD/ecu_keypad.c: 42:             _delay((unsigned long)((10)*(4000000UL/4
      +                          000.0)));
  6574   002CE8  0E0D               	movlw	13
  6575   002CEA  6E0E               	movwf	??_keypad_get_value^0,c
  6576   002CEC  0EFC               	movlw	252
  6577   002CEE                     u4877:
  6578   002CEE  2EE8               	decfsz	wreg,f,c
  6579   002CF0  D7FE               	bra	u4877
  6580   002CF2  2E0E               	decfsz	??_keypad_get_value^0,f,c
  6581   002CF4  D7FC               	bra	u4877
  6582   002CF6                     
  6583                           ;ECU-Layer/KEYPAD/ecu_keypad.c: 43:             for(int cols = 0;cols < 4;cols++)
  6584   002CF6  0E00               	movlw	0
  6585   002CF8  6E19               	movwf	(keypad_get_value@cols+1)^0,c
  6586   002CFA  0E00               	movlw	0
  6587   002CFC  6E18               	movwf	keypad_get_value@cols^0,c
  6588   002CFE                     l4966:
  6589                           
  6590                           ;ECU-Layer/KEYPAD/ecu_keypad.c: 44:             {;ECU-Layer/KEYPAD/ecu_keypad.c: 45:    
      +                                       logic_state = gpio_pin_read_logic(&(keypad->keypad_cols_pins[cols]));
  6591   002CFE  5018               	movf	keypad_get_value@cols^0,w,c
  6592   002D00  240B               	addwf	keypad_get_value@keypad^0,w,c
  6593   002D02  6E01               	movwf	gpio_pin_read_logic@pin_config^0,c
  6594   002D04  5019               	movf	(keypad_get_value@cols+1)^0,w,c
  6595   002D06  200C               	addwfc	(keypad_get_value@keypad+1)^0,w,c
  6596   002D08  6E02               	movwf	(gpio_pin_read_logic@pin_config+1)^0,c
  6597   002D0A  EC6B  F01B         	call	_gpio_pin_read_logic	;wreg free
  6598   002D0E  6E12               	movwf	keypad_get_value@logic_state^0,c
  6599   002D10                     
  6600                           ;ECU-Layer/KEYPAD/ecu_keypad.c: 46:                 if(logic_state == HIGH)
  6601   002D10  0412               	decf	keypad_get_value@logic_state^0,w,c
  6602   002D12  A4D8               	btfss	status,2,c
  6603   002D14  EF8E  F016         	goto	u3881
  6604   002D18  EF90  F016         	goto	u3880
  6605   002D1C                     u3881:
  6606   002D1C  EFAB  F016         	goto	l4972
  6607   002D20                     u3880:
  6608   002D20                     
  6609                           ;ECU-Layer/KEYPAD/ecu_keypad.c: 47:                 {;ECU-Layer/KEYPAD/ecu_keypad.c: 48:
      +                                               *value = keypad_content[rows][cols];
  6610   002D20  C016  F00E         	movff	keypad_get_value@rows,??_keypad_get_value
  6611   002D24  C017  F00F         	movff	keypad_get_value@rows+1,??_keypad_get_value+1
  6612   002D28  90D8               	bcf	status,0,c
  6613   002D2A  360E               	rlcf	??_keypad_get_value^0,f,c
  6614   002D2C  360F               	rlcf	(??_keypad_get_value+1)^0,f,c
  6615   002D2E  90D8               	bcf	status,0,c
  6616   002D30  360E               	rlcf	??_keypad_get_value^0,f,c
  6617   002D32  360F               	rlcf	(??_keypad_get_value+1)^0,f,c
  6618   002D34  0E00               	movlw	low _keypad_content
  6619   002D36  240E               	addwf	??_keypad_get_value^0,w,c
  6620   002D38  6E10               	movwf	(??_keypad_get_value+2)^0,c
  6621   002D3A  0E01               	movlw	high _keypad_content
  6622   002D3C  200F               	addwfc	(??_keypad_get_value+1)^0,w,c
  6623   002D3E  6E11               	movwf	(??_keypad_get_value+3)^0,c
  6624   002D40  5018               	movf	keypad_get_value@cols^0,w,c
  6625   002D42  2410               	addwf	(??_keypad_get_value+2)^0,w,c
  6626   002D44  6ED9               	movwf	fsr2l,c
  6627   002D46  5019               	movf	(keypad_get_value@cols+1)^0,w,c
  6628   002D48  2011               	addwfc	(??_keypad_get_value+3)^0,w,c
  6629   002D4A  6EDA               	movwf	fsr2h,c
  6630   002D4C  500D               	movf	keypad_get_value@value^0,w,c
  6631   002D4E  6EE1               	movwf	fsr1l,c
  6632   002D50  6AE2               	clrf	fsr1h,c
  6633   002D52  CFDF FFE7          	movff	indf2,indf1
  6634   002D56                     l4972:
  6635                           
  6636                           ;ECU-Layer/KEYPAD/ecu_keypad.c: 51:             }
  6637   002D56  4A18               	infsnz	keypad_get_value@cols^0,f,c
  6638   002D58  2A19               	incf	(keypad_get_value@cols+1)^0,f,c
  6639   002D5A  BE19               	btfsc	(keypad_get_value@cols+1)^0,7,c
  6640   002D5C  EFB9  F016         	goto	u3891
  6641   002D60  5019               	movf	(keypad_get_value@cols+1)^0,w,c
  6642   002D62  E109               	bnz	u3890
  6643   002D64  0E04               	movlw	4
  6644   002D66  5C18               	subwf	keypad_get_value@cols^0,w,c
  6645   002D68  A0D8               	btfss	status,0,c
  6646   002D6A  EFB9  F016         	goto	u3891
  6647   002D6E  EFBB  F016         	goto	u3890
  6648   002D72                     u3891:
  6649   002D72  EF7F  F016         	goto	l4966
  6650   002D76                     u3890:
  6651   002D76                     
  6652                           ;ECU-Layer/KEYPAD/ecu_keypad.c: 52:         }
  6653   002D76  4A16               	infsnz	keypad_get_value@rows^0,f,c
  6654   002D78  2A17               	incf	(keypad_get_value@rows+1)^0,f,c
  6655   002D7A  BE17               	btfsc	(keypad_get_value@rows+1)^0,7,c
  6656   002D7C  EFC9  F016         	goto	u3901
  6657   002D80  5017               	movf	(keypad_get_value@rows+1)^0,w,c
  6658   002D82  E109               	bnz	u3900
  6659   002D84  0E04               	movlw	4
  6660   002D86  5C16               	subwf	keypad_get_value@rows^0,w,c
  6661   002D88  A0D8               	btfss	status,0,c
  6662   002D8A  EFC9  F016         	goto	u3901
  6663   002D8E  EFCB  F016         	goto	u3900
  6664   002D92                     u3901:
  6665   002D92  EF3F  F016         	goto	l4944
  6666   002D96                     u3900:
  6667   002D96                     l4980:
  6668                           
  6669                           ;ECU-Layer/KEYPAD/ecu_keypad.c: 54:     return ret;
  6670   002D96  5013               	movf	keypad_get_value@ret^0,w,c
  6671   002D98  0012               	return		;funcret
  6672   002D9A                     __end_of_keypad_get_value:
  6673                           	callstack 0
  6674                           
  6675 ;; *************** function _lcd_4bit_initi *****************
  6676 ;; Defined at:
  6677 ;;		line 11 in file "ECU-Layer/LCD/ecu_lcd.c"
  6678 ;; Parameters:    Size  Location     Type
  6679 ;;  LCD             1   21[COMRAM] PTR const struct .
  6680 ;;		 -> lcd(6), 
  6681 ;; Auto vars:     Size  Location     Type
  6682 ;;  i               2   23[COMRAM] int 
  6683 ;;  ret             1   25[COMRAM] unsigned char 
  6684 ;; Return value:  Size  Location     Type
  6685 ;;                  1    wreg      unsigned char 
  6686 ;; Registers used:
  6687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6688 ;; Tracked objects:
  6689 ;;		On entry : 0/0
  6690 ;;		On exit  : 0/0
  6691 ;;		Unchanged: 0/0
  6692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6693 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6694 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6695 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6696 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6697 ;;Total ram usage:        5 bytes
  6698 ;; Hardware stack levels used: 1
  6699 ;; Hardware stack levels required when called: 5
  6700 ;; This function calls:
  6701 ;;		_LCD_4BIT_SEND_ENABLE
  6702 ;;		_LCD_SEND_4BITS
  6703 ;;		_gpio_pin_direction_inti
  6704 ;;		_gpio_pin_write_logic
  6705 ;;		_lcd_4bit_send_command
  6706 ;; This function is called by:
  6707 ;;		_main
  6708 ;; This function uses a non-reentrant model
  6709 ;;
  6710                           
  6711                           	psect	text23
  6712   002EE4                     __ptext23:
  6713                           	callstack 0
  6714   002EE4                     _lcd_4bit_initi:
  6715                           	callstack 25
  6716   002EE4                     
  6717                           ;ECU-Layer/LCD/ecu_lcd.c: 13:     if(((void*)0) == LCD){
  6718   002EE4  5016               	movf	lcd_4bit_initi@LCD^0,w,c
  6719   002EE6  A4D8               	btfss	status,2,c
  6720   002EE8  EF78  F017         	goto	u4081
  6721   002EEC  EF7A  F017         	goto	u4080
  6722   002EF0                     u4081:
  6723   002EF0  EF7E  F017         	goto	l5174
  6724   002EF4                     u4080:
  6725   002EF4                     
  6726                           ;ECU-Layer/LCD/ecu_lcd.c: 14:         ret = (Std_ReturnType)0x00;
  6727   002EF4  0E00               	movlw	0
  6728   002EF6  6E1A               	movwf	lcd_4bit_initi@ret^0,c
  6729                           
  6730                           ;ECU-Layer/LCD/ecu_lcd.c: 15:     }
  6731   002EF8  EF13  F018         	goto	l5218
  6732   002EFC                     l5174:
  6733                           
  6734                           ;ECU-Layer/LCD/ecu_lcd.c: 17:         ret = gpio_pin_direction_inti(&(LCD->Rs));
  6735   002EFC  C016  F017         	movff	lcd_4bit_initi@LCD,??_lcd_4bit_initi
  6736   002F00  0E04               	movlw	4
  6737   002F02  2617               	addwf	??_lcd_4bit_initi^0,f,c
  6738   002F04  C017  F001         	movff	??_lcd_4bit_initi,gpio_pin_direction_inti@pin_config
  6739   002F08  6A02               	clrf	(gpio_pin_direction_inti@pin_config+1)^0,c
  6740   002F0A  EC15  F018         	call	_gpio_pin_direction_inti	;wreg free
  6741   002F0E  6E1A               	movwf	lcd_4bit_initi@ret^0,c
  6742                           
  6743                           ;ECU-Layer/LCD/ecu_lcd.c: 18:         ret = gpio_pin_direction_inti(&(LCD->E));
  6744   002F10  C016  F017         	movff	lcd_4bit_initi@LCD,??_lcd_4bit_initi
  6745   002F14  0E05               	movlw	5
  6746   002F16  2617               	addwf	??_lcd_4bit_initi^0,f,c
  6747   002F18  C017  F001         	movff	??_lcd_4bit_initi,gpio_pin_direction_inti@pin_config
  6748   002F1C  6A02               	clrf	(gpio_pin_direction_inti@pin_config+1)^0,c
  6749   002F1E  EC15  F018         	call	_gpio_pin_direction_inti	;wreg free
  6750   002F22  6E1A               	movwf	lcd_4bit_initi@ret^0,c
  6751   002F24                     
  6752                           ;ECU-Layer/LCD/ecu_lcd.c: 19:         for(int i = 0;i < 4;i++)
  6753   002F24  0E00               	movlw	0
  6754   002F26  6E19               	movwf	(lcd_4bit_initi@i+1)^0,c
  6755   002F28  0E00               	movlw	0
  6756   002F2A  6E18               	movwf	lcd_4bit_initi@i^0,c
  6757   002F2C                     l5182:
  6758   002F2C  5016               	movf	lcd_4bit_initi@LCD^0,w,c
  6759   002F2E  2418               	addwf	lcd_4bit_initi@i^0,w,c
  6760   002F30  6E17               	movwf	??_lcd_4bit_initi^0,c
  6761   002F32  C017  F001         	movff	??_lcd_4bit_initi,gpio_pin_direction_inti@pin_config
  6762   002F36  6A02               	clrf	(gpio_pin_direction_inti@pin_config+1)^0,c
  6763   002F38  EC15  F018         	call	_gpio_pin_direction_inti	;wreg free
  6764   002F3C                     
  6765                           ;ECU-Layer/LCD/ecu_lcd.c: 22:         }
  6766   002F3C  4A18               	infsnz	lcd_4bit_initi@i^0,f,c
  6767   002F3E  2A19               	incf	(lcd_4bit_initi@i+1)^0,f,c
  6768   002F40  BE19               	btfsc	(lcd_4bit_initi@i+1)^0,7,c
  6769   002F42  EFAC  F017         	goto	u4091
  6770   002F46  5019               	movf	(lcd_4bit_initi@i+1)^0,w,c
  6771   002F48  E109               	bnz	u4090
  6772   002F4A  0E04               	movlw	4
  6773   002F4C  5C18               	subwf	lcd_4bit_initi@i^0,w,c
  6774   002F4E  A0D8               	btfss	status,0,c
  6775   002F50  EFAC  F017         	goto	u4091
  6776   002F54  EFAE  F017         	goto	u4090
  6777   002F58                     u4091:
  6778   002F58  EF96  F017         	goto	l5182
  6779   002F5C                     u4090:
  6780   002F5C  C016  F017         	movff	lcd_4bit_initi@LCD,??_lcd_4bit_initi
  6781   002F60  0E04               	movlw	4
  6782   002F62  2617               	addwf	??_lcd_4bit_initi^0,f,c
  6783   002F64  C017  F001         	movff	??_lcd_4bit_initi,gpio_pin_write_logic@pin_config
  6784   002F68  6A02               	clrf	(gpio_pin_write_logic@pin_config+1)^0,c
  6785   002F6A  0E00               	movlw	0
  6786   002F6C  6E03               	movwf	gpio_pin_write_logic@logic^0,c
  6787   002F6E  ECB7  F018         	call	_gpio_pin_write_logic	;wreg free
  6788   002F72                     
  6789                           ;ECU-Layer/LCD/ecu_lcd.c: 24:         _delay((unsigned long)((20)*(4000000UL/4000.0)));
  6790   002F72  0E1A               	movlw	26
  6791   002F74  6E17               	movwf	??_lcd_4bit_initi^0,c
  6792   002F76  0EF8               	movlw	248
  6793   002F78                     u4887:
  6794   002F78  2EE8               	decfsz	wreg,f,c
  6795   002F7A  D7FE               	bra	u4887
  6796   002F7C  2E17               	decfsz	??_lcd_4bit_initi^0,f,c
  6797   002F7E  D7FC               	bra	u4887
  6798   002F80  D000               	nop2	
  6799   002F82                     
  6800                           ;ECU-Layer/LCD/ecu_lcd.c: 25:         LCD_SEND_4BITS(LCD, 0x03);
  6801   002F82  C016  F00B         	movff	lcd_4bit_initi@LCD,LCD_SEND_4BITS@LCD
  6802   002F86  0E03               	movlw	3
  6803   002F88  6E0C               	movwf	LCD_SEND_4BITS@command^0,c
  6804   002F8A  ECAE  F01C         	call	_LCD_SEND_4BITS	;wreg free
  6805   002F8E                     
  6806                           ;ECU-Layer/LCD/ecu_lcd.c: 26:         LCD_4BIT_SEND_ENABLE(LCD);
  6807   002F8E  C016  F00B         	movff	lcd_4bit_initi@LCD,LCD_4BIT_SEND_ENABLE@LCD
  6808   002F92  EC35  F01E         	call	_LCD_4BIT_SEND_ENABLE	;wreg free
  6809   002F96                     
  6810                           ;ECU-Layer/LCD/ecu_lcd.c: 27:         _delay((unsigned long)((5)*(4000000UL/4000.0)));
  6811   002F96  0E07               	movlw	7
  6812   002F98  6E17               	movwf	??_lcd_4bit_initi^0,c
  6813   002F9A  0E7D               	movlw	125
  6814   002F9C                     u4897:
  6815   002F9C  2EE8               	decfsz	wreg,f,c
  6816   002F9E  D7FE               	bra	u4897
  6817   002FA0  2E17               	decfsz	??_lcd_4bit_initi^0,f,c
  6818   002FA2  D7FC               	bra	u4897
  6819   002FA4  0000               	nop	
  6820                           
  6821                           ;ECU-Layer/LCD/ecu_lcd.c: 28:         LCD_SEND_4BITS(LCD, 0x03);
  6822   002FA6  C016  F00B         	movff	lcd_4bit_initi@LCD,LCD_SEND_4BITS@LCD
  6823   002FAA  0E03               	movlw	3
  6824   002FAC  6E0C               	movwf	LCD_SEND_4BITS@command^0,c
  6825   002FAE  ECAE  F01C         	call	_LCD_SEND_4BITS	;wreg free
  6826                           
  6827                           ;ECU-Layer/LCD/ecu_lcd.c: 29:         LCD_4BIT_SEND_ENABLE(LCD);
  6828   002FB2  C016  F00B         	movff	lcd_4bit_initi@LCD,LCD_4BIT_SEND_ENABLE@LCD
  6829   002FB6  EC35  F01E         	call	_LCD_4BIT_SEND_ENABLE	;wreg free
  6830   002FBA                     
  6831                           ;ECU-Layer/LCD/ecu_lcd.c: 30:         _delay((unsigned long)((150)*(4000000UL/4000000.0)
      +                          ));
  6832   002FBA  0E32               	movlw	50
  6833   002FBC                     u4907:
  6834   002FBC  2EE8               	decfsz	wreg,f,c
  6835   002FBE  D7FE               	bra	u4907
  6836   002FC0                     
  6837                           ;ECU-Layer/LCD/ecu_lcd.c: 31:         LCD_SEND_4BITS(LCD, 0x03);
  6838   002FC0  C016  F00B         	movff	lcd_4bit_initi@LCD,LCD_SEND_4BITS@LCD
  6839   002FC4  0E03               	movlw	3
  6840   002FC6  6E0C               	movwf	LCD_SEND_4BITS@command^0,c
  6841   002FC8  ECAE  F01C         	call	_LCD_SEND_4BITS	;wreg free
  6842   002FCC                     
  6843                           ;ECU-Layer/LCD/ecu_lcd.c: 32:         LCD_4BIT_SEND_ENABLE(LCD);
  6844   002FCC  C016  F00B         	movff	lcd_4bit_initi@LCD,LCD_4BIT_SEND_ENABLE@LCD
  6845   002FD0  EC35  F01E         	call	_LCD_4BIT_SEND_ENABLE	;wreg free
  6846   002FD4                     
  6847                           ;ECU-Layer/LCD/ecu_lcd.c: 34:         LCD_SEND_4BITS(LCD, 0x02);
  6848   002FD4  C016  F00B         	movff	lcd_4bit_initi@LCD,LCD_SEND_4BITS@LCD
  6849   002FD8  0E02               	movlw	2
  6850   002FDA  6E0C               	movwf	LCD_SEND_4BITS@command^0,c
  6851   002FDC  ECAE  F01C         	call	_LCD_SEND_4BITS	;wreg free
  6852   002FE0                     
  6853                           ;ECU-Layer/LCD/ecu_lcd.c: 35:         LCD_4BIT_SEND_ENABLE(LCD);
  6854   002FE0  C016  F00B         	movff	lcd_4bit_initi@LCD,LCD_4BIT_SEND_ENABLE@LCD
  6855   002FE4  EC35  F01E         	call	_LCD_4BIT_SEND_ENABLE	;wreg free
  6856   002FE8  C016  F012         	movff	lcd_4bit_initi@LCD,lcd_4bit_send_command@LCD
  6857   002FEC  0E28               	movlw	40
  6858   002FEE  6E13               	movwf	lcd_4bit_send_command@command^0,c
  6859   002FF0  ECAF  F01D         	call	_lcd_4bit_send_command	;wreg free
  6860   002FF4  C016  F012         	movff	lcd_4bit_initi@LCD,lcd_4bit_send_command@LCD
  6861   002FF8  0E01               	movlw	1
  6862   002FFA  6E13               	movwf	lcd_4bit_send_command@command^0,c
  6863   002FFC  ECAF  F01D         	call	_lcd_4bit_send_command	;wreg free
  6864   003000  C016  F012         	movff	lcd_4bit_initi@LCD,lcd_4bit_send_command@LCD
  6865   003004  0E02               	movlw	2
  6866   003006  6E13               	movwf	lcd_4bit_send_command@command^0,c
  6867   003008  ECAF  F01D         	call	_lcd_4bit_send_command	;wreg free
  6868   00300C  C016  F012         	movff	lcd_4bit_initi@LCD,lcd_4bit_send_command@LCD
  6869   003010  0E06               	movlw	6
  6870   003012  6E13               	movwf	lcd_4bit_send_command@command^0,c
  6871   003014  ECAF  F01D         	call	_lcd_4bit_send_command	;wreg free
  6872   003018                     
  6873                           ;ECU-Layer/LCD/ecu_lcd.c: 40:         ret = lcd_4bit_send_command(LCD, 0x0C);
  6874   003018  C016  F012         	movff	lcd_4bit_initi@LCD,lcd_4bit_send_command@LCD
  6875   00301C  0E0C               	movlw	12
  6876   00301E  6E13               	movwf	lcd_4bit_send_command@command^0,c
  6877   003020  ECAF  F01D         	call	_lcd_4bit_send_command	;wreg free
  6878   003024  6E1A               	movwf	lcd_4bit_initi@ret^0,c
  6879   003026                     l5218:
  6880                           
  6881                           ;ECU-Layer/LCD/ecu_lcd.c: 42:     return ret;
  6882   003026  501A               	movf	lcd_4bit_initi@ret^0,w,c
  6883   003028  0012               	return		;funcret
  6884   00302A                     __end_of_lcd_4bit_initi:
  6885                           	callstack 0
  6886                           
  6887 ;; *************** function _lcd_4bit_send_command *****************
  6888 ;; Defined at:
  6889 ;;		line 44 in file "ECU-Layer/LCD/ecu_lcd.c"
  6890 ;; Parameters:    Size  Location     Type
  6891 ;;  LCD             1   17[COMRAM] PTR const struct .
  6892 ;;		 -> lcd(6), 
  6893 ;;  command         1   18[COMRAM] unsigned char 
  6894 ;; Auto vars:     Size  Location     Type
  6895 ;;  ret             1   20[COMRAM] unsigned char 
  6896 ;; Return value:  Size  Location     Type
  6897 ;;                  1    wreg      unsigned char 
  6898 ;; Registers used:
  6899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6900 ;; Tracked objects:
  6901 ;;		On entry : 0/0
  6902 ;;		On exit  : 0/0
  6903 ;;		Unchanged: 0/0
  6904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6905 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6906 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6907 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6908 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6909 ;;Total ram usage:        4 bytes
  6910 ;; Hardware stack levels used: 1
  6911 ;; Hardware stack levels required when called: 4
  6912 ;; This function calls:
  6913 ;;		_LCD_4BIT_SEND_ENABLE
  6914 ;;		_LCD_SEND_4BITS
  6915 ;;		_gpio_pin_write_logic
  6916 ;; This function is called by:
  6917 ;;		_lcd_4bit_initi
  6918 ;;		_lcd_4bit_set_cursor
  6919 ;;		_main
  6920 ;;		_print_numbers
  6921 ;;		_mode_select_menu
  6922 ;; This function uses a non-reentrant model
  6923 ;;
  6924                           
  6925                           	psect	text24
  6926   003B5E                     __ptext24:
  6927                           	callstack 0
  6928   003B5E                     _lcd_4bit_send_command:
  6929                           	callstack 25
  6930   003B5E                     
  6931                           ;ECU-Layer/LCD/ecu_lcd.c: 46:     if(((void*)0) == LCD){
  6932   003B5E  5012               	movf	lcd_4bit_send_command@LCD^0,w,c
  6933   003B60  A4D8               	btfss	status,2,c
  6934   003B62  EFB5  F01D         	goto	u3671
  6935   003B66  EFB7  F01D         	goto	u3670
  6936   003B6A                     u3671:
  6937   003B6A  EFBB  F01D         	goto	l4822
  6938   003B6E                     u3670:
  6939   003B6E                     
  6940                           ;ECU-Layer/LCD/ecu_lcd.c: 47:         ret = (Std_ReturnType)0x00;
  6941   003B6E  0E00               	movlw	0
  6942   003B70  6E15               	movwf	lcd_4bit_send_command@ret^0,c
  6943                           
  6944                           ;ECU-Layer/LCD/ecu_lcd.c: 48:     }
  6945   003B72  EFDC  F01D         	goto	l4824
  6946   003B76                     l4822:
  6947                           
  6948                           ;ECU-Layer/LCD/ecu_lcd.c: 50:         ret = gpio_pin_write_logic(&(LCD->Rs), LOW);
  6949   003B76  C012  F014         	movff	lcd_4bit_send_command@LCD,??_lcd_4bit_send_command
  6950   003B7A  0E04               	movlw	4
  6951   003B7C  2614               	addwf	??_lcd_4bit_send_command^0,f,c
  6952   003B7E  C014  F001         	movff	??_lcd_4bit_send_command,gpio_pin_write_logic@pin_config
  6953   003B82  6A02               	clrf	(gpio_pin_write_logic@pin_config+1)^0,c
  6954   003B84  0E00               	movlw	0
  6955   003B86  6E03               	movwf	gpio_pin_write_logic@logic^0,c
  6956   003B88  ECB7  F018         	call	_gpio_pin_write_logic	;wreg free
  6957   003B8C  6E15               	movwf	lcd_4bit_send_command@ret^0,c
  6958                           
  6959                           ;ECU-Layer/LCD/ecu_lcd.c: 51:         LCD_SEND_4BITS(LCD, command >> 4);
  6960   003B8E  C012  F00B         	movff	lcd_4bit_send_command@LCD,LCD_SEND_4BITS@LCD
  6961   003B92  3813               	swapf	lcd_4bit_send_command@command^0,w,c
  6962   003B94  0B0F               	andlw	15
  6963   003B96  6E0C               	movwf	LCD_SEND_4BITS@command^0,c
  6964   003B98  ECAE  F01C         	call	_LCD_SEND_4BITS	;wreg free
  6965                           
  6966                           ;ECU-Layer/LCD/ecu_lcd.c: 52:         LCD_4BIT_SEND_ENABLE(LCD);
  6967   003B9C  C012  F00B         	movff	lcd_4bit_send_command@LCD,LCD_4BIT_SEND_ENABLE@LCD
  6968   003BA0  EC35  F01E         	call	_LCD_4BIT_SEND_ENABLE	;wreg free
  6969                           
  6970                           ;ECU-Layer/LCD/ecu_lcd.c: 53:         LCD_SEND_4BITS(LCD, command);
  6971   003BA4  C012  F00B         	movff	lcd_4bit_send_command@LCD,LCD_SEND_4BITS@LCD
  6972   003BA8  C013  F00C         	movff	lcd_4bit_send_command@command,LCD_SEND_4BITS@command
  6973   003BAC  ECAE  F01C         	call	_LCD_SEND_4BITS	;wreg free
  6974                           
  6975                           ;ECU-Layer/LCD/ecu_lcd.c: 54:         LCD_4BIT_SEND_ENABLE(LCD);
  6976   003BB0  C012  F00B         	movff	lcd_4bit_send_command@LCD,LCD_4BIT_SEND_ENABLE@LCD
  6977   003BB4  EC35  F01E         	call	_LCD_4BIT_SEND_ENABLE	;wreg free
  6978   003BB8                     l4824:
  6979                           
  6980                           ;ECU-Layer/LCD/ecu_lcd.c: 56:     return ret;
  6981   003BB8  5015               	movf	lcd_4bit_send_command@ret^0,w,c
  6982   003BBA  0012               	return		;funcret
  6983   003BBC                     __end_of_lcd_4bit_send_command:
  6984                           	callstack 0
  6985                           
  6986 ;; *************** function _LCD_SEND_4BITS *****************
  6987 ;; Defined at:
  6988 ;;		line 239 in file "ECU-Layer/LCD/ecu_lcd.c"
  6989 ;; Parameters:    Size  Location     Type
  6990 ;;  LCD             1   10[COMRAM] PTR const struct .
  6991 ;;		 -> lcd(6), 
  6992 ;;  command         1   11[COMRAM] unsigned char 
  6993 ;; Auto vars:     Size  Location     Type
  6994 ;;  i               2   15[COMRAM] int 
  6995 ;;  ret             1    0        unsigned char 
  6996 ;; Return value:  Size  Location     Type
  6997 ;;                  1    wreg      void 
  6998 ;; Registers used:
  6999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7000 ;; Tracked objects:
  7001 ;;		On entry : 0/0
  7002 ;;		On exit  : 0/0
  7003 ;;		Unchanged: 0/0
  7004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7005 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7006 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7007 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7008 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7009 ;;Total ram usage:        7 bytes
  7010 ;; Hardware stack levels used: 1
  7011 ;; Hardware stack levels required when called: 3
  7012 ;; This function calls:
  7013 ;;		_gpio_pin_write_logic
  7014 ;; This function is called by:
  7015 ;;		_lcd_4bit_initi
  7016 ;;		_lcd_4bit_send_command
  7017 ;;		_lcd_4bit_print_char
  7018 ;; This function uses a non-reentrant model
  7019 ;;
  7020                           
  7021                           	psect	text25
  7022   00395C                     __ptext25:
  7023                           	callstack 0
  7024   00395C                     _LCD_SEND_4BITS:
  7025                           	callstack 25
  7026   00395C                     
  7027                           ;ECU-Layer/LCD/ecu_lcd.c: 241:     if(((void*)0) == LCD){
  7028   00395C  500B               	movf	LCD_SEND_4BITS@LCD^0,w,c
  7029   00395E  A4D8               	btfss	status,2,c
  7030   003960  EFB4  F01C         	goto	u3621
  7031   003964  EFB6  F01C         	goto	u3620
  7032   003968                     u3621:
  7033   003968  EFB8  F01C         	goto	l4788
  7034   00396C                     u3620:
  7035   00396C  EFE3  F01C         	goto	l169
  7036   003970                     l4788:
  7037                           
  7038                           ;ECU-Layer/LCD/ecu_lcd.c: 245:         for(int i = 0;i < 4;i++)
  7039   003970  0E00               	movlw	0
  7040   003972  6E11               	movwf	(LCD_SEND_4BITS@i+1)^0,c
  7041   003974  0E00               	movlw	0
  7042   003976  6E10               	movwf	LCD_SEND_4BITS@i^0,c
  7043   003978                     l4794:
  7044   003978  500B               	movf	LCD_SEND_4BITS@LCD^0,w,c
  7045   00397A  2410               	addwf	LCD_SEND_4BITS@i^0,w,c
  7046   00397C  6E0D               	movwf	??_LCD_SEND_4BITS^0,c
  7047   00397E  C00D  F001         	movff	??_LCD_SEND_4BITS,gpio_pin_write_logic@pin_config
  7048   003982  6A02               	clrf	(gpio_pin_write_logic@pin_config+1)^0,c
  7049   003984  C010  F00E         	movff	LCD_SEND_4BITS@i,??_LCD_SEND_4BITS+1
  7050   003988  C00C  F00F         	movff	LCD_SEND_4BITS@command,??_LCD_SEND_4BITS+2
  7051   00398C  2A0E               	incf	(??_LCD_SEND_4BITS+1)^0,f,c
  7052   00398E  EFCB  F01C         	goto	u3634
  7053   003992                     u3635:
  7054   003992  90D8               	bcf	status,0,c
  7055   003994  320F               	rrcf	(??_LCD_SEND_4BITS+2)^0,f,c
  7056   003996                     u3634:
  7057   003996  2E0E               	decfsz	(??_LCD_SEND_4BITS+1)^0,f,c
  7058   003998  EFC9  F01C         	goto	u3635
  7059   00399C  500F               	movf	(??_LCD_SEND_4BITS+2)^0,w,c
  7060   00399E  0B01               	andlw	1
  7061   0039A0  6E03               	movwf	gpio_pin_write_logic@logic^0,c
  7062   0039A2  ECB7  F018         	call	_gpio_pin_write_logic	;wreg free
  7063   0039A6                     
  7064                           ;ECU-Layer/LCD/ecu_lcd.c: 248:         }
  7065   0039A6  4A10               	infsnz	LCD_SEND_4BITS@i^0,f,c
  7066   0039A8  2A11               	incf	(LCD_SEND_4BITS@i+1)^0,f,c
  7067   0039AA  BE11               	btfsc	(LCD_SEND_4BITS@i+1)^0,7,c
  7068   0039AC  EFE1  F01C         	goto	u3641
  7069   0039B0  5011               	movf	(LCD_SEND_4BITS@i+1)^0,w,c
  7070   0039B2  E109               	bnz	u3640
  7071   0039B4  0E04               	movlw	4
  7072   0039B6  5C10               	subwf	LCD_SEND_4BITS@i^0,w,c
  7073   0039B8  A0D8               	btfss	status,0,c
  7074   0039BA  EFE1  F01C         	goto	u3641
  7075   0039BE  EFE3  F01C         	goto	u3640
  7076   0039C2                     u3641:
  7077   0039C2  EFBC  F01C         	goto	l4794
  7078   0039C6                     u3640:
  7079   0039C6                     l169:
  7080   0039C6  0012               	return		;funcret
  7081   0039C8                     __end_of_LCD_SEND_4BITS:
  7082                           	callstack 0
  7083                           
  7084 ;; *************** function _LCD_4BIT_SEND_ENABLE *****************
  7085 ;; Defined at:
  7086 ;;		line 252 in file "ECU-Layer/LCD/ecu_lcd.c"
  7087 ;; Parameters:    Size  Location     Type
  7088 ;;  LCD             1   10[COMRAM] PTR const struct .
  7089 ;;		 -> lcd(6), 
  7090 ;; Auto vars:     Size  Location     Type
  7091 ;;  ret             1    0        unsigned char 
  7092 ;; Return value:  Size  Location     Type
  7093 ;;                  1    wreg      void 
  7094 ;; Registers used:
  7095 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7096 ;; Tracked objects:
  7097 ;;		On entry : 0/0
  7098 ;;		On exit  : 0/0
  7099 ;;		Unchanged: 0/0
  7100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7101 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7103 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7104 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7105 ;;Total ram usage:        2 bytes
  7106 ;; Hardware stack levels used: 1
  7107 ;; Hardware stack levels required when called: 3
  7108 ;; This function calls:
  7109 ;;		_gpio_pin_write_logic
  7110 ;; This function is called by:
  7111 ;;		_lcd_4bit_initi
  7112 ;;		_lcd_4bit_send_command
  7113 ;;		_lcd_4bit_print_char
  7114 ;; This function uses a non-reentrant model
  7115 ;;
  7116                           
  7117                           	psect	text26
  7118   003C6A                     __ptext26:
  7119                           	callstack 0
  7120   003C6A                     _LCD_4BIT_SEND_ENABLE:
  7121                           	callstack 25
  7122   003C6A                     
  7123                           ;ECU-Layer/LCD/ecu_lcd.c: 254:     if(((void*)0) == LCD){
  7124   003C6A  500B               	movf	LCD_4BIT_SEND_ENABLE@LCD^0,w,c
  7125   003C6C  A4D8               	btfss	status,2,c
  7126   003C6E  EF3B  F01E         	goto	u3651
  7127   003C72  EF3D  F01E         	goto	u3650
  7128   003C76                     u3651:
  7129   003C76  EF3F  F01E         	goto	l4804
  7130   003C7A                     u3650:
  7131   003C7A  EF58  F01E         	goto	l174
  7132   003C7E                     l4804:
  7133   003C7E  C00B  F00C         	movff	LCD_4BIT_SEND_ENABLE@LCD,??_LCD_4BIT_SEND_ENABLE
  7134   003C82  0E05               	movlw	5
  7135   003C84  260C               	addwf	??_LCD_4BIT_SEND_ENABLE^0,f,c
  7136   003C86  C00C  F001         	movff	??_LCD_4BIT_SEND_ENABLE,gpio_pin_write_logic@pin_config
  7137   003C8A  6A02               	clrf	(gpio_pin_write_logic@pin_config+1)^0,c
  7138   003C8C  0E01               	movlw	1
  7139   003C8E  6E03               	movwf	gpio_pin_write_logic@logic^0,c
  7140   003C90  ECB7  F018         	call	_gpio_pin_write_logic	;wreg free
  7141   003C94                     
  7142                           ;ECU-Layer/LCD/ecu_lcd.c: 259:         _delay((unsigned long)((5)*(4000000UL/4000000.0))
      +                          );
  7143   003C94  D000               	nop2		;2 cycle nop
  7144   003C96  D000               	nop2		;2 cycle nop
  7145   003C98  0000               	nop	
  7146   003C9A  C00B  F00C         	movff	LCD_4BIT_SEND_ENABLE@LCD,??_LCD_4BIT_SEND_ENABLE
  7147   003C9E  0E05               	movlw	5
  7148   003CA0  260C               	addwf	??_LCD_4BIT_SEND_ENABLE^0,f,c
  7149   003CA2  C00C  F001         	movff	??_LCD_4BIT_SEND_ENABLE,gpio_pin_write_logic@pin_config
  7150   003CA6  6A02               	clrf	(gpio_pin_write_logic@pin_config+1)^0,c
  7151   003CA8  0E00               	movlw	0
  7152   003CAA  6E03               	movwf	gpio_pin_write_logic@logic^0,c
  7153   003CAC  ECB7  F018         	call	_gpio_pin_write_logic	;wreg free
  7154   003CB0                     l174:
  7155   003CB0  0012               	return		;funcret
  7156   003CB2                     __end_of_LCD_4BIT_SEND_ENABLE:
  7157                           	callstack 0
  7158                           
  7159 ;; *************** function _keypad_initi *****************
  7160 ;; Defined at:
  7161 ;;		line 9 in file "ECU-Layer/KEYPAD/ecu_keypad.c"
  7162 ;; Parameters:    Size  Location     Type
  7163 ;;  keypad          2   14[COMRAM] PTR const struct .
  7164 ;;		 -> keypad(8), 
  7165 ;; Auto vars:     Size  Location     Type
  7166 ;;  i               2   21[COMRAM] int 
  7167 ;;  i               2   19[COMRAM] int 
  7168 ;;  ret             1   18[COMRAM] unsigned char 
  7169 ;; Return value:  Size  Location     Type
  7170 ;;                  1    wreg      unsigned char 
  7171 ;; Registers used:
  7172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7173 ;; Tracked objects:
  7174 ;;		On entry : 0/0
  7175 ;;		On exit  : 0/0
  7176 ;;		Unchanged: 0/0
  7177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7178 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7179 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7180 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7181 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7182 ;;Total ram usage:        9 bytes
  7183 ;; Hardware stack levels used: 1
  7184 ;; Hardware stack levels required when called: 4
  7185 ;; This function calls:
  7186 ;;		_gpio_pin_direction_inti
  7187 ;;		_gpio_pin_inti
  7188 ;; This function is called by:
  7189 ;;		_main
  7190 ;; This function uses a non-reentrant model
  7191 ;;
  7192                           
  7193                           	psect	text27
  7194   0035A2                     __ptext27:
  7195                           	callstack 0
  7196   0035A2                     _keypad_initi:
  7197                           	callstack 26
  7198   0035A2                     
  7199                           ;ECU-Layer/KEYPAD/ecu_keypad.c: 11:     if(((void*)0) == keypad){
  7200   0035A2  500F               	movf	keypad_initi@keypad^0,w,c
  7201   0035A4  1010               	iorwf	(keypad_initi@keypad+1)^0,w,c
  7202   0035A6  A4D8               	btfss	status,2,c
  7203   0035A8  EFD8  F01A         	goto	u4051
  7204   0035AC  EFDA  F01A         	goto	u4050
  7205   0035B0                     u4051:
  7206   0035B0  EFDE  F01A         	goto	l5142
  7207   0035B4                     u4050:
  7208   0035B4                     
  7209                           ;ECU-Layer/KEYPAD/ecu_keypad.c: 12:         ret = (Std_ReturnType)0x00;
  7210   0035B4  0E00               	movlw	0
  7211   0035B6  6E13               	movwf	keypad_initi@ret^0,c
  7212                           
  7213                           ;ECU-Layer/KEYPAD/ecu_keypad.c: 13:     }
  7214   0035B8  EF1D  F01B         	goto	l5166
  7215   0035BC                     l5142:
  7216                           
  7217                           ;ECU-Layer/KEYPAD/ecu_keypad.c: 15:         for(int i = 0;i < 4;i++)
  7218   0035BC  0E00               	movlw	0
  7219   0035BE  6E15               	movwf	(keypad_initi@i+1)^0,c
  7220   0035C0  0E00               	movlw	0
  7221   0035C2  6E14               	movwf	keypad_initi@i^0,c
  7222   0035C4                     l5148:
  7223   0035C4  5014               	movf	keypad_initi@i^0,w,c
  7224   0035C6  240F               	addwf	keypad_initi@keypad^0,w,c
  7225   0035C8  6E11               	movwf	??_keypad_initi^0,c
  7226   0035CA  5015               	movf	(keypad_initi@i+1)^0,w,c
  7227   0035CC  2010               	addwfc	(keypad_initi@keypad+1)^0,w,c
  7228   0035CE  6E12               	movwf	(??_keypad_initi+1)^0,c
  7229   0035D0  0E04               	movlw	4
  7230   0035D2  2411               	addwf	??_keypad_initi^0,w,c
  7231   0035D4  6E0B               	movwf	gpio_pin_inti@pin_config^0,c
  7232   0035D6  0E00               	movlw	0
  7233   0035D8  2012               	addwfc	(??_keypad_initi+1)^0,w,c
  7234   0035DA  6E0C               	movwf	(gpio_pin_inti@pin_config+1)^0,c
  7235   0035DC  ECE4  F01C         	call	_gpio_pin_inti	;wreg free
  7236   0035E0                     
  7237                           ;ECU-Layer/KEYPAD/ecu_keypad.c: 18:         }
  7238   0035E0  4A14               	infsnz	keypad_initi@i^0,f,c
  7239   0035E2  2A15               	incf	(keypad_initi@i+1)^0,f,c
  7240   0035E4  BE15               	btfsc	(keypad_initi@i+1)^0,7,c
  7241   0035E6  EFFE  F01A         	goto	u4061
  7242   0035EA  5015               	movf	(keypad_initi@i+1)^0,w,c
  7243   0035EC  E109               	bnz	u4060
  7244   0035EE  0E04               	movlw	4
  7245   0035F0  5C14               	subwf	keypad_initi@i^0,w,c
  7246   0035F2  A0D8               	btfss	status,0,c
  7247   0035F4  EFFE  F01A         	goto	u4061
  7248   0035F8  EF00  F01B         	goto	u4060
  7249   0035FC                     u4061:
  7250   0035FC  EFE2  F01A         	goto	l5148
  7251   003600                     u4060:
  7252   003600                     
  7253                           ;ECU-Layer/KEYPAD/ecu_keypad.c: 19:         for(int i = 0;i < 4;i++)
  7254   003600  0E00               	movlw	0
  7255   003602  6E17               	movwf	(keypad_initi@i_113+1)^0,c
  7256   003604  0E00               	movlw	0
  7257   003606  6E16               	movwf	keypad_initi@i_113^0,c
  7258   003608                     l5160:
  7259                           
  7260                           ;ECU-Layer/KEYPAD/ecu_keypad.c: 20:         {;ECU-Layer/KEYPAD/ecu_keypad.c: 21:        
      +                               ret = gpio_pin_direction_inti(&(keypad->keypad_cols_pins[i]));
  7261   003608  5016               	movf	keypad_initi@i_113^0,w,c
  7262   00360A  240F               	addwf	keypad_initi@keypad^0,w,c
  7263   00360C  6E01               	movwf	gpio_pin_direction_inti@pin_config^0,c
  7264   00360E  5017               	movf	(keypad_initi@i_113+1)^0,w,c
  7265   003610  2010               	addwfc	(keypad_initi@keypad+1)^0,w,c
  7266   003612  6E02               	movwf	(gpio_pin_direction_inti@pin_config+1)^0,c
  7267   003614  EC15  F018         	call	_gpio_pin_direction_inti	;wreg free
  7268   003618  6E13               	movwf	keypad_initi@ret^0,c
  7269   00361A                     
  7270                           ;ECU-Layer/KEYPAD/ecu_keypad.c: 22:         }
  7271   00361A  4A16               	infsnz	keypad_initi@i_113^0,f,c
  7272   00361C  2A17               	incf	(keypad_initi@i_113+1)^0,f,c
  7273   00361E  BE17               	btfsc	(keypad_initi@i_113+1)^0,7,c
  7274   003620  EF1B  F01B         	goto	u4071
  7275   003624  5017               	movf	(keypad_initi@i_113+1)^0,w,c
  7276   003626  E109               	bnz	u4070
  7277   003628  0E04               	movlw	4
  7278   00362A  5C16               	subwf	keypad_initi@i_113^0,w,c
  7279   00362C  A0D8               	btfss	status,0,c
  7280   00362E  EF1B  F01B         	goto	u4071
  7281   003632  EF1D  F01B         	goto	u4070
  7282   003636                     u4071:
  7283   003636  EF04  F01B         	goto	l5160
  7284   00363A                     u4070:
  7285   00363A                     l5166:
  7286                           
  7287                           ;ECU-Layer/KEYPAD/ecu_keypad.c: 24:     return ret;
  7288   00363A  5013               	movf	keypad_initi@ret^0,w,c
  7289   00363C  0012               	return		;funcret
  7290   00363E                     __end_of_keypad_initi:
  7291                           	callstack 0
  7292                           
  7293 ;; *************** function _gpio_pin_inti *****************
  7294 ;; Defined at:
  7295 ;;		line 161 in file "MCAL_Layer/GPIO/hal_gpio.c"
  7296 ;; Parameters:    Size  Location     Type
  7297 ;;  pin_config      2   10[COMRAM] PTR const struct .
  7298 ;;		 -> keypad$keypad_rows_pins(4), keypad(8), led_inti@pin_config(1), 
  7299 ;; Auto vars:     Size  Location     Type
  7300 ;;  ret             1   13[COMRAM] unsigned char 
  7301 ;; Return value:  Size  Location     Type
  7302 ;;                  1    wreg      unsigned char 
  7303 ;; Registers used:
  7304 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7305 ;; Tracked objects:
  7306 ;;		On entry : 0/0
  7307 ;;		On exit  : 0/0
  7308 ;;		Unchanged: 0/0
  7309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7310 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7311 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7312 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7313 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7314 ;;Total ram usage:        4 bytes
  7315 ;; Hardware stack levels used: 1
  7316 ;; Hardware stack levels required when called: 3
  7317 ;; This function calls:
  7318 ;;		_gpio_pin_direction_inti
  7319 ;;		_gpio_pin_write_logic
  7320 ;; This function is called by:
  7321 ;;		_keypad_initi
  7322 ;;		_led_inti
  7323 ;; This function uses a non-reentrant model
  7324 ;;
  7325                           
  7326                           	psect	text28
  7327   0039C8                     __ptext28:
  7328                           	callstack 0
  7329   0039C8                     _gpio_pin_inti:
  7330                           	callstack 26
  7331   0039C8                     
  7332                           ;MCAL_Layer/GPIO/hal_gpio.c: 163:     if(pin_config == ((void*)0) || pin_config->pin > 7
      +                          )
  7333   0039C8  500B               	movf	gpio_pin_inti@pin_config^0,w,c
  7334   0039CA  100C               	iorwf	(gpio_pin_inti@pin_config+1)^0,w,c
  7335   0039CC  B4D8               	btfsc	status,2,c
  7336   0039CE  EFEB  F01C         	goto	u3831
  7337   0039D2  EFED  F01C         	goto	u3830
  7338   0039D6                     u3831:
  7339   0039D6  EFFE  F01C         	goto	l4922
  7340   0039DA                     u3830:
  7341   0039DA  C00B  FFD9         	movff	gpio_pin_inti@pin_config,fsr2l
  7342   0039DE  C00C  FFDA         	movff	gpio_pin_inti@pin_config+1,fsr2h
  7343   0039E2  30DF               	rrcf	223,w,c
  7344   0039E4  32E8               	rrcf	wreg,f,c
  7345   0039E6  32E8               	rrcf	wreg,f,c
  7346   0039E8  0B07               	andlw	7
  7347   0039EA  6E0D               	movwf	??_gpio_pin_inti^0,c
  7348   0039EC  0E07               	movlw	7
  7349   0039EE  640D               	cpfsgt	??_gpio_pin_inti^0,c
  7350   0039F0  EFFC  F01C         	goto	u3841
  7351   0039F4  EFFE  F01C         	goto	u3840
  7352   0039F8                     u3841:
  7353   0039F8  EF02  F01D         	goto	l4924
  7354   0039FC                     u3840:
  7355   0039FC                     l4922:
  7356                           
  7357                           ;MCAL_Layer/GPIO/hal_gpio.c: 164:     {;MCAL_Layer/GPIO/hal_gpio.c: 165:         ret = (
      +                          Std_ReturnType)0x00;
  7358   0039FC  0E00               	movlw	0
  7359   0039FE  6E0E               	movwf	gpio_pin_inti@ret^0,c
  7360                           
  7361                           ;MCAL_Layer/GPIO/hal_gpio.c: 166:     }
  7362   003A00  EF18  F01D         	goto	l4926
  7363   003A04                     l4924:
  7364                           
  7365                           ;MCAL_Layer/GPIO/hal_gpio.c: 169:     {;MCAL_Layer/GPIO/hal_gpio.c: 170:         ret = g
      +                          pio_pin_direction_inti(pin_config);
  7366   003A04  C00B  F001         	movff	gpio_pin_inti@pin_config,gpio_pin_direction_inti@pin_config
  7367   003A08  C00C  F002         	movff	gpio_pin_inti@pin_config+1,gpio_pin_direction_inti@pin_config+1
  7368   003A0C  EC15  F018         	call	_gpio_pin_direction_inti	;wreg free
  7369   003A10  6E0E               	movwf	gpio_pin_inti@ret^0,c
  7370                           
  7371                           ;MCAL_Layer/GPIO/hal_gpio.c: 171:         ret = gpio_pin_write_logic(pin_config, pin_con
      +                          fig->logic);
  7372   003A12  C00B  F001         	movff	gpio_pin_inti@pin_config,gpio_pin_write_logic@pin_config
  7373   003A16  C00C  F002         	movff	gpio_pin_inti@pin_config+1,gpio_pin_write_logic@pin_config+1
  7374   003A1A  C00B  FFD9         	movff	gpio_pin_inti@pin_config,fsr2l
  7375   003A1E  C00C  FFDA         	movff	gpio_pin_inti@pin_config+1,fsr2h
  7376   003A22  0E00               	movlw	0
  7377   003A24  BEDF               	btfsc	indf2,7,c
  7378   003A26  0E01               	movlw	1
  7379   003A28  6E03               	movwf	gpio_pin_write_logic@logic^0,c
  7380   003A2A  ECB7  F018         	call	_gpio_pin_write_logic	;wreg free
  7381   003A2E  6E0E               	movwf	gpio_pin_inti@ret^0,c
  7382   003A30                     l4926:
  7383                           
  7384                           ;MCAL_Layer/GPIO/hal_gpio.c: 173:     return ret;
  7385   003A30  500E               	movf	gpio_pin_inti@ret^0,w,c
  7386   003A32  0012               	return		;funcret
  7387   003A34                     __end_of_gpio_pin_inti:
  7388                           	callstack 0
  7389                           
  7390 ;; *************** function _gpio_pin_write_logic *****************
  7391 ;; Defined at:
  7392 ;;		line 85 in file "MCAL_Layer/GPIO/hal_gpio.c"
  7393 ;; Parameters:    Size  Location     Type
  7394 ;;  pin_config      2    0[COMRAM] PTR const struct .
  7395 ;;		 -> keypad$keypad_rows_pins(4), keypad(8), lcd$Dx(4), lcd(6), 
  7396 ;;		 -> led_turn_off@pin_config(1), led_turn_on@pin_config(1), led_inti@pin_config(1), 
  7397 ;;  logic           1    2[COMRAM] enum E2980
  7398 ;; Auto vars:     Size  Location     Type
  7399 ;;  ret             1    9[COMRAM] unsigned char 
  7400 ;; Return value:  Size  Location     Type
  7401 ;;                  1    wreg      unsigned char 
  7402 ;; Registers used:
  7403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7404 ;; Tracked objects:
  7405 ;;		On entry : 0/0
  7406 ;;		On exit  : 0/0
  7407 ;;		Unchanged: 0/0
  7408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7409 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7410 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7411 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7412 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7413 ;;Total ram usage:       10 bytes
  7414 ;; Hardware stack levels used: 1
  7415 ;; Hardware stack levels required when called: 2
  7416 ;; This function calls:
  7417 ;;		Nothing
  7418 ;; This function is called by:
  7419 ;;		_keypad_get_value
  7420 ;;		_lcd_4bit_initi
  7421 ;;		_lcd_4bit_send_command
  7422 ;;		_lcd_4bit_print_char
  7423 ;;		_LCD_SEND_4BITS
  7424 ;;		_LCD_4BIT_SEND_ENABLE
  7425 ;;		_gpio_pin_inti
  7426 ;;		_lcd_8bit_send_command
  7427 ;;		_lcd_8bit_print_char
  7428 ;;		_LCD_SEND_8BITS
  7429 ;;		_LCD_8BIT_SEND_ENABLE
  7430 ;;		_led_turn_on
  7431 ;;		_led_turn_off
  7432 ;; This function uses a non-reentrant model
  7433 ;;
  7434                           
  7435                           	psect	text29
  7436   00316E                     __ptext29:
  7437                           	callstack 0
  7438   00316E                     _gpio_pin_write_logic:
  7439                           	callstack 26
  7440   00316E                     
  7441                           ;MCAL_Layer/GPIO/hal_gpio.c: 86:     Std_ReturnType ret = (Std_ReturnType)0x01;
  7442   00316E  0E01               	movlw	1
  7443   003170  6E0A               	movwf	gpio_pin_write_logic@ret^0,c
  7444   003172                     
  7445                           ;MCAL_Layer/GPIO/hal_gpio.c: 87:     if(pin_config == ((void*)0) || pin_config->pin > 7)
  7446   003172  5001               	movf	gpio_pin_write_logic@pin_config^0,w,c
  7447   003174  1002               	iorwf	(gpio_pin_write_logic@pin_config+1)^0,w,c
  7448   003176  B4D8               	btfsc	status,2,c
  7449   003178  EFC0  F018         	goto	u3581
  7450   00317C  EFC2  F018         	goto	u3580
  7451   003180                     u3581:
  7452   003180  EFD3  F018         	goto	l4766
  7453   003184                     u3580:
  7454   003184  C001  FFD9         	movff	gpio_pin_write_logic@pin_config,fsr2l
  7455   003188  C002  FFDA         	movff	gpio_pin_write_logic@pin_config+1,fsr2h
  7456   00318C  30DF               	rrcf	223,w,c
  7457   00318E  32E8               	rrcf	wreg,f,c
  7458   003190  32E8               	rrcf	wreg,f,c
  7459   003192  0B07               	andlw	7
  7460   003194  6E04               	movwf	??_gpio_pin_write_logic^0,c
  7461   003196  0E07               	movlw	7
  7462   003198  6404               	cpfsgt	??_gpio_pin_write_logic^0,c
  7463   00319A  EFD1  F018         	goto	u3591
  7464   00319E  EFD3  F018         	goto	u3590
  7465   0031A2                     u3591:
  7466   0031A2  EF36  F019         	goto	l4774
  7467   0031A6                     u3590:
  7468   0031A6                     l4766:
  7469                           
  7470                           ;MCAL_Layer/GPIO/hal_gpio.c: 88:     {;MCAL_Layer/GPIO/hal_gpio.c: 89:         ret = (St
      +                          d_ReturnType)0x00;
  7471   0031A6  0E00               	movlw	0
  7472   0031A8  6E0A               	movwf	gpio_pin_write_logic@ret^0,c
  7473                           
  7474                           ;MCAL_Layer/GPIO/hal_gpio.c: 90:     }
  7475   0031AA  EF4B  F019         	goto	l4776
  7476   0031AE                     l4768:
  7477                           
  7478                           ;MCAL_Layer/GPIO/hal_gpio.c: 95:                     *lat_register[pin_config->port]&=~(
      +                          (uint8)1 << pin_config->pin);
  7479   0031AE  C001  FFD9         	movff	gpio_pin_write_logic@pin_config,fsr2l
  7480   0031B2  C002  FFDA         	movff	gpio_pin_write_logic@pin_config+1,fsr2h
  7481   0031B6  30DF               	rrcf	223,w,c
  7482   0031B8  32E8               	rrcf	wreg,f,c
  7483   0031BA  32E8               	rrcf	wreg,f,c
  7484   0031BC  0B07               	andlw	7
  7485   0031BE  6E04               	movwf	??_gpio_pin_write_logic^0,c
  7486   0031C0  0E01               	movlw	1
  7487   0031C2  6E05               	movwf	(??_gpio_pin_write_logic+1)^0,c
  7488   0031C4  2A04               	incf	??_gpio_pin_write_logic^0,f,c
  7489   0031C6  EFE7  F018         	goto	u3604
  7490   0031CA                     u3605:
  7491   0031CA  90D8               	bcf	status,0,c
  7492   0031CC  3605               	rlcf	(??_gpio_pin_write_logic+1)^0,f,c
  7493   0031CE                     u3604:
  7494   0031CE  2E04               	decfsz	??_gpio_pin_write_logic^0,f,c
  7495   0031D0  EFE5  F018         	goto	u3605
  7496   0031D4  5005               	movf	(??_gpio_pin_write_logic+1)^0,w,c
  7497   0031D6  0AFF               	xorlw	255
  7498   0031D8  6E06               	movwf	(??_gpio_pin_write_logic+2)^0,c
  7499   0031DA  C001  FFD9         	movff	gpio_pin_write_logic@pin_config,fsr2l
  7500   0031DE  C002  FFDA         	movff	gpio_pin_write_logic@pin_config+1,fsr2h
  7501   0031E2  50DF               	movf	223,w,c
  7502   0031E4  0B07               	andlw	7
  7503   0031E6  6E07               	movwf	(??_gpio_pin_write_logic+3)^0,c
  7504   0031E8  5007               	movf	(??_gpio_pin_write_logic+3)^0,w,c
  7505   0031EA  0D02               	mullw	2
  7506   0031EC  0E1A               	movlw	low _lat_register
  7507   0031EE  24F3               	addwf	243,w,c
  7508   0031F0  6ED9               	movwf	fsr2l,c
  7509   0031F2  0E01               	movlw	high _lat_register
  7510   0031F4  20F4               	addwfc	prodh,w,c
  7511   0031F6  6EDA               	movwf	fsr2h,c
  7512   0031F8  CFDE F008          	movff	postinc2,??_gpio_pin_write_logic+4
  7513   0031FC  CFDD F009          	movff	postdec2,??_gpio_pin_write_logic+5
  7514   003200  C008  FFD9         	movff	??_gpio_pin_write_logic+4,fsr2l
  7515   003204  C009  FFDA         	movff	??_gpio_pin_write_logic+5,fsr2h
  7516   003208  5006               	movf	(??_gpio_pin_write_logic+2)^0,w,c
  7517   00320A  16DF               	andwf	indf2,f,c
  7518                           
  7519                           ;MCAL_Layer/GPIO/hal_gpio.c: 96:                     break;
  7520   00320C  EF4B  F019         	goto	l4776
  7521   003210                     l4770:
  7522                           
  7523                           ;MCAL_Layer/GPIO/hal_gpio.c: 98:                     *lat_register[pin_config->port]|=((
      +                          uint8)1 << pin_config->pin);
  7524   003210  C001  FFD9         	movff	gpio_pin_write_logic@pin_config,fsr2l
  7525   003214  C002  FFDA         	movff	gpio_pin_write_logic@pin_config+1,fsr2h
  7526   003218  30DF               	rrcf	223,w,c
  7527   00321A  32E8               	rrcf	wreg,f,c
  7528   00321C  32E8               	rrcf	wreg,f,c
  7529   00321E  0B07               	andlw	7
  7530   003220  6E04               	movwf	??_gpio_pin_write_logic^0,c
  7531   003222  0E01               	movlw	1
  7532   003224  6E05               	movwf	(??_gpio_pin_write_logic+1)^0,c
  7533   003226  2A04               	incf	??_gpio_pin_write_logic^0,f,c
  7534   003228  EF18  F019         	goto	u3614
  7535   00322C                     u3615:
  7536   00322C  90D8               	bcf	status,0,c
  7537   00322E  3605               	rlcf	(??_gpio_pin_write_logic+1)^0,f,c
  7538   003230                     u3614:
  7539   003230  2E04               	decfsz	??_gpio_pin_write_logic^0,f,c
  7540   003232  EF16  F019         	goto	u3615
  7541   003236  C001  FFD9         	movff	gpio_pin_write_logic@pin_config,fsr2l
  7542   00323A  C002  FFDA         	movff	gpio_pin_write_logic@pin_config+1,fsr2h
  7543   00323E  50DF               	movf	223,w,c
  7544   003240  0B07               	andlw	7
  7545   003242  6E06               	movwf	(??_gpio_pin_write_logic+2)^0,c
  7546   003244  5006               	movf	(??_gpio_pin_write_logic+2)^0,w,c
  7547   003246  0D02               	mullw	2
  7548   003248  0E1A               	movlw	low _lat_register
  7549   00324A  24F3               	addwf	243,w,c
  7550   00324C  6ED9               	movwf	fsr2l,c
  7551   00324E  0E01               	movlw	high _lat_register
  7552   003250  20F4               	addwfc	prodh,w,c
  7553   003252  6EDA               	movwf	fsr2h,c
  7554   003254  CFDE F007          	movff	postinc2,??_gpio_pin_write_logic+3
  7555   003258  CFDD F008          	movff	postdec2,??_gpio_pin_write_logic+4
  7556   00325C  C007  FFD9         	movff	??_gpio_pin_write_logic+3,fsr2l
  7557   003260  C008  FFDA         	movff	??_gpio_pin_write_logic+4,fsr2h
  7558   003264  5005               	movf	(??_gpio_pin_write_logic+1)^0,w,c
  7559   003266  12DF               	iorwf	indf2,f,c
  7560                           
  7561                           ;MCAL_Layer/GPIO/hal_gpio.c: 99:                     break;
  7562   003268  EF4B  F019         	goto	l4776
  7563   00326C                     l4774:
  7564   00326C  5003               	movf	gpio_pin_write_logic@logic^0,w,c
  7565   00326E  6E04               	movwf	??_gpio_pin_write_logic^0,c
  7566   003270  6A05               	clrf	(??_gpio_pin_write_logic+1)^0,c
  7567                           
  7568                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7569                           ; Switch size 1, requested type "simple"
  7570                           ; Number of cases is 1, Range of values is 0 to 0
  7571                           ; switch strategies available:
  7572                           ; Name         Instructions Cycles
  7573                           ; simple_byte            4     3 (average)
  7574                           ;	Chosen strategy is simple_byte
  7575   003272  5005               	movf	(??_gpio_pin_write_logic+1)^0,w,c
  7576   003274  0A00               	xorlw	0	; case 0
  7577   003276  B4D8               	btfsc	status,2,c
  7578   003278  EF40  F019         	goto	l6084
  7579   00327C  EFD3  F018         	goto	l4766
  7580   003280                     l6084:
  7581                           
  7582                           ; Switch size 1, requested type "simple"
  7583                           ; Number of cases is 2, Range of values is 0 to 1
  7584                           ; switch strategies available:
  7585                           ; Name         Instructions Cycles
  7586                           ; simple_byte            7     4 (average)
  7587                           ;	Chosen strategy is simple_byte
  7588   003280  5004               	movf	??_gpio_pin_write_logic^0,w,c
  7589   003282  0A00               	xorlw	0	; case 0
  7590   003284  B4D8               	btfsc	status,2,c
  7591   003286  EFD7  F018         	goto	l4768
  7592   00328A  0A01               	xorlw	1	; case 1
  7593   00328C  B4D8               	btfsc	status,2,c
  7594   00328E  EF08  F019         	goto	l4770
  7595   003292  EFD3  F018         	goto	l4766
  7596   003296                     l4776:
  7597                           
  7598                           ;MCAL_Layer/GPIO/hal_gpio.c: 104:     return ret;
  7599   003296  500A               	movf	gpio_pin_write_logic@ret^0,w,c
  7600   003298  0012               	return		;funcret
  7601   00329A                     __end_of_gpio_pin_write_logic:
  7602                           	callstack 0
  7603                           
  7604 ;; *************** function _button_read_state *****************
  7605 ;; Defined at:
  7606 ;;		line 13 in file "ECU-Layer/BUTTON/ecu_button.c"
  7607 ;; Parameters:    Size  Location     Type
  7608 ;;  btn             2    7[COMRAM] PTR const struct .
  7609 ;;		 -> button(3), 
  7610 ;;  btn_state       1    9[COMRAM] PTR enum E3039
  7611 ;;		 -> button_state(1), 
  7612 ;; Auto vars:     Size  Location     Type
  7613 ;;  Pin_Logic_St    1   12[COMRAM] enum E2980
  7614 ;;  ret             1   11[COMRAM] unsigned char 
  7615 ;; Return value:  Size  Location     Type
  7616 ;;                  1    wreg      unsigned char 
  7617 ;; Registers used:
  7618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7619 ;; Tracked objects:
  7620 ;;		On entry : 0/0
  7621 ;;		On exit  : 0/0
  7622 ;;		Unchanged: 0/0
  7623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7624 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7625 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7626 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7627 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7628 ;;Total ram usage:        6 bytes
  7629 ;; Hardware stack levels used: 1
  7630 ;; Hardware stack levels required when called: 3
  7631 ;; This function calls:
  7632 ;;		_gpio_pin_read_logic
  7633 ;; This function is called by:
  7634 ;;		_main
  7635 ;; This function uses a non-reentrant model
  7636 ;;
  7637                           
  7638                           	psect	text30
  7639   00363E                     __ptext30:
  7640                           	callstack 0
  7641   00363E                     _button_read_state:
  7642                           	callstack 27
  7643   00363E                     
  7644                           ;ECU-Layer/BUTTON/ecu_button.c: 15:     logic_t Pin_Logic_Status = LOW;
  7645   00363E  0E00               	movlw	0
  7646   003640  6E0D               	movwf	button_read_state@Pin_Logic_Status^0,c
  7647   003642                     
  7648                           ;ECU-Layer/BUTTON/ecu_button.c: 16:     if((((void*)0) == btn) || (((void*)0) == btn_sta
      +                          te)){
  7649   003642  5008               	movf	button_read_state@btn^0,w,c
  7650   003644  1009               	iorwf	(button_read_state@btn+1)^0,w,c
  7651   003646  B4D8               	btfsc	status,2,c
  7652   003648  EF28  F01B         	goto	u4011
  7653   00364C  EF2A  F01B         	goto	u4010
  7654   003650                     u4011:
  7655   003650  EF32  F01B         	goto	l5120
  7656   003654                     u4010:
  7657   003654  500A               	movf	button_read_state@btn_state^0,w,c
  7658   003656  A4D8               	btfss	status,2,c
  7659   003658  EF30  F01B         	goto	u4021
  7660   00365C  EF32  F01B         	goto	u4020
  7661   003660                     u4021:
  7662   003660  EF36  F01B         	goto	l5122
  7663   003664                     u4020:
  7664   003664                     l5120:
  7665                           
  7666                           ;ECU-Layer/BUTTON/ecu_button.c: 17:         ret = (Std_ReturnType)0x00;
  7667   003664  0E00               	movlw	0
  7668   003666  6E0C               	movwf	button_read_state@ret^0,c
  7669                           
  7670                           ;ECU-Layer/BUTTON/ecu_button.c: 18:     }
  7671   003668  EF69  F01B         	goto	l15
  7672   00366C                     l5122:
  7673                           
  7674                           ;ECU-Layer/BUTTON/ecu_button.c: 20:         Pin_Logic_Status = gpio_pin_read_logic(&(btn
      +                          ->button_pin));
  7675   00366C  C008  F001         	movff	button_read_state@btn,gpio_pin_read_logic@pin_config
  7676   003670  C009  F002         	movff	button_read_state@btn+1,gpio_pin_read_logic@pin_config+1
  7677   003674  EC6B  F01B         	call	_gpio_pin_read_logic	;wreg free
  7678   003678  6E0D               	movwf	button_read_state@Pin_Logic_Status^0,c
  7679   00367A                     
  7680                           ;ECU-Layer/BUTTON/ecu_button.c: 21:         if(BUTTON_ACTIVE_HIGH == btn->button_connect
      +                          ion){
  7681   00367A  EE20 F002          	lfsr	2,2
  7682   00367E  5008               	movf	button_read_state@btn^0,w,c
  7683   003680  26D9               	addwf	fsr2l,f,c
  7684   003682  5009               	movf	(button_read_state@btn+1)^0,w,c
  7685   003684  22DA               	addwfc	fsr2h,f,c
  7686   003686  50DF               	movf	indf2,w,c
  7687   003688  A4D8               	btfss	status,2,c
  7688   00368A  EF49  F01B         	goto	u4031
  7689   00368E  EF4B  F01B         	goto	u4030
  7690   003692                     u4031:
  7691   003692  EF52  F01B         	goto	l5128
  7692   003696                     u4030:
  7693   003696                     
  7694                           ;ECU-Layer/BUTTON/ecu_button.c: 22:             *btn_state = (button_state_t)(Pin_Logic_
      +                          Status);
  7695   003696  500A               	movf	button_read_state@btn_state^0,w,c
  7696   003698  6ED9               	movwf	fsr2l,c
  7697   00369A  6ADA               	clrf	fsr2h,c
  7698   00369C  C00D  FFDF         	movff	button_read_state@Pin_Logic_Status,indf2
  7699                           
  7700                           ;ECU-Layer/BUTTON/ecu_button.c: 23:         }
  7701   0036A0  EF67  F01B         	goto	l5132
  7702   0036A4                     l5128:
  7703   0036A4  EE20 F002          	lfsr	2,2
  7704   0036A8  5008               	movf	button_read_state@btn^0,w,c
  7705   0036AA  26D9               	addwf	fsr2l,f,c
  7706   0036AC  5009               	movf	(button_read_state@btn+1)^0,w,c
  7707   0036AE  22DA               	addwfc	fsr2h,f,c
  7708   0036B0  04DE               	decf	postinc2,w,c
  7709   0036B2  A4D8               	btfss	status,2,c
  7710   0036B4  EF5E  F01B         	goto	u4041
  7711   0036B8  EF60  F01B         	goto	u4040
  7712   0036BC                     u4041:
  7713   0036BC  EF67  F01B         	goto	l5132
  7714   0036C0                     u4040:
  7715   0036C0                     
  7716                           ;ECU-Layer/BUTTON/ecu_button.c: 25:             *btn_state = ~(Pin_Logic_Status) & 0x01;
  7717   0036C0  500A               	movf	button_read_state@btn_state^0,w,c
  7718   0036C2  6ED9               	movwf	fsr2l,c
  7719   0036C4  6ADA               	clrf	fsr2h,c
  7720   0036C6  500D               	movf	button_read_state@Pin_Logic_Status^0,w,c
  7721   0036C8  0AFF               	xorlw	255
  7722   0036CA  0B01               	andlw	1
  7723   0036CC  6EDF               	movwf	indf2,c
  7724   0036CE                     l5132:
  7725                           
  7726                           ;ECU-Layer/BUTTON/ecu_button.c: 28:         ret = (Std_ReturnType)0x01;
  7727   0036CE  0E01               	movlw	1
  7728   0036D0  6E0C               	movwf	button_read_state@ret^0,c
  7729   0036D2                     l15:
  7730                           
  7731                           ;ECU-Layer/BUTTON/ecu_button.c: 30:     return ret;
  7732   0036D2  500C               	movf	button_read_state@ret^0,w,c
  7733   0036D4  0012               	return		;funcret
  7734   0036D6                     __end_of_button_read_state:
  7735                           	callstack 0
  7736                           
  7737 ;; *************** function _gpio_pin_read_logic *****************
  7738 ;; Defined at:
  7739 ;;		line 118 in file "MCAL_Layer/GPIO/hal_gpio.c"
  7740 ;; Parameters:    Size  Location     Type
  7741 ;;  pin_config      2    0[COMRAM] PTR const struct .
  7742 ;;		 -> keypad$keypad_cols_pins(4), keypad(8), button(3), 
  7743 ;; Auto vars:     Size  Location     Type
  7744 ;;		None
  7745 ;; Return value:  Size  Location     Type
  7746 ;;                  1    wreg      unsigned char 
  7747 ;; Registers used:
  7748 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7749 ;; Tracked objects:
  7750 ;;		On entry : 0/0
  7751 ;;		On exit  : 0/0
  7752 ;;		Unchanged: 0/0
  7753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7754 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7756 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7757 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7758 ;;Total ram usage:        7 bytes
  7759 ;; Hardware stack levels used: 1
  7760 ;; Hardware stack levels required when called: 2
  7761 ;; This function calls:
  7762 ;;		Nothing
  7763 ;; This function is called by:
  7764 ;;		_button_read_state
  7765 ;;		_keypad_get_value
  7766 ;; This function uses a non-reentrant model
  7767 ;;
  7768                           
  7769                           	psect	text31
  7770   0036D6                     __ptext31:
  7771                           	callstack 0
  7772   0036D6                     _gpio_pin_read_logic:
  7773                           	callstack 26
  7774   0036D6                     
  7775                           ;MCAL_Layer/GPIO/hal_gpio.c: 119:     if(pin_config == ((void*)0) ||pin_config->pin > 7)
  7776   0036D6  5001               	movf	gpio_pin_read_logic@pin_config^0,w,c
  7777   0036D8  1002               	iorwf	(gpio_pin_read_logic@pin_config+1)^0,w,c
  7778   0036DA  B4D8               	btfsc	status,2,c
  7779   0036DC  EF72  F01B         	goto	u3781
  7780   0036E0  EF74  F01B         	goto	u3780
  7781   0036E4                     u3781:
  7782   0036E4  EF85  F01B         	goto	l4870
  7783   0036E8                     u3780:
  7784   0036E8  C001  FFD9         	movff	gpio_pin_read_logic@pin_config,fsr2l
  7785   0036EC  C002  FFDA         	movff	gpio_pin_read_logic@pin_config+1,fsr2h
  7786   0036F0  30DF               	rrcf	223,w,c
  7787   0036F2  32E8               	rrcf	wreg,f,c
  7788   0036F4  32E8               	rrcf	wreg,f,c
  7789   0036F6  0B07               	andlw	7
  7790   0036F8  6E03               	movwf	??_gpio_pin_read_logic^0,c
  7791   0036FA  0E07               	movlw	7
  7792   0036FC  6403               	cpfsgt	??_gpio_pin_read_logic^0,c
  7793   0036FE  EF83  F01B         	goto	u3791
  7794   003702  EF85  F01B         	goto	u3790
  7795   003706                     u3791:
  7796   003706  EF88  F01B         	goto	l4876
  7797   00370A                     u3790:
  7798   00370A                     l4870:
  7799                           
  7800                           ;MCAL_Layer/GPIO/hal_gpio.c: 120:     {;MCAL_Layer/GPIO/hal_gpio.c: 121:         return 
      +                          5;
  7801   00370A  0E05               	movlw	5
  7802   00370C  EFB4  F01B         	goto	l291
  7803   003710                     l4876:
  7804                           
  7805                           ;MCAL_Layer/GPIO/hal_gpio.c: 124:     {;MCAL_Layer/GPIO/hal_gpio.c: 125:         return 
      +                          (((*port_register[pin_config->port] >> pin_config->pin) & 1));
  7806   003710  C001  FFD9         	movff	gpio_pin_read_logic@pin_config,fsr2l
  7807   003714  C002  FFDA         	movff	gpio_pin_read_logic@pin_config+1,fsr2h
  7808   003718  30DF               	rrcf	223,w,c
  7809   00371A  32E8               	rrcf	wreg,f,c
  7810   00371C  32E8               	rrcf	wreg,f,c
  7811   00371E  0B07               	andlw	7
  7812   003720  6E03               	movwf	??_gpio_pin_read_logic^0,c
  7813   003722  C001  FFD9         	movff	gpio_pin_read_logic@pin_config,fsr2l
  7814   003726  C002  FFDA         	movff	gpio_pin_read_logic@pin_config+1,fsr2h
  7815   00372A  50DF               	movf	223,w,c
  7816   00372C  0B07               	andlw	7
  7817   00372E  6E04               	movwf	(??_gpio_pin_read_logic+1)^0,c
  7818   003730  5004               	movf	(??_gpio_pin_read_logic+1)^0,w,c
  7819   003732  0D02               	mullw	2
  7820   003734  0E10               	movlw	low _port_register
  7821   003736  24F3               	addwf	243,w,c
  7822   003738  6ED9               	movwf	fsr2l,c
  7823   00373A  0E01               	movlw	high _port_register
  7824   00373C  20F4               	addwfc	prodh,w,c
  7825   00373E  6EDA               	movwf	fsr2h,c
  7826   003740  CFDE F005          	movff	postinc2,??_gpio_pin_read_logic+2
  7827   003744  CFDD F006          	movff	postdec2,??_gpio_pin_read_logic+3
  7828   003748  C005  FFD9         	movff	??_gpio_pin_read_logic+2,fsr2l
  7829   00374C  C006  FFDA         	movff	??_gpio_pin_read_logic+3,fsr2h
  7830   003750  50DF               	movf	indf2,w,c
  7831   003752  6E07               	movwf	(??_gpio_pin_read_logic+4)^0,c
  7832   003754  2A03               	incf	??_gpio_pin_read_logic^0,f,c
  7833   003756  EFAF  F01B         	goto	u3804
  7834   00375A                     u3805:
  7835   00375A  90D8               	bcf	status,0,c
  7836   00375C  3207               	rrcf	(??_gpio_pin_read_logic+4)^0,f,c
  7837   00375E                     u3804:
  7838   00375E  2E03               	decfsz	??_gpio_pin_read_logic^0,f,c
  7839   003760  EFAD  F01B         	goto	u3805
  7840   003764  5007               	movf	(??_gpio_pin_read_logic+4)^0,w,c
  7841   003766  0B01               	andlw	1
  7842   003768                     l291:
  7843   003768  0012               	return		;funcret
  7844   00376A                     __end_of_gpio_pin_read_logic:
  7845                           	callstack 0
  7846                           
  7847 ;; *************** function _button_initialize *****************
  7848 ;; Defined at:
  7849 ;;		line 3 in file "ECU-Layer/BUTTON/ecu_button.c"
  7850 ;; Parameters:    Size  Location     Type
  7851 ;;  btn             2    9[COMRAM] PTR const struct .
  7852 ;;		 -> button(3), 
  7853 ;; Auto vars:     Size  Location     Type
  7854 ;;  ret             1   11[COMRAM] unsigned char 
  7855 ;; Return value:  Size  Location     Type
  7856 ;;                  1    wreg      unsigned char 
  7857 ;; Registers used:
  7858 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7859 ;; Tracked objects:
  7860 ;;		On entry : 0/0
  7861 ;;		On exit  : 0/0
  7862 ;;		Unchanged: 0/0
  7863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7864 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7865 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7867 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7868 ;;Total ram usage:        3 bytes
  7869 ;; Hardware stack levels used: 1
  7870 ;; Hardware stack levels required when called: 3
  7871 ;; This function calls:
  7872 ;;		_gpio_pin_direction_inti
  7873 ;; This function is called by:
  7874 ;;		_main
  7875 ;; This function uses a non-reentrant model
  7876 ;;
  7877                           
  7878                           	psect	text32
  7879   003D90                     __ptext32:
  7880                           	callstack 0
  7881   003D90                     _button_initialize:
  7882                           	callstack 27
  7883   003D90                     
  7884                           ;ECU-Layer/BUTTON/ecu_button.c: 5:     if(((void*)0) == btn){
  7885   003D90  500A               	movf	button_initialize@btn^0,w,c
  7886   003D92  100B               	iorwf	(button_initialize@btn+1)^0,w,c
  7887   003D94  A4D8               	btfss	status,2,c
  7888   003D96  EFCF  F01E         	goto	u4001
  7889   003D9A  EFD1  F01E         	goto	u4000
  7890   003D9E                     u4001:
  7891   003D9E  EFD5  F01E         	goto	l5108
  7892   003DA2                     u4000:
  7893   003DA2                     
  7894                           ;ECU-Layer/BUTTON/ecu_button.c: 6:         ret = (Std_ReturnType)0x00;
  7895   003DA2  0E00               	movlw	0
  7896   003DA4  6E0C               	movwf	button_initialize@ret^0,c
  7897                           
  7898                           ;ECU-Layer/BUTTON/ecu_button.c: 7:     }
  7899   003DA6  EFDC  F01E         	goto	l5110
  7900   003DAA                     l5108:
  7901                           
  7902                           ;ECU-Layer/BUTTON/ecu_button.c: 9:         ret = gpio_pin_direction_inti(&(btn->button_p
      +                          in));
  7903   003DAA  C00A  F001         	movff	button_initialize@btn,gpio_pin_direction_inti@pin_config
  7904   003DAE  C00B  F002         	movff	button_initialize@btn+1,gpio_pin_direction_inti@pin_config+1
  7905   003DB2  EC15  F018         	call	_gpio_pin_direction_inti	;wreg free
  7906   003DB6  6E0C               	movwf	button_initialize@ret^0,c
  7907   003DB8                     l5110:
  7908                           
  7909                           ;ECU-Layer/BUTTON/ecu_button.c: 11:     return ret;
  7910   003DB8  500C               	movf	button_initialize@ret^0,w,c
  7911   003DBA  0012               	return		;funcret
  7912   003DBC                     __end_of_button_initialize:
  7913                           	callstack 0
  7914                           
  7915 ;; *************** function _gpio_pin_direction_inti *****************
  7916 ;; Defined at:
  7917 ;;		line 26 in file "MCAL_Layer/GPIO/hal_gpio.c"
  7918 ;; Parameters:    Size  Location     Type
  7919 ;;  pin_config      2    0[COMRAM] PTR const struct .
  7920 ;;		 -> keypad$keypad_rows_pins(4), keypad$keypad_cols_pins(4), keypad(8), lcd$Dx(4), 
  7921 ;;		 -> lcd(6), button(3), led_inti@pin_config(1), 
  7922 ;; Auto vars:     Size  Location     Type
  7923 ;;  ret             1    8[COMRAM] unsigned char 
  7924 ;; Return value:  Size  Location     Type
  7925 ;;                  1    wreg      unsigned char 
  7926 ;; Registers used:
  7927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7928 ;; Tracked objects:
  7929 ;;		On entry : 0/0
  7930 ;;		On exit  : 0/0
  7931 ;;		Unchanged: 0/0
  7932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7933 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7934 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7935 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7936 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7937 ;;Total ram usage:        9 bytes
  7938 ;; Hardware stack levels used: 1
  7939 ;; Hardware stack levels required when called: 2
  7940 ;; This function calls:
  7941 ;;		Nothing
  7942 ;; This function is called by:
  7943 ;;		_button_initialize
  7944 ;;		_keypad_initi
  7945 ;;		_lcd_4bit_initi
  7946 ;;		_gpio_pin_inti
  7947 ;;		_lcd_8bit_initi
  7948 ;;		_EXT_Interupt_Init
  7949 ;; This function uses a non-reentrant model
  7950 ;;
  7951                           
  7952                           	psect	text33
  7953   00302A                     __ptext33:
  7954                           	callstack 0
  7955   00302A                     _gpio_pin_direction_inti:
  7956                           	callstack 27
  7957   00302A                     
  7958                           ;MCAL_Layer/GPIO/hal_gpio.c: 28:     Std_ReturnType ret = (Std_ReturnType)0x01;
  7959   00302A  0E01               	movlw	1
  7960   00302C  6E09               	movwf	gpio_pin_direction_inti@ret^0,c
  7961   00302E                     
  7962                           ;MCAL_Layer/GPIO/hal_gpio.c: 29:     if(pin_config == ((void*)0) || pin_config->pin > 7)
  7963   00302E  5001               	movf	gpio_pin_direction_inti@pin_config^0,w,c
  7964   003030  1002               	iorwf	(gpio_pin_direction_inti@pin_config+1)^0,w,c
  7965   003032  B4D8               	btfsc	status,2,c
  7966   003034  EF1E  F018         	goto	u3721
  7967   003038  EF20  F018         	goto	u3720
  7968   00303C                     u3721:
  7969   00303C  EF31  F018         	goto	l4848
  7970   003040                     u3720:
  7971   003040  C001  FFD9         	movff	gpio_pin_direction_inti@pin_config,fsr2l
  7972   003044  C002  FFDA         	movff	gpio_pin_direction_inti@pin_config+1,fsr2h
  7973   003048  30DF               	rrcf	223,w,c
  7974   00304A  32E8               	rrcf	wreg,f,c
  7975   00304C  32E8               	rrcf	wreg,f,c
  7976   00304E  0B07               	andlw	7
  7977   003050  6E03               	movwf	??_gpio_pin_direction_inti^0,c
  7978   003052  0E07               	movlw	7
  7979   003054  6403               	cpfsgt	??_gpio_pin_direction_inti^0,c
  7980   003056  EF2F  F018         	goto	u3731
  7981   00305A  EF31  F018         	goto	u3730
  7982   00305E                     u3731:
  7983   00305E  EF94  F018         	goto	l4856
  7984   003062                     u3730:
  7985   003062                     l4848:
  7986                           
  7987                           ;MCAL_Layer/GPIO/hal_gpio.c: 30:     {;MCAL_Layer/GPIO/hal_gpio.c: 31:         ret = (St
      +                          d_ReturnType)0x00;
  7988   003062  0E00               	movlw	0
  7989   003064  6E09               	movwf	gpio_pin_direction_inti@ret^0,c
  7990                           
  7991                           ;MCAL_Layer/GPIO/hal_gpio.c: 32:     }
  7992   003066  EFB5  F018         	goto	l4858
  7993   00306A                     l4850:
  7994                           
  7995                           ;MCAL_Layer/GPIO/hal_gpio.c: 37:                 *tris_register[pin_config->port]&=~((ui
      +                          nt8)1 << pin_config->pin);
  7996   00306A  C001  FFD9         	movff	gpio_pin_direction_inti@pin_config,fsr2l
  7997   00306E  C002  FFDA         	movff	gpio_pin_direction_inti@pin_config+1,fsr2h
  7998   003072  30DF               	rrcf	223,w,c
  7999   003074  32E8               	rrcf	wreg,f,c
  8000   003076  32E8               	rrcf	wreg,f,c
  8001   003078  0B07               	andlw	7
  8002   00307A  6E03               	movwf	??_gpio_pin_direction_inti^0,c
  8003   00307C  0E01               	movlw	1
  8004   00307E  6E04               	movwf	(??_gpio_pin_direction_inti+1)^0,c
  8005   003080  2A03               	incf	??_gpio_pin_direction_inti^0,f,c
  8006   003082  EF45  F018         	goto	u3744
  8007   003086                     u3745:
  8008   003086  90D8               	bcf	status,0,c
  8009   003088  3604               	rlcf	(??_gpio_pin_direction_inti+1)^0,f,c
  8010   00308A                     u3744:
  8011   00308A  2E03               	decfsz	??_gpio_pin_direction_inti^0,f,c
  8012   00308C  EF43  F018         	goto	u3745
  8013   003090  5004               	movf	(??_gpio_pin_direction_inti+1)^0,w,c
  8014   003092  0AFF               	xorlw	255
  8015   003094  6E05               	movwf	(??_gpio_pin_direction_inti+2)^0,c
  8016   003096  C001  FFD9         	movff	gpio_pin_direction_inti@pin_config,fsr2l
  8017   00309A  C002  FFDA         	movff	gpio_pin_direction_inti@pin_config+1,fsr2h
  8018   00309E  50DF               	movf	223,w,c
  8019   0030A0  0B07               	andlw	7
  8020   0030A2  6E06               	movwf	(??_gpio_pin_direction_inti+3)^0,c
  8021   0030A4  5006               	movf	(??_gpio_pin_direction_inti+3)^0,w,c
  8022   0030A6  0D02               	mullw	2
  8023   0030A8  0E24               	movlw	low _tris_register
  8024   0030AA  24F3               	addwf	243,w,c
  8025   0030AC  6ED9               	movwf	fsr2l,c
  8026   0030AE  0E01               	movlw	high _tris_register
  8027   0030B0  20F4               	addwfc	prodh,w,c
  8028   0030B2  6EDA               	movwf	fsr2h,c
  8029   0030B4  CFDE F007          	movff	postinc2,??_gpio_pin_direction_inti+4
  8030   0030B8  CFDD F008          	movff	postdec2,??_gpio_pin_direction_inti+5
  8031   0030BC  C007  FFD9         	movff	??_gpio_pin_direction_inti+4,fsr2l
  8032   0030C0  C008  FFDA         	movff	??_gpio_pin_direction_inti+5,fsr2h
  8033   0030C4  5005               	movf	(??_gpio_pin_direction_inti+2)^0,w,c
  8034   0030C6  16DF               	andwf	indf2,f,c
  8035                           
  8036                           ;MCAL_Layer/GPIO/hal_gpio.c: 38:                 break;
  8037   0030C8  EFB5  F018         	goto	l4858
  8038   0030CC                     l4852:
  8039                           
  8040                           ;MCAL_Layer/GPIO/hal_gpio.c: 40:                 *tris_register[pin_config->port]|=((uin
      +                          t8)1 << pin_config->pin);
  8041   0030CC  C001  FFD9         	movff	gpio_pin_direction_inti@pin_config,fsr2l
  8042   0030D0  C002  FFDA         	movff	gpio_pin_direction_inti@pin_config+1,fsr2h
  8043   0030D4  30DF               	rrcf	223,w,c
  8044   0030D6  32E8               	rrcf	wreg,f,c
  8045   0030D8  32E8               	rrcf	wreg,f,c
  8046   0030DA  0B07               	andlw	7
  8047   0030DC  6E03               	movwf	??_gpio_pin_direction_inti^0,c
  8048   0030DE  0E01               	movlw	1
  8049   0030E0  6E04               	movwf	(??_gpio_pin_direction_inti+1)^0,c
  8050   0030E2  2A03               	incf	??_gpio_pin_direction_inti^0,f,c
  8051   0030E4  EF76  F018         	goto	u3754
  8052   0030E8                     u3755:
  8053   0030E8  90D8               	bcf	status,0,c
  8054   0030EA  3604               	rlcf	(??_gpio_pin_direction_inti+1)^0,f,c
  8055   0030EC                     u3754:
  8056   0030EC  2E03               	decfsz	??_gpio_pin_direction_inti^0,f,c
  8057   0030EE  EF74  F018         	goto	u3755
  8058   0030F2  C001  FFD9         	movff	gpio_pin_direction_inti@pin_config,fsr2l
  8059   0030F6  C002  FFDA         	movff	gpio_pin_direction_inti@pin_config+1,fsr2h
  8060   0030FA  50DF               	movf	223,w,c
  8061   0030FC  0B07               	andlw	7
  8062   0030FE  6E05               	movwf	(??_gpio_pin_direction_inti+2)^0,c
  8063   003100  5005               	movf	(??_gpio_pin_direction_inti+2)^0,w,c
  8064   003102  0D02               	mullw	2
  8065   003104  0E24               	movlw	low _tris_register
  8066   003106  24F3               	addwf	243,w,c
  8067   003108  6ED9               	movwf	fsr2l,c
  8068   00310A  0E01               	movlw	high _tris_register
  8069   00310C  20F4               	addwfc	prodh,w,c
  8070   00310E  6EDA               	movwf	fsr2h,c
  8071   003110  CFDE F006          	movff	postinc2,??_gpio_pin_direction_inti+3
  8072   003114  CFDD F007          	movff	postdec2,??_gpio_pin_direction_inti+4
  8073   003118  C006  FFD9         	movff	??_gpio_pin_direction_inti+3,fsr2l
  8074   00311C  C007  FFDA         	movff	??_gpio_pin_direction_inti+4,fsr2h
  8075   003120  5004               	movf	(??_gpio_pin_direction_inti+1)^0,w,c
  8076   003122  12DF               	iorwf	indf2,f,c
  8077                           
  8078                           ;MCAL_Layer/GPIO/hal_gpio.c: 41:                 break;
  8079   003124  EFB5  F018         	goto	l4858
  8080   003128                     l4856:
  8081   003128  C001  FFD9         	movff	gpio_pin_direction_inti@pin_config,fsr2l
  8082   00312C  C002  FFDA         	movff	gpio_pin_direction_inti@pin_config+1,fsr2h
  8083   003130  BCDF               	btfsc	indf2,6,c
  8084   003132  EF9D  F018         	goto	u3761
  8085   003136  EFA0  F018         	goto	u3760
  8086   00313A                     u3761:
  8087   00313A  0E01               	movlw	1
  8088   00313C  EFA1  F018         	goto	u3770
  8089   003140                     u3760:
  8090   003140  0E00               	movlw	0
  8091   003142                     u3770:
  8092   003142  6E03               	movwf	??_gpio_pin_direction_inti^0,c
  8093   003144  6A04               	clrf	(??_gpio_pin_direction_inti+1)^0,c
  8094                           
  8095                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8096                           ; Switch size 1, requested type "simple"
  8097                           ; Number of cases is 1, Range of values is 0 to 0
  8098                           ; switch strategies available:
  8099                           ; Name         Instructions Cycles
  8100                           ; simple_byte            4     3 (average)
  8101                           ;	Chosen strategy is simple_byte
  8102   003146  5004               	movf	(??_gpio_pin_direction_inti+1)^0,w,c
  8103   003148  0A00               	xorlw	0	; case 0
  8104   00314A  B4D8               	btfsc	status,2,c
  8105   00314C  EFAA  F018         	goto	l6086
  8106   003150  EF31  F018         	goto	l4848
  8107   003154                     l6086:
  8108                           
  8109                           ; Switch size 1, requested type "simple"
  8110                           ; Number of cases is 2, Range of values is 0 to 1
  8111                           ; switch strategies available:
  8112                           ; Name         Instructions Cycles
  8113                           ; simple_byte            7     4 (average)
  8114                           ;	Chosen strategy is simple_byte
  8115   003154  5003               	movf	??_gpio_pin_direction_inti^0,w,c
  8116   003156  0A00               	xorlw	0	; case 0
  8117   003158  B4D8               	btfsc	status,2,c
  8118   00315A  EF35  F018         	goto	l4850
  8119   00315E  0A01               	xorlw	1	; case 1
  8120   003160  B4D8               	btfsc	status,2,c
  8121   003162  EF66  F018         	goto	l4852
  8122   003166  EF31  F018         	goto	l4848
  8123   00316A                     l4858:
  8124                           
  8125                           ;MCAL_Layer/GPIO/hal_gpio.c: 47:     return ret;
  8126   00316A  5009               	movf	gpio_pin_direction_inti@ret^0,w,c
  8127   00316C  0012               	return		;funcret
  8128   00316E                     __end_of_gpio_pin_direction_inti:
  8129                           	callstack 0
  8130                           
  8131 ;; *************** function _InteruptManager *****************
  8132 ;; Defined at:
  8133 ;;		line 22 in file "MCAL_Layer/Interupt/hal_interupt_manger.c"
  8134 ;; Parameters:    Size  Location     Type
  8135 ;;		None
  8136 ;; Auto vars:     Size  Location     Type
  8137 ;;		None
  8138 ;; Return value:  Size  Location     Type
  8139 ;;                  1    wreg      void 
  8140 ;; Registers used:
  8141 ;;		wreg, status,2, cstack
  8142 ;; Tracked objects:
  8143 ;;		On entry : 0/0
  8144 ;;		On exit  : 0/0
  8145 ;;		Unchanged: 0/0
  8146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8151 ;;Total ram usage:        0 bytes
  8152 ;; Hardware stack levels used: 1
  8153 ;; Hardware stack levels required when called: 1
  8154 ;; This function calls:
  8155 ;;		_INT0_ISR
  8156 ;;		_INT1_ISR
  8157 ;;		_INT2_ISR
  8158 ;;		_TMR0_ISR
  8159 ;; This function is called by:
  8160 ;;		Interrupt level 2
  8161 ;; This function uses a non-reentrant model
  8162 ;;
  8163                           
  8164                           	psect	intcode
  8165   000008                     __pintcode:
  8166                           	callstack 0
  8167   000008                     _InteruptManager:
  8168                           	callstack 20
  8169                           
  8170                           ;incstack = 0
  8171   000008  827F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  8172   00000A  EDB5  F01B         	call	int_func,f	;refresh shadow registers
  8173                           
  8174                           	psect	intcode_body
  8175   00376A                     __pintcode_body:
  8176                           	callstack 20
  8177   00376A                     int_func:
  8178                           	callstack 20
  8179   00376A  0006               	pop		; remove dummy address from shadow register refresh
  8180   00376C                     
  8181                           ;MCAL_Layer/Interupt/hal_interupt_manger.c: 23:     if((INTCONbits.INT0IE) == 1 && (INTC
      +                          ONbits.INT0IF) == 1)
  8182   00376C  A8F2               	btfss	242,4,c	;volatile
  8183   00376E  EFBB  F01B         	goto	i2u339_41
  8184   003772  EFBD  F01B         	goto	i2u339_40
  8185   003776                     i2u339_41:
  8186   003776  EFC6  F01B         	goto	i2l422
  8187   00377A                     i2u339_40:
  8188   00377A  A2F2               	btfss	242,1,c	;volatile
  8189   00377C  EFC2  F01B         	goto	i2u340_41
  8190   003780  EFC4  F01B         	goto	i2u340_40
  8191   003784                     i2u340_41:
  8192   003784  EFC6  F01B         	goto	i2l422
  8193   003788                     i2u340_40:
  8194   003788                     
  8195                           ;MCAL_Layer/Interupt/hal_interupt_manger.c: 24:     {;MCAL_Layer/Interupt/hal_interupt_m
      +                          anger.c: 25:         INT0_ISR();
  8196   003788  EC01  F01F         	call	_INT0_ISR	;wreg free
  8197   00378C                     i2l422:
  8198                           
  8199                           ;MCAL_Layer/Interupt/hal_interupt_manger.c: 28:     if((INTCON3bits.INT1IE) == 1 && (INT
      +                          CON3bits.INT1IF) == 1)
  8200   00378C  A6F0               	btfss	240,3,c	;volatile
  8201   00378E  EFCB  F01B         	goto	i2u341_41
  8202   003792  EFCD  F01B         	goto	i2u341_40
  8203   003796                     i2u341_41:
  8204   003796  EFD6  F01B         	goto	i2l424
  8205   00379A                     i2u341_40:
  8206   00379A  A0F0               	btfss	240,0,c	;volatile
  8207   00379C  EFD2  F01B         	goto	i2u342_41
  8208   0037A0  EFD4  F01B         	goto	i2u342_40
  8209   0037A4                     i2u342_41:
  8210   0037A4  EFD6  F01B         	goto	i2l424
  8211   0037A8                     i2u342_40:
  8212   0037A8                     
  8213                           ;MCAL_Layer/Interupt/hal_interupt_manger.c: 29:     {;MCAL_Layer/Interupt/hal_interupt_m
      +                          anger.c: 30:         INT1_ISR();
  8214   0037A8  ECFF  F01E         	call	_INT1_ISR	;wreg free
  8215   0037AC                     i2l424:
  8216                           
  8217                           ;MCAL_Layer/Interupt/hal_interupt_manger.c: 33:     if((INTCON3bits.INT2IE) == 1 && (INT
      +                          CON3bits.INT2IF) == 1)
  8218   0037AC  A8F0               	btfss	240,4,c	;volatile
  8219   0037AE  EFDB  F01B         	goto	i2u343_41
  8220   0037B2  EFDD  F01B         	goto	i2u343_40
  8221   0037B6                     i2u343_41:
  8222   0037B6  EFE6  F01B         	goto	i2l426
  8223   0037BA                     i2u343_40:
  8224   0037BA  A2F0               	btfss	240,1,c	;volatile
  8225   0037BC  EFE2  F01B         	goto	i2u344_41
  8226   0037C0  EFE4  F01B         	goto	i2u344_40
  8227   0037C4                     i2u344_41:
  8228   0037C4  EFE6  F01B         	goto	i2l426
  8229   0037C8                     i2u344_40:
  8230   0037C8                     
  8231                           ;MCAL_Layer/Interupt/hal_interupt_manger.c: 34:     {;MCAL_Layer/Interupt/hal_interupt_m
      +                          anger.c: 35:         INT2_ISR();
  8232   0037C8  ECFD  F01E         	call	_INT2_ISR	;wreg free
  8233   0037CC                     i2l426:
  8234                           
  8235                           ;MCAL_Layer/Interupt/hal_interupt_manger.c: 38:     if((INTCONbits.TMR0IE) == 1 && (INTC
      +                          ONbits.TMR0IF) == 1)
  8236   0037CC  AAF2               	btfss	242,5,c	;volatile
  8237   0037CE  EFEB  F01B         	goto	i2u345_41
  8238   0037D2  EFED  F01B         	goto	i2u345_40
  8239   0037D6                     i2u345_41:
  8240   0037D6  EFF6  F01B         	goto	i2l429
  8241   0037DA                     i2u345_40:
  8242   0037DA  A4F2               	btfss	242,2,c	;volatile
  8243   0037DC  EFF2  F01B         	goto	i2u346_41
  8244   0037E0  EFF4  F01B         	goto	i2u346_40
  8245   0037E4                     i2u346_41:
  8246   0037E4  EFF6  F01B         	goto	i2l429
  8247   0037E8                     i2u346_40:
  8248   0037E8                     
  8249                           ;MCAL_Layer/Interupt/hal_interupt_manger.c: 39:     {;MCAL_Layer/Interupt/hal_interupt_m
      +                          anger.c: 40:         TMR0_ISR();
  8250   0037E8  ECF1  F01E         	call	_TMR0_ISR	;wreg free
  8251   0037EC                     i2l429:
  8252   0037EC  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  8253   0037EE  0011               	retfie		f
  8254   0037F0                     __end_of_InteruptManager:
  8255                           	callstack 0
  8256                           
  8257 ;; *************** function _TMR0_ISR *****************
  8258 ;; Defined at:
  8259 ;;		line 91 in file "MCAL_Layer/Timer0/hal_timer0.c"
  8260 ;; Parameters:    Size  Location     Type
  8261 ;;		None
  8262 ;; Auto vars:     Size  Location     Type
  8263 ;;		None
  8264 ;; Return value:  Size  Location     Type
  8265 ;;                  1    wreg      void 
  8266 ;; Registers used:
  8267 ;;		wreg, status,2
  8268 ;; Tracked objects:
  8269 ;;		On entry : 0/0
  8270 ;;		On exit  : 0/0
  8271 ;;		Unchanged: 0/0
  8272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8276 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8277 ;;Total ram usage:        0 bytes
  8278 ;; Hardware stack levels used: 1
  8279 ;; This function calls:
  8280 ;;		Nothing
  8281 ;; This function is called by:
  8282 ;;		_InteruptManager
  8283 ;; This function uses a non-reentrant model
  8284 ;;
  8285                           
  8286                           	psect	text35
  8287   003DE2                     __ptext35:
  8288                           	callstack 0
  8289   003DE2                     _TMR0_ISR:
  8290                           	callstack 20
  8291   003DE2                     
  8292                           ;MCAL_Layer/Timer0/hal_timer0.c: 92:     (INTCONbits.TMR0IF = 0);
  8293   003DE2  94F2               	bcf	242,2,c	;volatile
  8294   003DE4                     
  8295                           ;MCAL_Layer/Timer0/hal_timer0.c: 93:     TMR0H = preload >> 8;
  8296   003DE4  0100               	movlb	0	; () banked
  8297   003DE6  51DC               	movf	(_preload+1)& (0+255),w,b
  8298   003DE8  6ED7               	movwf	215,c	;volatile
  8299   003DEA                     
  8300                           ; BSR set to: 0
  8301                           ;MCAL_Layer/Timer0/hal_timer0.c: 94:     TMR0L = (uint8)(preload);
  8302   003DEA  C0DB  FFD6         	movff	_preload,4054	;volatile
  8303   003DEE                     
  8304                           ; BSR set to: 0
  8305   003DEE  0012               	return		;funcret
  8306   003DF0                     __end_of_TMR0_ISR:
  8307                           	callstack 0
  8308                           
  8309 ;; *************** function _INT2_ISR *****************
  8310 ;; Defined at:
  8311 ;;		line 159 in file "MCAL_Layer/Interupt/hal_ext_interupt.c"
  8312 ;; Parameters:    Size  Location     Type
  8313 ;;		None
  8314 ;; Auto vars:     Size  Location     Type
  8315 ;;		None
  8316 ;; Return value:  Size  Location     Type
  8317 ;;                  1    wreg      void 
  8318 ;; Registers used:
  8319 ;;		None
  8320 ;; Tracked objects:
  8321 ;;		On entry : 0/0
  8322 ;;		On exit  : 0/0
  8323 ;;		Unchanged: 0/0
  8324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8329 ;;Total ram usage:        0 bytes
  8330 ;; Hardware stack levels used: 1
  8331 ;; This function calls:
  8332 ;;		Nothing
  8333 ;; This function is called by:
  8334 ;;		_InteruptManager
  8335 ;; This function uses a non-reentrant model
  8336 ;;
  8337                           
  8338                           	psect	text36
  8339   003DFA                     __ptext36:
  8340                           	callstack 0
  8341   003DFA                     _INT2_ISR:
  8342                           	callstack 20
  8343   003DFA                     
  8344                           ;MCAL_Layer/Interupt/hal_ext_interupt.c: 160:     (INTCON3bits.INT2IF = 0);
  8345   003DFA  92F0               	bcf	240,1,c	;volatile
  8346   003DFC  0012               	return		;funcret
  8347   003DFE                     __end_of_INT2_ISR:
  8348                           	callstack 0
  8349                           
  8350 ;; *************** function _INT1_ISR *****************
  8351 ;; Defined at:
  8352 ;;		line 148 in file "MCAL_Layer/Interupt/hal_ext_interupt.c"
  8353 ;; Parameters:    Size  Location     Type
  8354 ;;		None
  8355 ;; Auto vars:     Size  Location     Type
  8356 ;;		None
  8357 ;; Return value:  Size  Location     Type
  8358 ;;                  1    wreg      void 
  8359 ;; Registers used:
  8360 ;;		None
  8361 ;; Tracked objects:
  8362 ;;		On entry : 0/0
  8363 ;;		On exit  : 0/0
  8364 ;;		Unchanged: 0/0
  8365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8370 ;;Total ram usage:        0 bytes
  8371 ;; Hardware stack levels used: 1
  8372 ;; This function calls:
  8373 ;;		Nothing
  8374 ;; This function is called by:
  8375 ;;		_InteruptManager
  8376 ;; This function uses a non-reentrant model
  8377 ;;
  8378                           
  8379                           	psect	text37
  8380   003DFE                     __ptext37:
  8381                           	callstack 0
  8382   003DFE                     _INT1_ISR:
  8383                           	callstack 20
  8384   003DFE                     
  8385                           ;MCAL_Layer/Interupt/hal_ext_interupt.c: 149:     (INTCON3bits.INT1IF = 0);
  8386   003DFE  90F0               	bcf	240,0,c	;volatile
  8387   003E00  0012               	return		;funcret
  8388   003E02                     __end_of_INT1_ISR:
  8389                           	callstack 0
  8390                           
  8391 ;; *************** function _INT0_ISR *****************
  8392 ;; Defined at:
  8393 ;;		line 137 in file "MCAL_Layer/Interupt/hal_ext_interupt.c"
  8394 ;; Parameters:    Size  Location     Type
  8395 ;;		None
  8396 ;; Auto vars:     Size  Location     Type
  8397 ;;		None
  8398 ;; Return value:  Size  Location     Type
  8399 ;;                  1    wreg      void 
  8400 ;; Registers used:
  8401 ;;		None
  8402 ;; Tracked objects:
  8403 ;;		On entry : 0/0
  8404 ;;		On exit  : 0/0
  8405 ;;		Unchanged: 0/0
  8406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8411 ;;Total ram usage:        0 bytes
  8412 ;; Hardware stack levels used: 1
  8413 ;; This function calls:
  8414 ;;		Nothing
  8415 ;; This function is called by:
  8416 ;;		_InteruptManager
  8417 ;; This function uses a non-reentrant model
  8418 ;;
  8419                           
  8420                           	psect	text38
  8421   003E02                     __ptext38:
  8422                           	callstack 0
  8423   003E02                     _INT0_ISR:
  8424                           	callstack 20
  8425   003E02                     
  8426                           ;MCAL_Layer/Interupt/hal_ext_interupt.c: 138:     (INTCONbits.INT0IF = 0);
  8427   003E02  92F2               	bcf	242,1,c	;volatile
  8428   003E04  0012               	return		;funcret
  8429   003E06                     __end_of_INT0_ISR:
  8430                           	callstack 0
  8431                           
  8432                           	psect	rparam
  8433   000000                     
  8434                           	psect	temp
  8435   00007F                     btemp:
  8436                           	callstack 0
  8437   00007F                     	ds	1
  8438   000000                     int$flags	set	btemp
  8439   000000                     wtemp8	set	btemp+1
  8440   000000                     ttemp5	set	btemp+1
  8441   000000                     ttemp6	set	btemp+4
  8442   000000                     ttemp7	set	btemp+8
  8443                           
  8444                           	psect	config
  8445                           
  8446                           ; Padding undefined space
  8447   300000                     	org	3145728
  8448   300000  FF                 	db	255
  8449                           
  8450                           ;Config register CONFIG1H @ 0x300001
  8451                           ;	Oscillator Selection bits
  8452                           ;	OSC = HS, HS oscillator
  8453                           ;	Fail-Safe Clock Monitor Enable bit
  8454                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  8455                           ;	Internal/External Oscillator Switchover bit
  8456                           ;	IESO = OFF, Oscillator Switchover mode disabled
  8457   300001                     	org	3145729
  8458   300001  02                 	db	2
  8459                           
  8460                           ;Config register CONFIG2L @ 0x300002
  8461                           ;	Power-up Timer Enable bit
  8462                           ;	PWRT = OFF, PWRT disabled
  8463                           ;	Brown-out Reset Enable bits
  8464                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  8465                           ;	Brown Out Reset Voltage bits
  8466                           ;	BORV = 1, 
  8467   300002                     	org	3145730
  8468   300002  09                 	db	9
  8469                           
  8470                           ;Config register CONFIG2H @ 0x300003
  8471                           ;	Watchdog Timer Enable bit
  8472                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  8473                           ;	Watchdog Timer Postscale Select bits
  8474                           ;	WDTPS = 32768, 1:32768
  8475   300003                     	org	3145731
  8476   300003  1E                 	db	30
  8477                           
  8478                           ; Padding undefined space
  8479   300004                     	org	3145732
  8480   300004  FF                 	db	255
  8481                           
  8482                           ;Config register CONFIG3H @ 0x300005
  8483                           ;	CCP2 MUX bit
  8484                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  8485                           ;	PORTB A/D Enable bit
  8486                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  8487                           ;	Low-Power Timer1 Oscillator Enable bit
  8488                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  8489                           ;	MCLR Pin Enable bit
  8490                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  8491   300005                     	org	3145733
  8492   300005  81                 	db	129
  8493                           
  8494                           ;Config register CONFIG4L @ 0x300006
  8495                           ;	Stack Full/Underflow Reset Enable bit
  8496                           ;	STVREN = ON, Stack full/underflow will cause Reset
  8497                           ;	Single-Supply ICSP Enable bit
  8498                           ;	LVP = OFF, Single-Supply ICSP disabled
  8499                           ;	Extended Instruction Set Enable bit
  8500                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  8501                           ;	Background Debugger Enable bit
  8502                           ;	DEBUG = 0x1, unprogrammed default
  8503   300006                     	org	3145734
  8504   300006  81                 	db	129
  8505                           
  8506                           ; Padding undefined space
  8507   300007                     	org	3145735
  8508   300007  FF                 	db	255
  8509                           
  8510                           ;Config register CONFIG5L @ 0x300008
  8511                           ;	Code Protection bit
  8512                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  8513                           ;	Code Protection bit
  8514                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  8515                           ;	Code Protection bit
  8516                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  8517                           ;	Code Protection bit
  8518                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  8519   300008                     	org	3145736
  8520   300008  0F                 	db	15
  8521                           
  8522                           ;Config register CONFIG5H @ 0x300009
  8523                           ;	Boot Block Code Protection bit
  8524                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  8525                           ;	Data EEPROM Code Protection bit
  8526                           ;	CPD = OFF, Data EEPROM not code-protected
  8527   300009                     	org	3145737
  8528   300009  C0                 	db	192
  8529                           
  8530                           ;Config register CONFIG6L @ 0x30000A
  8531                           ;	Write Protection bit
  8532                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  8533                           ;	Write Protection bit
  8534                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  8535                           ;	Write Protection bit
  8536                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  8537                           ;	Write Protection bit
  8538                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  8539   30000A                     	org	3145738
  8540   30000A  0F                 	db	15
  8541                           
  8542                           ;Config register CONFIG6H @ 0x30000B
  8543                           ;	Configuration Register Write Protection bit
  8544                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  8545                           ;	Boot Block Write Protection bit
  8546                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  8547                           ;	Data EEPROM Write Protection bit
  8548                           ;	WRTD = OFF, Data EEPROM not write-protected
  8549   30000B                     	org	3145739
  8550   30000B  E0                 	db	224
  8551                           
  8552                           ;Config register CONFIG7L @ 0x30000C
  8553                           ;	Table Read Protection bit
  8554                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  8555                           ;	Table Read Protection bit
  8556                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  8557                           ;	Table Read Protection bit
  8558                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  8559                           ;	Table Read Protection bit
  8560                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  8561   30000C                     	org	3145740
  8562   30000C  0F                 	db	15
  8563                           
  8564                           ;Config register CONFIG7H @ 0x30000D
  8565                           ;	Boot Block Table Read Protection bit
  8566                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  8567   30000D                     	org	3145741
  8568   30000D  40                 	db	64
  8569                           tosu	equ	0xFFF
  8570                           tosh	equ	0xFFE
  8571                           tosl	equ	0xFFD
  8572                           stkptr	equ	0xFFC
  8573                           pclatu	equ	0xFFB
  8574                           pclath	equ	0xFFA
  8575                           pcl	equ	0xFF9
  8576                           tblptru	equ	0xFF8
  8577                           tblptrh	equ	0xFF7
  8578                           tblptrl	equ	0xFF6
  8579                           tablat	equ	0xFF5
  8580                           prodh	equ	0xFF4
  8581                           prodl	equ	0xFF3
  8582                           indf0	equ	0xFEF
  8583                           postinc0	equ	0xFEE
  8584                           postdec0	equ	0xFED
  8585                           preinc0	equ	0xFEC
  8586                           plusw0	equ	0xFEB
  8587                           fsr0h	equ	0xFEA
  8588                           fsr0l	equ	0xFE9
  8589                           wreg	equ	0xFE8
  8590                           indf1	equ	0xFE7
  8591                           postinc1	equ	0xFE6
  8592                           postdec1	equ	0xFE5
  8593                           preinc1	equ	0xFE4
  8594                           plusw1	equ	0xFE3
  8595                           fsr1h	equ	0xFE2
  8596                           fsr1l	equ	0xFE1
  8597                           bsr	equ	0xFE0
  8598                           indf2	equ	0xFDF
  8599                           postinc2	equ	0xFDE
  8600                           postdec2	equ	0xFDD
  8601                           preinc2	equ	0xFDC
  8602                           plusw2	equ	0xFDB
  8603                           fsr2h	equ	0xFDA
  8604                           fsr2l	equ	0xFD9
  8605                           status	equ	0xFD8

Data Sizes:
    Strings     83
    Constant    0
    Data        66
    BSS         78
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    122     126
    BANK0           128     83     128
    BANK1           256      0      96
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    button_initialize@btn	PTR const struct . size(2) Largest target is 3
		 -> button(BANK1[3]), 

    button_read_state@btn	PTR const struct . size(2) Largest target is 3
		 -> button(BANK1[3]), 

    button_read_state@btn_state	PTR enum E3039 size(1) Largest target is 1
		 -> button_state(BANK0[1]), 

    convert_int_to_string@str	PTR unsigned char  size(1) Largest target is 11
		 -> lcd_4bit_print_int@str(COMRAM[11]), 

    EXT_Interupt_DeInit@Interupt_Obj$EXT_InteruptHandler	PTR FTN()void  size(2) Largest target is 0

    EXT_Interupt_Init@Interupt_Obj$EXT_InteruptHandler	PTR FTN()void  size(2) Largest target is 0

    f$.$buffer	PTR unsigned char  size(2) Largest target is 0

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    gpio_pin_direction_inti@pin_config	PTR const struct . size(2) Largest target is 8
		 -> button(BANK1[3]), keypad(BANK1[8]), keypad$keypad_cols_pins(BANK1[4]), keypad$keypad_rows_pins(BANK1[4]), 
		 -> lcd(BANK0[6]), lcd$Dx(BANK0[4]), led_inti@pin_config(COMRAM[1]), 

    gpio_pin_inti@pin_config	PTR const struct . size(2) Largest target is 8
		 -> keypad(BANK1[8]), keypad$keypad_rows_pins(BANK1[4]), led_inti@pin_config(COMRAM[1]), 

    gpio_pin_read_logic@pin_config	PTR const struct . size(2) Largest target is 8
		 -> button(BANK1[3]), keypad(BANK1[8]), keypad$keypad_cols_pins(BANK1[4]), 

    gpio_pin_write_logic@pin_config	PTR const struct . size(2) Largest target is 8
		 -> keypad(BANK1[8]), keypad$keypad_rows_pins(BANK1[4]), lcd(BANK0[6]), lcd$Dx(BANK0[4]), 
		 -> led_inti@pin_config(COMRAM[1]), led_turn_off@pin_config(COMRAM[1]), led_turn_on@pin_config(COMRAM[1]), 

    IN0_Interupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    IN1_Interupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    IN2_Interupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    keypad_get_value@keypad	PTR const struct . size(2) Largest target is 8
		 -> keypad(BANK1[8]), 

    keypad_get_value@value	PTR unsigned char  size(1) Largest target is 1
		 -> key(BANK0[1]), 

    keypad_initi@keypad	PTR const struct . size(2) Largest target is 8
		 -> keypad(BANK1[8]), 

    lat_register	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> LATA(BITBIGSFRll[1]), LATB(BITBIGSFRlh[1]), LATC(BITBIGSFRlh[1]), LATD(BITBIGSFRlh[1]), 
		 -> LATE(BITBIGSFRlh[1]), 

    lcd_4bit_initi@LCD	PTR const struct . size(1) Largest target is 6
		 -> lcd(BANK0[6]), 

    lcd_4bit_print_char@LCD	PTR const struct . size(1) Largest target is 6
		 -> lcd(BANK0[6]), 

    lcd_4bit_print_int@LCD	PTR const struct . size(1) Largest target is 6
		 -> lcd(BANK0[6]), 

    lcd_4bit_print_string@LCD	PTR const struct . size(1) Largest target is 6
		 -> lcd(BANK0[6]), 

    lcd_4bit_print_string@Str	PTR unsigned char  size(2) Largest target is 17
		 -> lcd_4bit_print_int@str(COMRAM[11]), STR_2(CODE[17]), STR_3(CODE[16]), STR_4(CODE[12]), 
		 -> STR_5(CODE[17]), STR_6(CODE[17]), STR_7(CODE[16]), 

    lcd_4bit_send_command@LCD	PTR const struct . size(1) Largest target is 6
		 -> lcd(BANK0[6]), 

    LCD_4BIT_SEND_ENABLE@LCD	PTR const struct . size(1) Largest target is 6
		 -> lcd(BANK0[6]), 

    lcd_4bit_set_cursor@LCD	PTR const struct . size(1) Largest target is 6
		 -> lcd(BANK0[6]), 

    LCD_SEND_4BITS@LCD	PTR const struct . size(1) Largest target is 6
		 -> lcd(BANK0[6]), 

    memset@dest	PTR void  size(1) Largest target is 11
		 -> lcd_4bit_print_int@str(COMRAM[11]), 

    memset@p	PTR unsigned char  size(1) Largest target is 11
		 -> lcd_4bit_print_int@str(COMRAM[11]), 

    port_register	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> PORTA(BITBIGSFRll[1]), PORTB(BITBIGSFRll[1]), PORTC(BITBIGSFRll[1]), PORTD(BITBIGSFRll[1]), 
		 -> PORTE(BITBIGSFRll[1]), 

    S1558$buffer	PTR unsigned char  size(2) Largest target is 0

    S1558$source	PTR const unsigned char  size(2) Largest target is 0

    S579$EXT_InteruptHandler	PTR FTN()void  size(2) Largest target is 0

    S849$timer0_interrupt_handler	PTR FTN()void  size(2) Largest target is 0

    sp__memset	PTR void  size(1) Largest target is 11
		 -> lcd_4bit_print_int@str(COMRAM[11]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 11
		 -> lcd_4bit_print_int@str(COMRAM[11]), 

    timer0_inti@timer0$timer0_interrupt_handler	PTR FTN()void  size(2) Largest target is 0

    TMR0_Interupt_Handler	PTR FTN()void  size(2) Largest target is 1
		 -> NULL(), 

    tris_register	PTR volatile unsigned char [5] size(2) Largest target is 1
		 -> TRISA(BITBIGSFRll[1]), TRISB(BITBIGSFRhll[1]), TRISC(BITBIGSFRhll[1]), TRISD(BITBIGSFRhll[1]), 
		 -> TRISE(BITBIGSFRhll[1]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_1(CODE[5]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 


Critical Paths under _main in COMRAM

    _main->_print_numbers
    _print_numbers->_calculate_results_binary_octal
    _calculate_results_decimal->_lcd_4bit_print_int
    _calculate_results_binary_octal->_lcd_4bit_print_int
    _lcd_4bit_print_int->_convert_int_to_string
    _convert_int_to_string->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->___lodiv
    _a_power_b->___wmul
    _mode_select_menu->_lcd_4bit_set_cursor
    _lcd_4bit_set_cursor->_lcd_4bit_send_command
    _lcd_4bit_print_string->_lcd_4bit_print_char
    _lcd_4bit_print_char->_LCD_SEND_4BITS
    _keypad_get_value->_gpio_pin_write_logic
    _lcd_4bit_initi->_lcd_4bit_send_command
    _lcd_4bit_send_command->_LCD_SEND_4BITS
    _LCD_SEND_4BITS->_gpio_pin_write_logic
    _LCD_4BIT_SEND_ENABLE->_gpio_pin_write_logic
    _keypad_initi->_gpio_pin_inti
    _gpio_pin_inti->_gpio_pin_write_logic
    _button_read_state->_gpio_pin_read_logic
    _button_initialize->_gpio_pin_direction_inti

Critical Paths under _InteruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    _print_numbers->_calculate_results_binary_octal

Critical Paths under _InteruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _InteruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _InteruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _InteruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _InteruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _InteruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _InteruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _InteruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _InteruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _InteruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _InteruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _InteruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _InteruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _InteruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _InteruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _InteruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  259897
                                            120 COMRAM     2     2      0
                  _button_initialize
                  _button_read_state
                   _keypad_get_value
                       _keypad_initi
                     _lcd_4bit_initi
              _lcd_4bit_print_string
              _lcd_4bit_send_command
                   _mode_select_menu
                      _print_numbers
 ---------------------------------------------------------------------------------
 (1) _print_numbers                                        8     8      0  130035
                                            112 COMRAM     8     8      0
                             ___omul
     _calculate_results_binary_octal
          _calculate_results_decimal
                _lcd_4bit_print_char
              _lcd_4bit_send_command
 ---------------------------------------------------------------------------------
 (2) _calculate_results_decimal                            2     2      0   44717
                                            103 COMRAM     2     2      0
                            ___lodiv
                             ___omul
                 _lcd_4bit_print_int
                _lcd_4bit_set_cursor
 ---------------------------------------------------------------------------------
 (2) _calculate_results_binary_octal                      92    92      0   49996
                                            103 COMRAM     9     9      0
                                              0 BANK0     83    83      0
                            ___lodiv
                            ___lomod
                            ___lwdiv
                             ___omul
                             ___wmul
                          _a_power_b
                 _lcd_4bit_print_int
                _lcd_4bit_set_cursor
 ---------------------------------------------------------------------------------
 (3) _lcd_4bit_print_int                                  21    12      9   23640
                                             82 COMRAM    21    12      9
              _convert_int_to_string
              _lcd_4bit_print_string
 ---------------------------------------------------------------------------------
 (4) _convert_int_to_string                                9     0      9    4224
                                             73 COMRAM     9     0      9
                             _memset
                            _sprintf
 ---------------------------------------------------------------------------------
 (5) _sprintf                                             25    15     10    3660
                                             50 COMRAM    23    13     10
                           _vfprintf
 ---------------------------------------------------------------------------------
 (6) _vfprintf                                             4     1      3    3307
                                             46 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (7) _vfpfcnvrt                                           22    19      3    2957
                                             25 COMRAM    21    18      3
                            ___lodiv
                            ___lomod
                              _fputc
 ---------------------------------------------------------------------------------
 (8) _fputc                                                8     5      3     782
                                              0 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (9) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (8) ___lomod                                             17     1     16     615
                                              0 COMRAM    17     1     16
 ---------------------------------------------------------------------------------
 (8) ___lodiv                                             25     9     16     770
                                              0 COMRAM    25     9     16
 ---------------------------------------------------------------------------------
 (5) _memset                                               6     1      5     324
                                              0 COMRAM     6     1      5
 ---------------------------------------------------------------------------------
 (3) _a_power_b                                           10     8      2    1661
                                              6 COMRAM    10     8      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1319
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___omul                                              24     8     16    3562
                                              0 COMRAM    24     8     16
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     314
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _mode_select_menu                                     2     2      0   54358
                                             27 COMRAM     2     2      0
                   _keypad_get_value
              _lcd_4bit_print_string
              _lcd_4bit_send_command
                _lcd_4bit_set_cursor
 ---------------------------------------------------------------------------------
 (3) _lcd_4bit_set_cursor                                  6     3      3   16745
                                             21 COMRAM     6     3      3
              _lcd_4bit_send_command
 ---------------------------------------------------------------------------------
 (4) _lcd_4bit_print_string                                4     1      3   18297
                                             21 COMRAM     4     1      3
                _lcd_4bit_print_char
 ---------------------------------------------------------------------------------
 (2) _lcd_4bit_print_char                                  4     2      2   16870
                                             17 COMRAM     4     2      2
               _LCD_4BIT_SEND_ENABLE
                     _LCD_SEND_4BITS
               _gpio_pin_write_logic
 ---------------------------------------------------------------------------------
 (2) _keypad_get_value                                    15    12      3    4426
                                             10 COMRAM    15    12      3
                _gpio_pin_read_logic
               _gpio_pin_write_logic
 ---------------------------------------------------------------------------------
 (1) _lcd_4bit_initi                                       5     4      1   28940
                                             21 COMRAM     5     4      1
               _LCD_4BIT_SEND_ENABLE
                     _LCD_SEND_4BITS
            _gpio_pin_direction_inti
               _gpio_pin_write_logic
              _lcd_4bit_send_command
 ---------------------------------------------------------------------------------
 (2) _lcd_4bit_send_command                                4     2      2   14890
                                             17 COMRAM     4     2      2
               _LCD_4BIT_SEND_ENABLE
                     _LCD_SEND_4BITS
               _gpio_pin_write_logic
 ---------------------------------------------------------------------------------
 (3) _LCD_SEND_4BITS                                       8     6      2    4806
                                             10 COMRAM     7     5      2
               _gpio_pin_write_logic
 ---------------------------------------------------------------------------------
 (3) _LCD_4BIT_SEND_ENABLE                                 3     2      1    3959
                                             10 COMRAM     2     1      1
               _gpio_pin_write_logic
 ---------------------------------------------------------------------------------
 (1) _keypad_initi                                         9     7      2    6613
                                             14 COMRAM     9     7      2
            _gpio_pin_direction_inti
                      _gpio_pin_inti
 ---------------------------------------------------------------------------------
 (2) _gpio_pin_inti                                        4     2      2    4852
                                             10 COMRAM     4     2      2
            _gpio_pin_direction_inti
               _gpio_pin_write_logic
 ---------------------------------------------------------------------------------
 (3) _gpio_pin_write_logic                                10     7      3    3137
                                              0 COMRAM    10     7      3
 ---------------------------------------------------------------------------------
 (1) _button_read_state                                    6     3      3     809
                                              7 COMRAM     6     3      3
                _gpio_pin_read_logic
 ---------------------------------------------------------------------------------
 (3) _gpio_pin_read_logic                                  7     5      2     304
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _button_initialize                                    3     1      2    1529
                                              9 COMRAM     3     1      2
            _gpio_pin_direction_inti
 ---------------------------------------------------------------------------------
 (2) _gpio_pin_direction_inti                              9     7      2    1337
                                              0 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _InteruptManager                                     0     0      0       0
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR0_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _INT2_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _INT1_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _INT0_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _button_initialize
     _gpio_pin_direction_inti
   _button_read_state
     _gpio_pin_read_logic
   _keypad_get_value
     _gpio_pin_read_logic
     _gpio_pin_write_logic
   _keypad_initi
     _gpio_pin_direction_inti
     _gpio_pin_inti
       _gpio_pin_direction_inti
       _gpio_pin_write_logic
   _lcd_4bit_initi
     _LCD_4BIT_SEND_ENABLE
       _gpio_pin_write_logic
     _LCD_SEND_4BITS
       _gpio_pin_write_logic
     _gpio_pin_direction_inti
     _gpio_pin_write_logic
     _lcd_4bit_send_command
       _LCD_4BIT_SEND_ENABLE
       _LCD_SEND_4BITS
       _gpio_pin_write_logic
   _lcd_4bit_print_string
     _lcd_4bit_print_char
       _LCD_4BIT_SEND_ENABLE
       _LCD_SEND_4BITS
       _gpio_pin_write_logic
   _lcd_4bit_send_command
   _mode_select_menu
     _keypad_get_value
     _lcd_4bit_print_string
     _lcd_4bit_send_command
     _lcd_4bit_set_cursor
       _lcd_4bit_send_command
   _print_numbers
     ___omul
     _calculate_results_binary_octal
       ___lodiv
       ___lomod
       ___lwdiv
       ___omul
       ___wmul
       _a_power_b
         ___wmul
       _lcd_4bit_print_int
         _convert_int_to_string
           _memset
           _sprintf
             _vfprintf
               _vfpfcnvrt
                 ___lodiv
                 ___lomod
                 _fputc
                   _putch
         _lcd_4bit_print_string
       _lcd_4bit_set_cursor
     _calculate_results_decimal
       ___lodiv
       ___omul
       _lcd_4bit_print_int
       _lcd_4bit_set_cursor
     _lcd_4bit_print_char
     _lcd_4bit_send_command

 _InteruptManager (ROOT)
   _INT0_ISR
   _INT1_ISR
   _INT2_ISR
   _TMR0_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      42        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      60       7       37.5%
BITBANK15           80      0       0      34        0.0%
BANK15              80      0       0      35        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     53      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     7A      7E       1      100.0%
BITBIGSFRhll        3E      0       0      38        0.0%
BITBIGSFRhlhh       18      0       0      37        0.0%
BITBIGSFRhh          D      0       0      36        0.0%
BITBIGSFRlh          4      0       0      39        0.0%
BITBIGSFRll          4      0       0      40        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     15E      41        0.0%
DATA                 0      0     15E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Fri Jan 05 00:30:30 2024

                              ?_print_numbers 0001                                             l9 3DBA  
                                          l20 36D4                                            l15 36D2  
                                          l41 363C                                            l56 2D98  
                                          l92 3BBA                                            l87 3028  
                                          l97 3B5C                           ___wmul@multiplicand 0003  
                                         l120 3C68                                           l115 3872  
                                         l107 395A                                           l306 3A32  
                                         l174 3CB0                                           l184 3C14  
                                         l169 39C6                                           l266 316C  
                                         l291 3768                                           l285 3298  
                                         l614 1F18                                           l623 2C46  
                                         l643 20B6                                           l636 2A8C  
                                         l662 2560                                           l671 3DE0  
                                         l667 3AF6                                           l668 3AFE  
                                         l688 3580                                           l689 35A0  
                                         _Num 00D3                                           _lcd 00FA  
                                         _led 00F9                                           _key 00F5  
                                         _ret 015F                                           prod 0FF3  
                                         wreg 0FE8                                          l1116 3388  
                                        l1109 3368                                          l1126 3458  
                                        l1119 3438                                          l1162 38DE  
                                        l1402 2886                                          l1421 3502  
                                        l1432 3E06                                          l3120 2562  
                                        l1169 38E6                                          l1409 3CF0  
                                        l3050 32CC                                          l3130 25AA  
                                        l3122 2586                                          l1355 3D5E  
                                        l1348 3D8E                                          l3060 334E  
                                        l3052 32E0                                          l3044 329A  
                                        l3140 25E8                                          l3132 25BE  
                                        l3124 258E                                          l3062 3350  
                                        l3054 32EE                                          l3046 32A6  
                                        l3070 33B0                                          l3150 2644  
                                        l3142 25F0                                          l3134 25C0  
                                        l3126 259C                                          l3064 3362  
                                        l3056 3300                                          l3048 32C4  
                                        l3080 3432                                          l3072 33C4  
                                        l3160 26E0                                          l3152 2674  
                                        l3136 25DE                                          l3128 25A0  
                                        l3320 3BE8                                          l3410 3504  
                                        l3322 3DBC                                          l3402 3AA0  
                                        l3058 332E                                          l3074 33D2  
                                        l3066 338A                                          l3090 34A0  
                                        l3082 345A                                          l3170 27F2  
                                        l3162 26E4                                          l3138 25E2  
                                        l3146 25F8                                          l3250 3CB2  
                                        l3314 3BBC                                          l3420 3874  
                                        l3412 3510                                          l3324 3DD8  
                                        l3404 3AB4                                          l3076 3400  
                                        l3068 33A8                                          l3092 34D2  
                                        l3084 346A                                          l3172 2810  
                                        l3164 275C                                          l3156 26A8  
                                        l3180 2856                                          l3148 2622  
                                        l3252 3CBA                                          l5020 1F3A  
                                        l5004 2BA2                                          l5012 2C0A  
                                        l5110 3DB8                                          l5102 3D90  
                                        l3430 38AC                                          l3422 387C  
                                        l3414 351E                                          l3406 3ACE  
                                        l3270 3D60                                          l3078 3420  
                                        l3086 347A                                          l3174 2812  
                                        l3166 27C0                                          l3158 26D2  
                                        l3254 3CCA                                          l3318 3BD0  
                                        l5030 2068                                          l5022 1F54  
                                        l5104 3D90                                          l5120 3664  
                                        l5200 2FC0                                          l3440 38D8  
                                        l3432 38B2                                          l3424 388E  
                                        l3416 353E                                          l3408 3AD2  
                                        l3272 3D68                                          l3088 3484  
                                        l3168 27DE                                          l3184 2862  
                                        l3256 3CE8                                          l3280 3D34  
                                        l5040 2148                                          l5032 2096  
                                        l5024 1FBE                                          l5106 3DA2  
                                        l5130 36C0                                          l5122 366C  
                                        l5114 363E                                          l5210 2FF4  
                                        l5202 2FCC                                          l3434 38C8  
                                        l3426 3896                                          l3418 3550  
                                        l3274 3D72                                          l3178 2828  
                                        l3282 3D3C                                          l5050 21FE  
                                        l5042 21AC                                          l5026 2022  
                                        l5034 2098                                          l5018 1F1A  
                                        l5108 3DAA                                          l5132 36CE  
                                        l5124 367A                                          l5116 3642  
                                        l5140 35B4                                          l5212 3000  
                                        l5204 2FD4                                          l5300 2A68  
                                        l3436 38D0                                          l3428 389E  
                                        l3276 3D74                                          l3284 3D44  
                                        l5052 2222                                          l5060 22A2  
                                        l5044 21BE                                          l5036 20D6  
                                        l5028 2036                                          l5126 3696  
                                        l5118 3654                                          l5150 35E0  
                                        l5142 35BC                                          l5214 300C  
                                        l5206 2FE0                                          l5302 2A78  
                                        l3438 38D2                                          l3286 3D54  
                                        l3278 3D2C                                          l5070 2324  
                                        l5054 2246                                          l5062 22DC  
                                        l5046 21DA                                          l5038 20DE  
                                        l5310 1056                                          l5128 36A4  
                                        l5160 3608                                          l5152 35E4  
                                        l5136 35A2                                          l5216 3018  
                                        l5208 2FE8                                          l5304 2A86  
                                        l5080 2406                                          l5072 237A  
                                        l5064 22E0                                          l5056 2274  
                                        l5048 21DC                                          l5312 105A  
                                        l5162 361A                                          l5154 3600  
                                        l5138 35A2                                          l5218 3026  
                                        l5170 2EE4                                          l5250 289A  
                                        l5090 250C                                          l5074 2388  
                                        l5066 2304                                          l5410 1A40  
                                        l5402 1984                                          l5322 11AE  
                                        l5314 106A                                          l5164 361E  
                                        l5148 35C4                                          l5172 2EF4  
                                        l5260 28E8                                          l5252 28A6  
                                        l5092 2512                                          l5084 2424  
                                        l5076 23E6                                          l5068 2316  
                                        l5420 1B86                                          l5340 133A  
                                        l5332 127C                                          l5324 11C0  
                                        l5316 1100                                          l5166 363A  
                                        l5190 2F72                                          l5182 2F2C  
                                        l5174 2EFC                                          l5270 2952  
                                        l5262 28FC                                          l5254 28B2  
                                        l5246 2888                                          l5086 2448  
                                        l5094 2520                                          l5078 23E8  
                                        l6070 2C20                                          l5430 1CCA  
                                        l5422 1B96                                          l5414 1ADA  
                                        l5406 1A1E                                          l5350 147E  
                                        l5342 134A                                          l5326 11D2  
                                        l5318 1114                                          l4800 3C6A  
                                        l5192 2F82                                          l5184 2F3C  
                                        l5176 2F24                                          l6080 2A34  
                                        l5280 29A2                                          l5272 2968  
                                        l5264 2918                                          l5256 28C2  
                                        l5248 288E                                          l5096 2534  
                                        l5088 246A                                          l6072 22B6  
                                        l5440 1DAA                                          l5432 1CDA  
                                        l5408 1A30                                          l5360 154C  
                                        l5352 1490                                          l5336 1316  
                                        l5328 11E2                                          l5194 2F8E  
                                        l5186 2F40                                          l4810 3B10  
                                        l6082 3942                                          l5290 29F6  
                                        l5282 29A8                                          l5274 296C  
                                        l5266 292C                                          l5258 28D0  
                                        l6074 260C                                          l5442 1DBA  
                                        l5426 1C30                                          l5418 1B74  
                                        l5370 161A                                          l5354 14A2  
                                        l5346 13E4                                          l5338 1328  
                                        l6084 3280                                          l4804 3C7E  
                                        l4820 3B6E                                          l5196 2F96  
                                        l5188 2F5C                                          l4812 3B18  
                                        l5292 2A04                                          l5284 29B8  
                                        l5276 297C                                          l5268 2940  
                                        l6076 26BC                                          l6068 1E8C  
                                        l5460 1E02                                          l5452 1DDA  
                                        l5436 1D42                                          l5380 1760  
                                        l5364 15E6                                          l5356 14B2  
                                        l6086 3154                                          l4806 3C94  
                                        l4822 3B76                                          l5198 2FBA  
                                        l4814 3B5A                                          l4830 3804  
                                        l5286 29E2                                          l5278 298A  
                                        l6078 2848                                          l4910 3C56  
                                        l5470 1E32                                          l5454 1DEA  
                                        l5446 1DC2                                          l5382 1772  
                                        l5374 16B4                                          l5366 15F8  
                                        l5710 2D9A                                          l4760 316E  
                                        l4920 39DA                                          l4824 3BB8  
                                        l4808 3B00                                          l4832 380C  
                                        l5288 29E6                                          l5296 2A20  
                                        l4912 3C66                                          l4904 3C16  
                                        l5480 1E6C                                          l5472 1E3C  
                                        l5464 1E0A                                          l5448 1DD2  
                                        l5392 18B6                                          l5384 1782  
                                        l5368 160A                                          l5720 2E18  
                                        l5712 2DC6                                          l4850 306A  
                                        l4842 302A                                          l4770 3210  
                                        l4762 3172                                          l4922 39FC  
                                        l4818 3B5E                                          l4930 2C48  
                                        l4834 383A                                          l5298 2A52  
                                        l4906 3C26                                          l5474 1E4C  
                                        l5466 1E1A                                          l5458 1DF2  
                                        l5394 18C8                                          l5378 174E  
                                        l5730 2E6A                                          l5722 2E2C  
                                        l5714 2DDE                                          l4852 30CC  
                                        l4844 302E                                          l4764 3184  
                                        l4924 3A04                                          l4916 39C8  
                                        l4932 2C4C                                          l4836 383E  
                                        l4828 37F0                                          l4908 3C2E  
                                        l5476 1E60                                          l5468 1E26  
                                        l5396 18DA                                          l5388 181C  
                                        l5484 1E76                                          l5740 2EA4  
                                        l5732 2E7C                                          l5724 2E3E  
                                        l5716 2DF4                                          l4846 3040  
                                        l4870 370A                                          l4774 326C  
                                        l4766 31A6                                          l4926 3A30  
                                        l4918 39C8                                          l4950 2C86  
                                        l4934 2C5E                                          l4838 3870  
                                        l5478 1E68                                          l5398 18EA  
                                        l5486 1F12                                          l5742 2EB4  
                                        l5734 2E80                                          l5726 2E42  
                                        l5718 2E04                                          l4856 3128  
                                        l4848 3062                                          l4768 31AE  
                                        l4776 3296                                          l4784 395C  
                                        l4960 2CF6                                          l4952 2CA6  
                                        l4944 2C7E                                          l4936 2C6E  
                                        l4880 38E8                                          l5736 2E8C  
                                        l5744 2EC2                                          l5728 2E58  
                                        l4858 316A                                          l4866 36D6  
                                        l4794 3978                                          l4970 2D20  
                                        l4954 2CAA                                          l4938 2C76  
                                        l4882 38F8                                          l5746 2EC6  
                                        l5738 2E98                                          l4876 3710  
                                        l4868 36E8                                          l4796 39A6  
                                        l4788 3970                                          l4972 2D56  
                                        l4956 2CC6                                          l4980 2D96  
                                        l4884 3900                                          l4798 39AA  
                                        l4974 2D5A                                          l4966 2CFE  
                                        l4958 2CE8                                          l4886 3906  
                                        l4894 392E                                          l4990 2AD6  
                                        l4976 2D76                                          l4968 2D10  
                                        l4888 391A                                          l4896 3958  
                                        l4992 2B06                                          l4984 2A8E  
                                        l4978 2D7A                                          l4986 2A92  
                                        l4988 2AC2                                          l4998 2B3A  
                                        STR_1 104F                                          STR_2 1012  
                                        STR_3 1033                                          STR_4 1043  
                                        STR_5 1012                                          STR_6 1001  
                                        STR_7 1023                   keypad_get_value@logic_state 0012  
                                        u2010 2586                                          u2011 2582  
                                        u2020 25DE                                          u2021 25DA  
                                        u2030 2640                                          u2110 3CE8  
                                        u2031 263C                                          u2111 3CE4  
                                        u2040 27DE                                          u2041 27DA  
                                        u2130 3D8E                                          u2050 27EE  
                                        u2131 3D8A                                          u2051 27EA  
                                        u2060 2824                                          u2061 2820  
                                        _LATA 0F89                                          u2310 3AF6  
                                        _LATB 0F8A                                          u2311 3AF2  
                                        _LATC 0F8B                                          u4000 3DA2  
                                        _LATD 0F8C                                          u4001 3D9E  
                                        u2321 350A                                          _LATE 0F8D  
                                        u4010 3654                                          u2330 351E  
                                        u4011 3650                                          u2331 351A  
                                        u4020 3664                                          u2340 3580  
                                        u4021 3660                                          u2341 357C  
                                        u4030 3696                                          u2350 388E  
                                        u2190 3BCC                                          u4031 3692  
                                        u2351 388A                                          u2191 3BC8  
                                        u4040 36C0                                          u2360 38AC  
                                        u4200 11D2                                          _INT0 7C08  
                                        u4041 36BC                                          u4121 2894  
                                        u2361 38A8                                          u4201 11CE  
                                        _INT1 7C09                                          u4050 35B4  
                                        u2370 38C8                                          u4210 11E2  
                                        _INT2 7C0A                                          u4051 35B0  
                                        u4131 28A0                                          u2371 38C4  
                                        u4211 11DE                                          u4060 3600  
                                        u1900 33A8                                          u4300 161A  
                                        u4220 1328                                          u4061 35FC  
                                        u4141 28AC                                          u1901 33A4  
                                        u4301 1616                                          u4221 1324  
                                        u4070 363A                                          u4150 2940  
                                        u1910 33D2                                          u4310 1760  
                                        u4230 133A                                          u4071 3636  
                                        u4151 293C                                          u1911 33CE  
                                        u4311 175C                                          u4231 1336  
                                        u4080 2EF4                                          u4160 2952  
                                        u1920 3400                                          u4400 1B96  
                                        u4320 1772                                          u4240 134A  
                                        u4081 2EF0                                          u4161 294E  
                                        u1921 33FC                                          u4401 1B92  
                                        u4321 176E                                          u4241 1346  
                                        u4090 2F5C                                          u4170 2964  
                                        u1930 346A                                          u4410 1CDA  
                                        u4330 1782                                          u4250 1490  
                                        u4091 2F58                                          u4171 2960  
                                        u1931 3466                                          u4411 1CD6  
                                        u4331 177E                                          u4251 148C  
                                        u3604 31CE                                          u3620 396C  
                                        u3700 3860                                          u1940 347A  
                                        u4420 1DBA                                          u4340 18C8  
                                        u4260 14A2                                          u4180 106A  
                                        u3605 31CA                                          u3621 3968  
                                        u1861 32A0                                          u1941 3476  
                                        u4421 1DB6                                          u4341 18C4  
                                        u4261 149E                                          u4181 1066  
                                        u3614 3230                                          u3710 3870  
                                        u1870 32C4                                          u1950 34A0  
                                        u4430 1DD2                                          u4350 18DA  
                                        u4270 14B2                                          u4190 11C0  
                                        u3615 322C                                          u3711 386C  
                                        u1871 32C0                                          u1951 349C  
                                        u4431 1DCE                                          u4351 18D6  
                                        u4271 14AE                                          u4191 11BC  
                                        u3720 3040                                          u3640 39C6  
                                        u1880 32EE                                          u1960 34D2  
                                        u4440 1DEA                                          u4360 18EA  
                                        u4280 15F8                                          u3721 303C  
                                        u3641 39C2                                          u1881 32EA  
                                        u1961 34CE                                          u4441 1DE6  
                                        u4361 18E6                                          u4281 15F4  
                                        u3730 3062                                          u3650 3C7A  
                                        u3634 3996                                          u3810 38F8  
                                        u1890 332E                                          u4450 1E02  
                                        u4370 1A30                                          u4290 160A  
                                        u3731 305E                                          u3651 3C76  
                                        u3635 3992                                          u3707 3856  
                                        u3811 38F4                                          u1891 332A  
                                        u4451 1DFE                                          u4371 1A2C  
                                        u4291 1606                                          u3804 375E  
                                        u3580 3184                                          u3900 2D96  
                                        u3660 3B10                                          u3820 3C26  
                                        u4380 1A40                                          u3805 375A  
                                        u3581 3180                                          u3901 2D92  
                                        u3661 3B0C                                          u3821 3C22  
                                        u4461 1E20                                          u4381 1A3C  
                                        u3590 31A6                                          u3830 39DA  
                                        u3670 3B6E                                          u3910 2036  
                                        u4390 1B86                                          u4710 2E3E  
                                        u3591 31A2                                          u3831 39D6  
                                        u3671 3B6A                                          u3911 2032  
                                        u4471 1E2C                                          u4391 1B82  
                                        u4711 2E3A                                          u3760 3140  
                                        u3744 308A                                          u3840 39FC  
                                        u3680 3804                                          u3920 20B6  
                                        u4480 1E60                                          u4720 2E6A  
                                        u3761 313A                                          u3745 3086  
                                        u3841 39F8                                          u3681 3800  
                                        u3921 20B2                                          u4481 1E5C  
                                        u4721 2E66                                          u3770 3142  
                                        u3754 30EC                                          u3850 2C5E  
                                        u3690 3832                                          u3930 21FA  
                                        u4730 2E7C                                          u3755 30E8  
                                        u3851 2C5A                                          u3931 21F6  
                                        u4731 2E78                                          u3780 36E8  
                                        u3860 2C6E                                          u3940 2316  
                                        u3781 36E4                                          u3861 2C6A  
                                        u3941 2312                                          u4741 2E86  
                                        u3790 370A                                          u3870 2CC6  
                                        u3950 23C0                                          u3791 3706  
                                        u3871 2CC2                                          u4807 2ED0  
                                        u4751 2E92                                          u3880 2D20  
                                        u3960 2406                                          u3881 2D1C  
                                        u3697 3828                                          u4817 28C8  
                                        u3961 2402                                          u4761 2E9E  
                                        u3890 2D76                                          u3970 2420  
                                        u4907 2FBC                                          u3891 2D72  
                                        u4827 2982                                          u3971 241C  
                                        u3955 23AE                                          u3980 2448  
                                        u4837 29BE                                          u3981 2444  
                                        u3990 2520                                          u4847 29FC  
                                        u3991 251C                                          u4857 2A5C  
                                        u4777 2DE8                                          u4867 2A7E  
                                        u4787 2E4C                                          u4877 2CEE  
                                        u4797 2EBA                          _IN1_Interupt_Handler 00DF  
                                        u4887 2F78                                          u4897 2F9C  
                                        _Num1 00ED                                          _Num2 00E5  
                                        _led1 00F8                                          _dbuf 0139  
                                        _main 2D9A                                          _mode 00F7  
                           lcd_4bit_initi@LCD 0016                                          _prec 015B  
                                        fsr0h 0FEA                                          fsr1h 0FE2  
                                        indf0 0FEF                                          fsr2h 0FDA  
                                        fsr0l 0FE9                                          indf1 0FE7  
                                        indf2 0FDF                                          fsr1l 0FE1  
                                        fsr2l 0FD9                                          btemp 007F  
                    ?_gpio_pin_direction_inti 0001                             lcd_4bit_initi@ret 001A  
                                        prodh 0FF4                                          prodl 0FF3  
                                        start 000E                                  ___param_bank 0000  
     calculate_results_binary_octal@remainder 00C3                         _lcd_4bit_send_command 3B5E  
                        _gpio_pin_write_logic 316E                        keypad_get_value@keypad 000B  
                            __end_of_INT0_ISR 3E06                              __end_of_INT1_ISR 3E02  
                            __end_of_INT2_ISR 3DFE  calculate_results_binary_octal@conversion_arr 0080  
                                       ?_main 0001                               __end_of___lodiv 338A  
                             __end_of___lomod 345A                               __end_of___lwdiv 38E8  
                                       i2l404 3DFC                                         i2l422 378C  
                                       i2l424 37AC                                         i2l426 37CC  
                                       i2l429 37EC                                         i2l463 3DEE  
                                       i2l394 3E04                                         i2l399 3E00  
                                vfpfcnvrt@fmt 001B                                         _TMR0H 0FD7  
                                       _TMR0L 0FD6                                         _PORTA 0F80  
                                       _PORTB 0F81                                         _PORTC 0F82  
                                       _PORTD 0F83                                         _PORTE 0F84  
                                       _TRISA 0F92                                         _TRISB 0F93  
                                       _TRISC 0F94                                         _TRISD 0F95  
                                       _TRISE 0F96                       LCD_4BIT_SEND_ENABLE@LCD 000B  
                    __end_of_keypad_get_value 2D9A                              __end_of_TMR0_ISR 3DF0  
                                       _flags 00E3                                         _fputc 345A  
                                       _width 0159                                         _putch 3E06  
                                       tablat 0FF5                                         ttemp5 0080  
                                       ttemp6 0083                                         ttemp7 0087  
                                       status 0FD8                                         wtemp8 0080  
                             __end_of_sprintf 3D60                              ___lodiv@dividend 0001  
                             ??_print_numbers 0071                               __initialization 3A34  
                         keypad_get_value@ret 0013                                  __end_of_main 2EE4  
               gpio_pin_read_logic@pin_config 0001                         ?_gpio_pin_write_logic 0001  
                                      ??_main 0079                                 __activetblptr 0003  
                            led_turn_on@F3064 007D                              ??_LCD_SEND_4BITS 000D  
                            ___lodiv@quotient 0011                        lcd_4bit_print_char@LCD 0012  
                           _button_initialize 3D90                        lcd_4bit_print_char@ret 0015  
                           _button_read_state 363E                                        ?_fputc 0001  
                                      ?_putch 0001                            ?_button_initialize 000A  
                                      i2l4350 3788                                        i2l4360 37DA  
                                      i2l4352 379A                                        i2l4362 37E8  
                                      i2l4354 37A8                                        i2l4346 376C  
                                      i2l4356 37BA                                        i2l4348 377A  
                                      i2l4358 37C8                                        i2l3772 3E02  
                                      i2l3790 3DE2                                        i2l3784 3DFA  
                                      i2l3792 3DE4                                        i2l3778 3DFE  
                                      i2l3794 3DEA                            ?_button_read_state 0008  
                               _tris_register 0124                           ??_button_initialize 000C  
                         ??_button_read_state 000B                        ?_lcd_4bit_send_command 0012  
                                vfprintf@cfmt 0032                                        ___omul 3504  
                                      ___wmul 3DBC                                     ??___lodiv 0011  
                                   ??___lomod 0011                                 _gpio_pin_inti 39C8  
                                   ??___lwdiv 0005                                 ?_keypad_initi 000F  
                        _IN2_Interupt_Handler 00DD                                        _button 0136  
                             LCD_SEND_4BITS@i 0010                                        _keypad 012E  
                                      _memset 3D60                   ??_calculate_results_decimal 0068  
                                      clear_0 3A7A                                        clear_1 3A86  
                                      isa$std 0001                                        fputc@c 0001  
                   __end_of_button_initialize 3DBC                               _InteruptManager 0008  
                                __mediumconst 0000                     __end_of_button_read_state 36D6  
                                      tblptrh 0FF7                                        tblptrl 0FF6  
                                      tblptru 0FF8                                 led_inti@F3059 007E  
                                      putch@c 0001                         _lcd_4bit_print_string 37F0  
                            __end_of_vfprintf 3CF2                                     ??_sprintf 003D  
           button_read_state@Pin_Logic_Status 000D                       ??_convert_int_to_string 0053  
                                  __accesstop 0080                       __end_of__initialization 3A94  
                                   ?_INT0_ISR 0001                                     ?_INT1_ISR 0001  
                                   ?_INT2_ISR 0001                                 ___rparam_used 0001  
                      ??_gpio_pin_write_logic 0004                          keypad_get_value@cols 0018  
                              __pcstackCOMRAM 0001           _calculate_results_binary_octal$1936 00C1  
                        keypad_get_value@rows 0016                                  __pidataBANK0 3DF0  
                                __pidataBANK1 3CF2                                ?_gpio_pin_inti 000B  
                                   ?_TMR0_ISR 0001                          button_initialize@btn 000A  
                              ??_keypad_initi 0011                          button_initialize@ret 000C  
                               __end_of_fputc 3504                                 __end_of_putch 3E08  
                    lcd_4bit_send_command@LCD 0012            calculate_results_binary_octal@Dec1 00C6  
          calculate_results_binary_octal@Dec2 00C4                      lcd_4bit_send_command@ret 0015  
          calculate_results_binary_octal@temp 00CB                  __end_of_LCD_4BIT_SEND_ENABLE 3CB2  
                                     ??_fputc 0004                                       ??_putch 0001  
                     gpio_pin_inti@pin_config 000B                     _calculate_results_decimal 2A8E  
                                  __pbssBANK0 00D3                                    __pbssBANK1 0139  
                            _mode_select_menu 2888                                    ??_INT0_ISR 0001  
                                  ??_INT1_ISR 0001                                    ??_INT2_ISR 0001  
                     lcd_4bit_print_char@data 0013                                       ?___omul 0001  
                        button_read_state@btn 0008                                       ?___wmul 0001  
                        button_read_state@ret 000C                                    ??_TMR0_ISR 0001  
                           led_turn_off@F3069 007C                       __end_of_InteruptManager 37F0  
                             led_toggle@F3074 007B                                       ?_memset 0001  
                         ___omul@multiplicand 0009                                _lcd_4bit_initi 2EE4  
                      ?_lcd_4bit_print_string 0016                             ?_keypad_get_value 000B  
                           __end_of_a_power_b 3B00                              ___lomod@dividend 0001  
                          ??_keypad_get_value 000E                       lcd_4bit_print_int@value 0054  
                                  a_power_b@a 000C                                    a_power_b@b 0007  
                                  a_power_b@i 000D                                       __Hparam 0000  
                                     __Lparam 0000                               ??_gpio_pin_inti 000D  
                         _gpio_pin_read_logic 36D6                                       ___lodiv 329A  
                                     ___lomod 338A                                       ___lwdiv 3874  
                                   ?_vfprintf 002F                                  __psmallconst 1000  
                                     __pcinit 3A34                                       __ramtop 1000  
                      __end_of_lcd_4bit_initi 302A                                       __ptext0 2D9A  
                                     __ptext1 1056                                       __ptext2 2A8E  
                                     __ptext3 1F1A                                       __ptext4 3C16  
                                     __ptext5 3BBC                                       __ptext6 3D2C  
                                     __ptext7 3CB2                                       __ptext8 2562  
                                     __ptext9 345A                                     _T0CONbits 0FD5  
                                     _preload 00DB                          ?_gpio_pin_read_logic 0001  
                                     _sprintf 3D2C                                __pintcode_body 376A  
                        end_of_initialization 3A94                          __end_of_keypad_initi 363E  
                              ___omul@product 0011                                       fputc@fp 0003  
                                     memset@c 0002                                       memset@n 0004  
                                     memset@p 0006                                       int_func 376A  
                     ??_lcd_4bit_send_command 0014                             __end_of_vfpfcnvrt 2888  
                        _LCD_4BIT_SEND_ENABLE 3C6A                                       postdec1 0FE5  
                                     postdec2 0FDD                         __end_of_print_numbers 1F1A  
                                     postinc0 0FEE                                       postinc1 0FE6  
                                     postinc2 0FDE                              vfpfcnvrt@convarg 0025  
                  button_read_state@btn_state 000A                                    ??_vfprintf 0032  
                            ?_InteruptManager 0001                               ?_lcd_4bit_initi 0016  
                  __end_of_lcd_4bit_print_int 3C6A                         ??_gpio_pin_read_logic 0003  
                            gpio_pin_inti@ret 000E        __end_of_calculate_results_binary_octal 2562  
              _calculate_results_binary_octal 1F1A                               lcd_4bit_initi@i 0018  
               __end_of_convert_int_to_string 3C16                           _lcd_4bit_set_cursor 38E8  
                       ?_LCD_4BIT_SEND_ENABLE 000B                         keypad_get_value@value 000D  
                     _gpio_pin_direction_inti 302A                                __end_of___omul 35A2  
                                 vfpfcnvrt@ap 001C                                   vfpfcnvrt@cp 002D  
                                 vfpfcnvrt@fp 001A                                __end_of___wmul 3DE2  
                    __end_of_mode_select_menu 2A8E                                __end_of_memset 3D90  
                                a_power_b@ans 000F                           _lcd_4bit_print_char 3B00  
                         start_initialization 3A34                               ___lodiv@divisor 0009  
                             ___lodiv@counter 0019                          ?_lcd_4bit_set_cursor 0016  
                                _lat_register 011A                             ___omul@multiplier 0001  
                        ?_lcd_4bit_print_char 0012                         lcd_4bit_print_int@LCD 0053  
                       lcd_4bit_print_int@ret 0067                         lcd_4bit_print_int@str 005C  
                                 vfprintf@fmt 0030                                      ??___omul 0011  
                                    ??___wmul 0005             __end_of_calculate_results_decimal 2C48  
                                 __pdataBANK0 00F7                                   __pdataBANK1 0100  
                                    ??_memset 0006                                    memset@dest 0001  
                lcd_4bit_send_command@command 0013                       ??_lcd_4bit_print_string 0019  
                     lcd_4bit_set_cursor@Cols 0017                    convert_int_to_string@value 004A  
                     lcd_4bit_set_cursor@Rows 0018                                   __pbssCOMRAM 007B  
                       ??_lcd_4bit_set_cursor 0019                                 __pcstackBANK0 0080  
                       _TMR0_Interupt_Handler 015D                         ??_lcd_4bit_print_char 0014  
                                   _a_power_b 3A9E                gpio_pin_write_logic@pin_config 0001  
                                   __pnvBANK1 015F                        ??_LCD_4BIT_SEND_ENABLE 000C  
                                _button_state 00F6                              ___lwdiv@dividend 0001  
                   ??_gpio_pin_direction_inti 0003                                     __pintcode 0008  
                       LCD_SEND_4BITS@command 000C                                      ?___lodiv 0001  
                                    ?___lomod 0001                                      ?___lwdiv 0001  
                                _keypad_initi 35A2                     gpio_pin_write_logic@logic 0003  
                             ___lomod@divisor 0009                                   __smallconst 1000  
                             ___lomod@counter 0011                              ___lwdiv@quotient 0005  
                                    ?_sprintf 0033                                    ?_a_power_b 0007  
                              _keypad_content 0100                                      _INT0_ISR 3E02  
                                    _INT1_ISR 3DFE                                      _INT2_ISR 3DFA  
                              ___wmul@product 0005                            keypad_initi@keypad 000F  
               __end_of_lcd_4bit_send_command 3BBC                                      i2u340_40 3788  
                                    i2u340_41 3784                                      i2u341_40 379A  
                                    i2u341_41 3796                                      i2u342_40 37A8  
                                    i2u342_41 37A4                                      i2u343_40 37BA  
                                    i2u343_41 37B6                                      i2u344_40 37C8  
                                    i2u344_41 37C4                                      i2u345_40 37DA  
                                    i2u345_41 37D6                                      i2u346_40 37E8  
                                    i2u346_41 37E4                                      i2u339_40 377A  
                                    i2u339_41 3776                              ??_lcd_4bit_initi 0017  
                       __end_of_gpio_pin_inti 3A34                                      _TMR0_ISR 3DE2  
                                   _vfpfcnvrt 2562                             ___wmul@multiplier 0001  
             __end_of_gpio_pin_direction_inti 316E                                    vfpfcnvrt@c 002E  
                     gpio_pin_write_logic@ret 000A                                   _INTCON2bits 0FF1  
                                 _INTCON3bits 0FF0                                     copy_data0 3A48  
                                   copy_data1 3A68                            _lcd_4bit_print_int 3C16  
                           keypad_get_value@i 0014                                _LCD_SEND_4BITS 395C  
                         ?_lcd_4bit_print_int 0053                                      __Hrparam 0000  
                                    _Operator 00E4                                    vfprintf@ap 0031  
                                    __Lrparam 0000                                    vfprintf@fp 002F  
            ??_calculate_results_binary_octal 0068               ?_calculate_results_binary_octal 0001  
                      lcd_4bit_set_cursor@LCD 0016                        lcd_4bit_set_cursor@ret 001B  
                                  ?_vfpfcnvrt 001A               calculate_results_binary_octal@i 00CA  
             calculate_results_binary_octal@j 00C8                             ?_mode_select_menu 0001  
                 __end_of_gpio_pin_read_logic 376A                                    sprintf@fmt 0034  
                        ??_lcd_4bit_print_int 005C                            ??_mode_select_menu 001C  
                             ___lwdiv@divisor 0003                               ___lwdiv@counter 0007  
                                    __ptext10 3E06                                      __ptext11 338A  
                                    __ptext20 37F0                                      __ptext12 329A  
                                    __ptext21 3B00                                      __ptext13 3D60  
                                    __ptext30 363E                                      __ptext22 2C48  
                                    __ptext14 3A9E                                      __ptext31 36D6  
                                    __ptext23 2EE4                                      __ptext15 3DBC  
                                    __ptext32 3D90                                      __ptext24 3B5E  
                                    __ptext16 3504                                      __ptext33 302A  
                                    __ptext25 395C                                      __ptext17 3874  
                                    __ptext26 3C6A                                      __ptext18 2888  
                                    __ptext35 3DE2                                      __ptext27 35A2  
                                    __ptext19 38E8                                      __ptext36 3DFA  
                                    __ptext28 39C8                                      __ptext37 3DFE  
                                    __ptext29 316E                                      __ptext38 3E02  
                      __end_of_LCD_SEND_4BITS 39C8                             LCD_SEND_4BITS@LCD 000B  
                                 ??_a_power_b 0009                             keypad_initi@i_113 0016  
           gpio_pin_direction_inti@pin_config 0001                         _convert_int_to_string 3BBC  
                            _keypad_get_value 2C48                                      isa$xinst 0000  
                                    int$flags 007F                                      _vfprintf 3CB2  
                        _IN0_Interupt_Handler 00E1                 __end_of_lcd_4bit_print_string 3874  
                                  _INTCONbits 0FF2                      lcd_4bit_print_string@LCD 0016  
                __end_of_gpio_pin_write_logic 329A                      lcd_4bit_print_string@Str 0017  
                    lcd_4bit_print_string@ret 0019                               ?_LCD_SEND_4BITS 000B  
                                    intlevel2 0000                                     sprintf@ap 003D  
                               _print_numbers 1056                    ?_calculate_results_decimal 0001  
                                 ??_vfpfcnvrt 001D                   __end_of_lcd_4bit_set_cursor 395C  
                                    sprintf@f 003E                                      sprintf@s 0033  
                    convert_int_to_string@str 0052                               keypad_initi@ret 0013  
                 __end_of_lcd_4bit_print_char 3B5E                    gpio_pin_direction_inti@ret 0009  
                               _port_register 0110                             ??_InteruptManager 0001  
                               keypad_initi@i 0014                        ?_convert_int_to_string 004A  
